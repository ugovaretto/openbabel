<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>atom.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">atom.h</div>  </div>
</div>
<div class="contents">
<a href="atom_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">atom.h - Handle OBAtom class.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment"></span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_ATOM_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_ATOM_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml" title="Defines for residue properties, names, etc.">openbabel/residue.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>OpenBabel
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="keyword">class </span>OBBond;
<a name="l00041"></a><a class="code" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6">00041</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00042"></a>00042 
<a name="l00044"></a>00044   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> <a class="code" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6" title="OBNodeBase is declared for backwards-compatibility with 2.0 and earlier code.">OBNodeBase</a>;
<a name="l00046"></a><a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">00046</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a>;
<a name="l00048"></a><a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">00048</a>   <span class="keyword">typedef</span> std::vector&lt;OBAtom*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="comment">//ATOM Property Macros (flags)</span>
<a name="l00052"></a><a class="code" href="atom_8h.shtml#a7049a943ce03181c7004fe9ecd798f40">00052</a> <span class="comment"></span><span class="preprocessor">#define OB_4RING_ATOM     (1&lt;&lt;1)</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a><a class="code" href="atom_8h.shtml#a54cf51e4021ce031b9a9bd20e053cead">00054</a> <span class="preprocessor">#define OB_3RING_ATOM     (1&lt;&lt;2)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a><a class="code" href="atom_8h.shtml#ac08352e8abee93573a66f692f0827bd3">00056</a> <span class="preprocessor">#define OB_AROMATIC_ATOM  (1&lt;&lt;3)</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>
<a name="l00058"></a><a class="code" href="atom_8h.shtml#a5f2ffc18f5cc3589dd1978252169f11e">00058</a> <span class="preprocessor">#define OB_RING_ATOM      (1&lt;&lt;4)</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>
<a name="l00060"></a><a class="code" href="atom_8h.shtml#a4cfdf58a49dd4ebfab6d8dada02fef43">00060</a> <span class="preprocessor">#define OB_CSTEREO_ATOM   (1&lt;&lt;5)</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a><a class="code" href="atom_8h.shtml#a7a0c4ca8c736e743fda131e25de50a26">00062</a> <span class="preprocessor">#define OB_ACSTEREO_ATOM  (1&lt;&lt;6)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>
<a name="l00064"></a><a class="code" href="atom_8h.shtml#acb984613554c9199387e3039b6cf4e8c">00064</a> <span class="preprocessor">#define OB_DONOR_ATOM     (1&lt;&lt;7)</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a><a class="code" href="atom_8h.shtml#a86c329377a02eb7b0d5e015a6d0b1099">00066</a> <span class="preprocessor">#define OB_ACCEPTOR_ATOM  (1&lt;&lt;8)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a><a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d">00068</a> <span class="preprocessor">#define OB_CHIRAL_ATOM    (1&lt;&lt;9)</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span>
<a name="l00070"></a><a class="code" href="atom_8h.shtml#a2cac237d3ceb0758f76448ba35cf4fa5">00070</a> <span class="preprocessor">#define OB_POS_CHIRAL_ATOM (1&lt;&lt;10)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>
<a name="l00072"></a><a class="code" href="atom_8h.shtml#a28504d751913b6affc112690765c1ea6">00072</a> <span class="preprocessor">#define OB_NEG_CHIRAL_ATOM (1&lt;&lt;11)</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>
<a name="l00074"></a><a class="code" href="atom_8h.shtml#aad40730c29a0be944d55f5b3e3f98ac9">00074</a> <span class="preprocessor">#define OB_ATOM_HAS_NO_H   (1&lt;&lt;12)</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>
<a name="l00076"></a><a class="code" href="atom_8h.shtml#ac41fb93bbf43756058cf90930dae22f1">00076</a> <span class="preprocessor">#define OB_ATOM_NOT_H_DEFICIENT (1&lt;&lt;13)</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a>00078   <span class="comment">// Class OBAtom</span>
<a name="l00079"></a>00079   <span class="comment">// class introduction in atom.cpp</span>
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml">00080</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082     <span class="keyword">protected</span>:
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a2a4ac28765690d9b074521327cb4876b">00083</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>                 <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a2a4ac28765690d9b074521327cb4876b" title="atomic number (type unsigned char to minimize space -- allows for 0..255 elements)">_ele</a>;       
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab3e028e65ae7c0dac55997f2cb7281ce">00084</a>       <span class="keywordtype">char</span>                          <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab3e028e65ae7c0dac55997f2cb7281ce" title="implicit valence">_impval</a>;    
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae34265581460024d37fb0ff25d97f110">00085</a>       <span class="keywordtype">char</span>                          _type[6];   
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6e636025c5db07bf67523b31a55f6327">00086</a>       <span class="keywordtype">short</span>                         <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6e636025c5db07bf67523b31a55f6327" title="formal charge">_fcharge</a>;   
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad60f474b9381f875e4b6e3f5df457c9a">00087</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad60f474b9381f875e4b6e3f5df457c9a" title="isotope (0 = most abundant)">_isotope</a>;   
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aec3b74d938a5e47bc6a6627f64d86e27">00088</a>       <span class="keywordtype">short</span>                         <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aec3b74d938a5e47bc6a6627f64d86e27" title="atomic spin, e.g., 2 for radical 1 or 3 for carbene">_spinmultiplicity</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1219a011a5e0ec59c67a5a873d81986c">00090</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1219a011a5e0ec59c67a5a873d81986c" title="unique node index (GetIdx(), SetIdx())">_idx</a>;       
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa15238ffbdb1330727678c9d6553d6ba">00091</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>                        *<a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa15238ffbdb1330727678c9d6553d6ba" title="parent molecule (if any)">_parent</a>;    
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3c7208419c7703e947e9a1c365838b98">00092</a>       std::vector&lt;OBBond*&gt;          <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3c7208419c7703e947e9a1c365838b98" title="bonds to this atom -- assumed to be one of the endpoints">_vbond</a>;     
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aef178db02607fe00f112bd1a7f5f4d2b">00094</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aef178db02607fe00f112bd1a7f5f4d2b" title="index into coordinate array">_cidx</a>;      
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5d400386667c899017669303bdec09cd">00095</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5d400386667c899017669303bdec09cd" title="hybridization">_hyb</a>;       
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5cc9f88f4cc5fda10e7932cd59a87f16">00096</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5cc9f88f4cc5fda10e7932cd59a87f16" title="bitwise flags (e.g. aromaticity)">_flags</a>;     
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae4b9cf0b2f94fc6befff220367fccd0a">00097</a>       <span class="keywordtype">double</span>                        <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae4b9cf0b2f94fc6befff220367fccd0a" title="partial charge">_pcharge</a>;   
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a91a32f6c060e12e4d188974db5b111d3">00098</a>       <span class="keywordtype">double</span>                      **<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a91a32f6c060e12e4d188974db5b111d3" title="coordinate array in double*">_c</a>;         
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae8dcade9402fad862f0391488350ea3e">00099</a>       <span class="keyword">mutable</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>               <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae8dcade9402fad862f0391488350ea3e" title="coordinate vector">_v</a>;         
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ac26545dc3d68694f0a7b6f4a776f7a17">00100</a>       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>                    *<a class="code" href="classOpenBabel_1_1OBAtom.shtml#ac26545dc3d68694f0a7b6f4a776f7a17" title="parent residue (if applicable)">_residue</a>;   
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#accc49a515c7a81154bd46a8ea8a16204">00102</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>                 <a class="code" href="classOpenBabel_1_1OBAtom.shtml#accc49a515c7a81154bd46a8ea8a16204" title="unique id">_id</a>;        
<a name="l00103"></a>00103 
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0adfe60e7fb18cb7ca2fe3ac5bb6737a">00105</a>       <span class="keywordtype">int</span>  <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0adfe60e7fb18cb7ca2fe3ac5bb6737a">GetFlag</a>()<span class="keyword"> const    </span>{  <span class="keywordflow">return</span>(_flags);  }
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#adcdab8f96dc4fdc2940749e527087245">00107</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#adcdab8f96dc4fdc2940749e527087245" title="Sets the bitwise flag.">SetFlag</a>(<span class="keywordtype">int</span> flag)  { _flags |= flag;   }
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3a1dc0419a66d2e7288214342de43b7a">00109</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3a1dc0419a66d2e7288214342de43b7a">HasFlag</a>(<span class="keywordtype">int</span> flag)  {  <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="keyword">public</span>:
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#afbdb429fe4a7d37960636a555de77326">00112</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a> {
<a name="l00113"></a>00113 
<a name="l00114"></a>00114       };
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6368d7673f23186649b2969ade3661d7">00118</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6368d7673f23186649b2969ade3661d7" title="Used internally by graph traversal algorithms.">Visit</a>;
<a name="l00119"></a>00119 
<a name="l00121"></a>00121       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>();
<a name="l00123"></a>00123       <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>();
<a name="l00125"></a>00125       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;operator = (<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;);
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a43c3ac9fe061bbb6a7e714759400e35d">00127</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a43c3ac9fe061bbb6a7e714759400e35d" title="Equivalence.">operator==</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> * other)<span class="keyword"> const </span>{  <span class="keywordflow">return</span> (GetIdx() == other-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>()); }
<a name="l00130"></a>00130       <span class="keywordtype">void</span> Duplicate(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00133"></a>00133       <span class="keywordtype">bool</span> Clear();
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab994a975e39f5c62288f4f972b6f90c9">00138</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab994a975e39f5c62288f4f972b6f90c9" title="Set atom index (i.e., in an OBMol)">SetIdx</a>(<span class="keywordtype">int</span> idx)    { _idx = idx; _cidx = (idx-1)*3; }
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a383094c5a19383cf09f3dfb4c1de1da2">00139</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a383094c5a19383cf09f3dfb4c1de1da2">SetId</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) { _id = id; }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9ca5228f1b568f7076cd930ad0902a83">00141</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9ca5228f1b568f7076cd930ad0902a83" title="Set atom hybridization (i.e., 1 = sp, 2 = sp2, 3 = sp3 ...)">SetHyb</a>(<span class="keywordtype">int</span> hyb)    { _hyb = hyb; }
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a573a9f96a971854938ab2db5eb4d4851">00143</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a573a9f96a971854938ab2db5eb4d4851" title="Set atomic number.">SetAtomicNum</a>(<span class="keywordtype">int</span> atomicnum)    { _ele = (char)atomicnum; }
<a name="l00145"></a>00145       <span class="keywordtype">void</span> SetIsotope(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iso);
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4ebf98749415a00a56fdbc77f87fdc87">00147</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4ebf98749415a00a56fdbc77f87fdc87" title="Set the implicit valence to val.">SetImplicitValence</a>(<span class="keywordtype">int</span> val)    { _impval = (char)val; }
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae048690c14e9258cc653231a56d5dfda">00149</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae048690c14e9258cc653231a56d5dfda" title="Increase the implicit valence by one.">IncrementImplicitValence</a>()     { _impval++; }
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a7acb91a903a31d698dc25d296b988f7f">00151</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a7acb91a903a31d698dc25d296b988f7f" title="Decrease the implicit valence by one.">DecrementImplicitValence</a>()     { _impval--; }
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa1d084182d025e6fa000b928807d7689">00153</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa1d084182d025e6fa000b928807d7689" title="Set the formal charge of the atom to fcharge.">SetFormalCharge</a>(<span class="keywordtype">int</span> fcharge)   { _fcharge = fcharge; }
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a299285ee1effd21803b3c042a376e149">00155</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a299285ee1effd21803b3c042a376e149" title="Set the atomic spin to spin. See _spinmultiplicity.">SetSpinMultiplicity</a>(<span class="keywordtype">short</span> spin){ _spinmultiplicity = spin; }
<a name="l00157"></a>00157       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> <span class="keywordtype">char</span> *type);
<a name="l00159"></a>00159       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> std::string &amp;type);
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a963851351ab3c084233a82d367f15607">00161</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a963851351ab3c084233a82d367f15607" title="Set the partial charge to pcharge.">SetPartialCharge</a>(<span class="keywordtype">double</span> pcharge){ _pcharge = pcharge; }
<a name="l00163"></a>00163       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v);
<a name="l00165"></a>00165       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <span class="keywordtype">double</span> x,<span class="keyword">const</span> <span class="keywordtype">double</span> y,<span class="keyword">const</span> <span class="keywordtype">double</span> z);
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aeff361260a8a4e9ea703d5d38f5fc671">00167</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aeff361260a8a4e9ea703d5d38f5fc671" title="Set the position of this atom from a pointer-driven array of coordinates.">SetCoordPtr</a>(<span class="keywordtype">double</span> **c)        { _c = c; _cidx = (GetIdx()-1)*3; }
<a name="l00169"></a>00169       <span class="keywordtype">void</span> SetVector();
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ade786f15ee67979fbb9c48970b22e184">00171</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ade786f15ee67979fbb9c48970b22e184" title="Attach an OBResidue res as containing this atom.">SetResidue</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res)     { _residue=res; }
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a962b3010305cfb80ba816a0e54097dee">00173</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a962b3010305cfb80ba816a0e54097dee" title="Attach an OBMol ptr as the parent container for this atom.">SetParent</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *ptr)          { _parent=ptr; }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3d29498c15007d9b6729e26784f23a5b">00175</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3d29498c15007d9b6729e26784f23a5b" title="Mark atom as being aromatic.">SetAromatic</a>()                  { SetFlag(<a class="code" href="atom_8h.shtml#ac08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>); }
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a2fcf3bf429f36281a43c879e40e75f34">00177</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a2fcf3bf429f36281a43c879e40e75f34" title="Clear aromatic information from the atom.">UnsetAromatic</a>()                { _flags &amp;= (~(<a class="code" href="atom_8h.shtml#ac08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>)); }
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#adf069c94123595712cb7fa847b87e449">00179</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#adf069c94123595712cb7fa847b87e449">SetClockwiseStereo</a>()           { SetFlag(<a class="code" href="atom_8h.shtml#a4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &quot;@@&quot;)">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#af328f0aa99465103074b1d336c393919">00181</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#af328f0aa99465103074b1d336c393919">SetAntiClockwiseStereo</a>()       { SetFlag(<a class="code" href="atom_8h.shtml#a7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &quot;@&quot;)">OB_ACSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6ddbbbc5f8e185c43e634a0425311275">00183</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a6ddbbbc5f8e185c43e634a0425311275">SetPositiveStereo</a>() { SetFlag(<a class="code" href="atom_8h.shtml#a2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aea322d9d450ee48fb2e89a4f7c34deda">00185</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aea322d9d450ee48fb2e89a4f7c34deda">SetNegativeStereo</a>() { SetFlag(<a class="code" href="atom_8h.shtml#a28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#afdf42f73fe8a0cec0db3c3e544830fcc">00187</a>       <span class="keywordtype">void</span> UnsetStereo()
<a name="l00188"></a>00188         {
<a name="l00189"></a>00189           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#a7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &quot;@&quot;)">OB_ACSTEREO_ATOM</a>);
<a name="l00190"></a>00190           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#a4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &quot;@@&quot;)">OB_CSTEREO_ATOM</a>);
<a name="l00191"></a>00191           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#a2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>);
<a name="l00192"></a>00192           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#a28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>);
<a name="l00193"></a>00193           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>);
<a name="l00194"></a>00194         }
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae6a016e7f67cf564e5f80254c425f65c">00196</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae6a016e7f67cf564e5f80254c425f65c" title="Mark an atom as belonging to at least one ring.">SetInRing</a>()         { SetFlag(<a class="code" href="atom_8h.shtml#a5f2ffc18f5cc3589dd1978252169f11e" title="Atom is in a ring.">OB_RING_ATOM</a>); }
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad4e5a4c67101743f644b047b632d058b">00198</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad4e5a4c67101743f644b047b632d058b" title="Mark an atom as being chiral with unknown stereochemistry.">SetChiral</a>()         { SetFlag(<a class="code" href="atom_8h.shtml#a57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3fa3634d92a924e5af69208768e839a5">00200</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3fa3634d92a924e5af69208768e839a5" title="Clear the internal coordinate pointer.">ClearCoordPtr</a>()     { _c = NULL; _cidx=0; }
<a name="l00202"></a>00202 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a25098f4715711b9755fa50ca18ac2f99">00206</a>       <span class="keywordtype">int</span>          <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a25098f4715711b9755fa50ca18ac2f99">GetFormalCharge</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_fcharge);    }
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ade227de93fbe080fc1c2854e530df81a">00208</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ade227de93fbe080fc1c2854e530df81a">GetAtomicNum</a>()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ele); }
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#adfdbf1a8c9bf80588039b4f08cfc1069">00210</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#adfdbf1a8c9bf80588039b4f08cfc1069">GetIsotope</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_isotope);    }
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a14ccfaca2264c8f8141f4c0ed7343c25">00213</a>       <span class="keywordtype">int</span>          <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a14ccfaca2264c8f8141f4c0ed7343c25">GetSpinMultiplicity</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spinmultiplicity); }
<a name="l00216"></a>00216       <span class="keywordtype">double</span>     GetAtomicMass()    <span class="keyword">const</span>;
<a name="l00219"></a>00219       <span class="keywordtype">double</span>     GetExactMass()     <span class="keyword">const</span>;
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">00221</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_idx);  }
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae6b8fa1646a64b9fbe745af4719920ec">00222</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae6b8fa1646a64b9fbe745af4719920ec">GetIndex</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _idx - 1; }
<a name="l00223"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">00223</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">GetId</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _id; }
<a name="l00226"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab7c533796dfe7ce75f2a755b668ebd5c">00226</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab7c533796dfe7ce75f2a755b668ebd5c">GetCoordinateIdx</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a042ed0fe3ac49c9505f9f79d07469423">00228</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a042ed0fe3ac49c9505f9f79d07469423">GetCIdx</a>()<span class="keyword">          const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aebccc307cd3036d7a2ad0c80e90aef22">00230</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetValence()<span class="keyword">       const</span>
<a name="l00231"></a>00231 <span class="keyword">        </span>{
<a name="l00232"></a>00232           <span class="keywordflow">return</span>((_vbond.empty()) ? 0 : static_cast&lt;unsigned int&gt; (_vbond.size()));
<a name="l00233"></a>00233         }
<a name="l00235"></a>00235       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHyb()             <span class="keyword">const</span>;
<a name="l00237"></a>00237       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetImplicitValence() <span class="keyword">const</span>;
<a name="l00239"></a>00239       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHvyValence()      <span class="keyword">const</span>;
<a name="l00241"></a>00241       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeteroValence()   <span class="keyword">const</span>;
<a name="l00243"></a>00243       <span class="keywordtype">char</span>        *GetType();
<a name="l00244"></a>00244 
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a140fe887c529e7b90eae3de197e8ceb6">00246</a>       <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a140fe887c529e7b90eae3de197e8ceb6">GetX</a>()<span class="keyword"> const   </span>{        <span class="keywordflow">return</span>(x());    }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a7e0e3acd8a6e4016522b9cdbc8f5aeb5">00248</a>       <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a7e0e3acd8a6e4016522b9cdbc8f5aeb5">GetY</a>()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(y());    }
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a885f0eb530803b77acf8ac2055c59ee8">00250</a>       <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a885f0eb530803b77acf8ac2055c59ee8">GetZ</a>()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(z());    }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252       <span class="comment">// These methods check to see if there is a coordinate pointer</span>
<a name="l00253"></a>00253       <span class="comment">// or an internal vector (e.g., SetCoordPtr())</span>
<a name="l00255"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9ccf82e6805fa3a2f34b977e1db6f4f9">00255</a> <span class="comment"></span>      <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9ccf82e6805fa3a2f34b977e1db6f4f9">x</a>()<span class="keyword"> const </span>{
<a name="l00256"></a>00256         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx]);
<a name="l00257"></a>00257         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.x();
<a name="l00258"></a>00258       }
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0acce91d627a918ea20832d9b2fb8b93">00260</a>       <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0acce91d627a918ea20832d9b2fb8b93">y</a>()<span class="keyword"> const </span>{
<a name="l00261"></a>00261         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+1]);
<a name="l00262"></a>00262         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.y();
<a name="l00263"></a>00263       }
<a name="l00265"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#abe77460b0bada97d73fc158579294931">00265</a>       <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBAtom.shtml#abe77460b0bada97d73fc158579294931">z</a>()<span class="keyword"> const </span>{
<a name="l00266"></a>00266         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+2]);
<a name="l00267"></a>00267         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.z();
<a name="l00268"></a>00268       }
<a name="l00273"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#af9dd6c6924f23479933e0b8779a4bec2">00273</a>       <span class="keywordtype">double</span>     *<a class="code" href="classOpenBabel_1_1OBAtom.shtml#af9dd6c6924f23479933e0b8779a4bec2">GetCoordinate</a>(){
<a name="l00274"></a>00274         <span class="keywordflow">if</span> (_c)          <span class="keywordflow">return</span>(&amp;(*_c)[_cidx]);
<a name="l00275"></a>00275         <span class="keywordflow">else</span>             <span class="keywordflow">return</span> NULL;
<a name="l00276"></a>00276       }
<a name="l00278"></a>00278       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector();
<a name="l00280"></a>00280       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector() <span class="keyword">const</span>;
<a name="l00282"></a>00282       <span class="keywordtype">double</span>     GetPartialCharge();
<a name="l00284"></a>00284       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *GetResidue();
<a name="l00287"></a>00287       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *GetResidue(<span class="keywordtype">bool</span> perception);
<a name="l00289"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">00289</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>     *<a class="code" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a>()        {<span class="keywordflow">return</span>((<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*)_parent);}
<a name="l00292"></a>00292       <span class="keywordtype">bool</span>       GetNewBondVector(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v,<span class="keywordtype">double</span> length);
<a name="l00295"></a>00295       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00300"></a>00300       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *GetNextAtom();
<a name="l00302"></a>00302 
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ac4ea48df79e239b506d3501dd42adde9">00306</a>       <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> BeginBonds()
<a name="l00307"></a>00307         { <span class="keywordflow">return</span>(_vbond.begin()); }
<a name="l00309"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a87859f951e8ea33345b76d93014486c9">00309</a>       <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> EndBonds()
<a name="l00310"></a>00310         { <span class="keywordflow">return</span>(_vbond.end());   }
<a name="l00313"></a>00313       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00316"></a>00316       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00319"></a>00319       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *BeginNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00322"></a>00322       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *NextNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00324"></a>00324 
<a name="l00326"></a>00326       <span class="keywordtype">double</span> GetDistance(<span class="keywordtype">int</span> index);
<a name="l00328"></a>00328       <span class="keywordtype">double</span> GetDistance(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00330"></a>00330       <span class="keywordtype">double</span> GetAngle(<span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l00332"></a>00332       <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *c);
<a name="l00333"></a>00333 
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 
<a name="l00338"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a616b5aac27eec22be5be998bc15d6349">00338</a>       <span class="keywordtype">void</span> NewResidue()
<a name="l00339"></a>00339         {
<a name="l00340"></a>00340           <span class="keywordflow">if</span> (!_residue)
<a name="l00341"></a>00341             _residue = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>;
<a name="l00342"></a>00342         }
<a name="l00344"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3e3b0d3b268e6abe26f87d4c422c31cd">00344</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a3e3b0d3b268e6abe26f87d4c422c31cd" title="Add (set) the residue for this atom.">AddResidue</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res) { SetResidue(res); }
<a name="l00346"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a85fa173a3c3f488fc691a11eaad81439">00346</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a85fa173a3c3f488fc691a11eaad81439" title="Delete any residue associated with this atom.">DeleteResidue</a>(){
<a name="l00347"></a>00347         <span class="keywordflow">if</span> (_residue) {
<a name="l00348"></a>00348           <span class="keyword">delete</span> _residue;
<a name="l00349"></a>00349           _residue = NULL; <span class="comment">// Make sure to clear that a residue existed</span>
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351       }
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5abeab08afbd305a51b9a9b5bd8fe356">00353</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a5abeab08afbd305a51b9a9b5bd8fe356" title="Add a bond to the internal list. Does not update the bond.">AddBond</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) { _vbond.push_back(bond); }
<a name="l00356"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1773630938cf6a028368394b666d06bf">00356</a>       <span class="keywordtype">void</span> InsertBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i, <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond)
<a name="l00357"></a>00357         {
<a name="l00358"></a>00358           _vbond.insert(i, bond);
<a name="l00359"></a>00359         }
<a name="l00361"></a>00361       <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* bond);
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a03fe71c8266435b7a76682e5c1472894">00363</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a03fe71c8266435b7a76682e5c1472894" title="Clear all bonding information in this atom (does not delete them)">ClearBond</a>() {_vbond.clear();}
<a name="l00365"></a>00365 
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 
<a name="l00371"></a>00371       <span class="keywordtype">bool</span> HtoMethyl();
<a name="l00374"></a>00374       <span class="keywordtype">bool</span> SetHybAndGeom(<span class="keywordtype">int</span>);
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1a92c9eb656eb9ef43f03c717a38adc3">00376</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1a92c9eb656eb9ef43f03c717a38adc3" title="Mark that atom has no hydrogens attached.">ForceNoH</a>() {SetFlag(<a class="code" href="atom_8h.shtml#aad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during input of some formats.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a55e8f858833eee0408aee7b0f1b9c22c">00378</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a55e8f858833eee0408aee7b0f1b9c22c">HasNoHForced</a>() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#aad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during input of some formats.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00379"></a>00379 
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a03e54abd32434bd610bfd4430d91b7b9">00382</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a03e54abd32434bd610bfd4430d91b7b9">ForceImplH</a>() {SetFlag(<a class="code" href="atom_8h.shtml#ac41fb93bbf43756058cf90930dae22f1" title="Atom is not hydrogen deficient. (for SMILES input)">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a8920c0ef5c32f64887d09c3b2da857d5">00385</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a8920c0ef5c32f64887d09c3b2da857d5">HasImplHForced</a>() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#ac41fb93bbf43756058cf90930dae22f1" title="Atom is not hydrogen deficient. (for SMILES input)">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00387"></a>00387 
<a name="l00389"></a>00389 
<a name="l00390"></a>00390 
<a name="l00391"></a>00391       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountFreeOxygens()      <span class="keyword">const</span>;
<a name="l00393"></a>00393       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00395"></a>00395       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount(<span class="keywordtype">bool</span> ExcludeIsotopes=<span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00397"></a>00397       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()     <span class="keyword">const</span>;
<a name="l00399"></a>00399       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingSize()    <span class="keyword">const</span>;
<a name="l00401"></a>00401       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountRingBonds() <span class="keyword">const</span>;
<a name="l00403"></a>00403       <span class="keywordtype">double</span>      SmallestBondAngle();
<a name="l00405"></a>00405       <span class="keywordtype">double</span>      AverageBondAngle();
<a name="l00407"></a>00407       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  BOSum()                 <span class="keyword">const</span>;
<a name="l00410"></a>00410       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()                <span class="keyword">const</span>;
<a name="l00412"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae3177d9e8b583d3cda02b90c141894c5">00412</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae3177d9e8b583d3cda02b90c141894c5">HasResidue</a>()    { <span class="keywordflow">return</span>(_residue != NULL);    }
<a name="l00414"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab633bc0f8f40dfcedf42940ab8a5316c">00414</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab633bc0f8f40dfcedf42940ab8a5316c">IsHydrogen</a>()    { <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00415"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4659948e851d094d7ffddcc7d9c9ff4a">00415</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4659948e851d094d7ffddcc7d9c9ff4a">IsHydrogen</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00417"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1f0a167775136e911cd349cdd8923b24">00417</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1f0a167775136e911cd349cdd8923b24">IsCarbon</a>()      { <span class="keywordflow">return</span>(GetAtomicNum() == 6); }
<a name="l00419"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aacb82bc548922e4f1276a255f212f143">00419</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aacb82bc548922e4f1276a255f212f143">IsNitrogen</a>()    { <span class="keywordflow">return</span>(GetAtomicNum() == 7); }
<a name="l00421"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#af7e8030ce19d79c9ad0b3cfbf116dc59">00421</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#af7e8030ce19d79c9ad0b3cfbf116dc59">IsOxygen</a>()      { <span class="keywordflow">return</span>(GetAtomicNum() == 8); }
<a name="l00423"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa71152591d5cc51fc2f3701ff7de7dfd">00423</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa71152591d5cc51fc2f3701ff7de7dfd">IsSulfur</a>()      { <span class="keywordflow">return</span>(GetAtomicNum() == 16);}
<a name="l00425"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab8c7f052f9380b98eef3b83da640eba3">00425</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#ab8c7f052f9380b98eef3b83da640eba3">IsPhosphorus</a>()  { <span class="keywordflow">return</span>(GetAtomicNum() == 15);}
<a name="l00427"></a>00427       <span class="keywordtype">bool</span> IsAromatic()      <span class="keyword">const</span>;
<a name="l00429"></a>00429       <span class="keywordtype">bool</span> IsInRing()        <span class="keyword">const</span>;
<a name="l00431"></a>00431       <span class="keywordtype">bool</span> IsInRingSize(<span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00434"></a>00434       <span class="keywordtype">bool</span> IsHeteroatom();
<a name="l00436"></a>00436       <span class="keywordtype">bool</span> IsNotCorH();
<a name="l00438"></a>00438       <span class="keywordtype">bool</span> IsConnected(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00441"></a>00441       <span class="keywordtype">bool</span> IsOneThree(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00444"></a>00444       <span class="keywordtype">bool</span> IsOneFour(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00446"></a>00446       <span class="keywordtype">bool</span> IsCarboxylOxygen();
<a name="l00448"></a>00448       <span class="keywordtype">bool</span> IsPhosphateOxygen();
<a name="l00450"></a>00450       <span class="keywordtype">bool</span> IsSulfateOxygen();
<a name="l00452"></a>00452       <span class="keywordtype">bool</span> IsNitroOxygen();
<a name="l00454"></a>00454       <span class="keywordtype">bool</span> IsAmideNitrogen();
<a name="l00457"></a>00457       <span class="keywordtype">bool</span> IsPolarHydrogen();
<a name="l00460"></a>00460       <span class="keywordtype">bool</span> IsNonPolarHydrogen();
<a name="l00463"></a>00463       <span class="keywordtype">bool</span> IsAromaticNOxide();
<a name="l00465"></a>00465       <span class="keywordtype">bool</span> IsChiral();
<a name="l00467"></a>00467       <span class="keywordtype">bool</span> IsAxial();
<a name="l00469"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4d1f38bbe03483629778078dcc4e75a0">00469</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4d1f38bbe03483629778078dcc4e75a0">IsClockwise</a>()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &quot;@@&quot;)">OB_CSTEREO_ATOM</a>));  }
<a name="l00471"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#af3abb70d4f818b9c3e416928afa2e844">00471</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#af3abb70d4f818b9c3e416928afa2e844">IsAntiClockwise</a>()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &quot;@&quot;)">OB_ACSTEREO_ATOM</a>)); }
<a name="l00473"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9880a080dd0bce244291bde514b67d20">00473</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a9880a080dd0bce244291bde514b67d20">IsPositiveStereo</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>)); }
<a name="l00475"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a61e5344c34c172e9b889e59255aff6de">00475</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a61e5344c34c172e9b889e59255aff6de">IsNegativeStereo</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00477"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a8844e382c76003229ee5fdd0341aacee">00477</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a8844e382c76003229ee5fdd0341aacee">HasChiralitySpecified</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &quot;@@&quot;)">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#a7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &quot;@&quot;)">OB_ACSTEREO_ATOM</a>)); }
<a name="l00479"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a63911efd550113b275239d322670986d">00479</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a63911efd550113b275239d322670986d">HasChiralVolume</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#a2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#a28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00481"></a>00481       <span class="keywordtype">bool</span> IsHbondAcceptor();
<a name="l00483"></a>00483       <span class="keywordtype">bool</span> IsHbondDonor();
<a name="l00485"></a>00485       <span class="keywordtype">bool</span> IsHbondDonorH();
<a name="l00490"></a>00490       <span class="keywordtype">bool</span> HasAlphaBetaUnsat(<span class="keywordtype">bool</span> includePandS=<span class="keyword">true</span>);
<a name="l00492"></a>00492       <span class="keywordtype">bool</span> HasBondOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00494"></a>00494       <span class="keywordtype">int</span>  CountBondsOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00496"></a>00496       <span class="keywordtype">bool</span> HasNonSingleBond();
<a name="l00498"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#af347b80d156587c2287754345606c78d">00498</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#af347b80d156587c2287754345606c78d">HasSingleBond</a>()    {        <span class="keywordflow">return</span>(HasBondOfOrder(1));    }
<a name="l00500"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0cb35a21cc08897bc7f9b01ae4561e50">00500</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a0cb35a21cc08897bc7f9b01ae4561e50">HasDoubleBond</a>()    {        <span class="keywordflow">return</span>(HasBondOfOrder(2));    }
<a name="l00502"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a11bf8aa7f79e9b9bdef2602808bb794d">00502</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#a11bf8aa7f79e9b9bdef2602808bb794d">HasAromaticBond</a>()  {        <span class="keywordflow">return</span>(HasBondOfOrder(5));    }
<a name="l00504"></a>00504       <span class="keywordtype">bool</span> MatchesSMARTS(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00506"></a>00506 
<a name="l00507"></a>00507     }; <span class="comment">// class OBAtom</span>
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 }<span class="comment">// namespace OpenBabel</span>
<a name="l00510"></a>00510 
<a name="l00511"></a>00511 <span class="preprocessor">#endif   // OB_ATOM_H</span>
<a name="l00512"></a>00512 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:06 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
