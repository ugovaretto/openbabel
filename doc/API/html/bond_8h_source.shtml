<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>bond.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">bond.h</div>  </div>
</div>
<div class="contents">
<a href="bond_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">bond.h - Handle OBBond class.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2008 by Tim Vandermeersch</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_BOND_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_BOND_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml" title="Handle atoms.">openbabel/atom.h</a>&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036   <span class="keyword">class </span>OBAtom;
<a name="l00037"></a><a class="code" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce">00037</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>;
<a name="l00038"></a>00038 
<a name="l00040"></a>00040   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> <a class="code" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce" title="OBEdgeBase is declared for backwards-compatibility with 2.0 and earlier code.">OBEdgeBase</a>;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   <span class="comment">//BOND Property Macros (flags)</span>
<a name="l00044"></a><a class="code" href="bond_8h.shtml#a90183171d38e32f07e97bffb7836f9fd">00044</a> <span class="comment"></span><span class="preprocessor">#define OB_AROMATIC_BOND  (1&lt;&lt;1)</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a><a class="code" href="bond_8h.shtml#a71faadca5c5e100b081f5a563c22e9ee">00046</a> <span class="preprocessor">#define OB_WEDGE_BOND     (1&lt;&lt;2)</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a><a class="code" href="bond_8h.shtml#a14b10c08a25058d1d4a98f8573195119">00048</a> <span class="preprocessor">#define OB_HASH_BOND      (1&lt;&lt;3)</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a><a class="code" href="bond_8h.shtml#a2f74970f7126e2bc1e9a4e1d8ed1af26">00050</a> <span class="preprocessor">#define OB_RING_BOND      (1&lt;&lt;4)</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00052"></a><a class="code" href="bond_8h.shtml#a4acf405087f46d03ebc4581cbce02f3b">00052</a> <span class="preprocessor">#define OB_TORUP_BOND     (1&lt;&lt;5)</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a><a class="code" href="bond_8h.shtml#a7c5124279ed6a19b93840ab3038ef2c0">00054</a> <span class="preprocessor">#define OB_TORDOWN_BOND   (1&lt;&lt;6)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a><a class="code" href="bond_8h.shtml#a2cbf156fa54b94fb630c4915ab06cbb1">00056</a> <span class="preprocessor">#define OB_KSINGLE_BOND   (1&lt;&lt;7)</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>
<a name="l00058"></a><a class="code" href="bond_8h.shtml#af2291cb768c88e059cb8ee24d3f66f64">00058</a> <span class="preprocessor">#define OB_KDOUBLE_BOND   (1&lt;&lt;8)</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>
<a name="l00060"></a><a class="code" href="bond_8h.shtml#ae702c1e19159f86ccd298f273ac94cd6">00060</a> <span class="preprocessor">#define OB_KTRIPLE_BOND   (1&lt;&lt;9)</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a><a class="code" href="bond_8h.shtml#a19b6306ab83f788b1fb60f8816b07e9c">00062</a> <span class="preprocessor">#define OB_CLOSURE_BOND   (1&lt;&lt;10)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>  <span class="comment">// 11-16 currently unused</span>
<a name="l00064"></a>00064 
<a name="l00065"></a><a class="code" href="bond_8h.shtml#a40ac5b89beb0ea8297e93ee26e7eaf7b">00065</a> <span class="preprocessor">#define OB_WEDGE_OR_HASH_BOND     (1&lt;&lt;11)</span>
<a name="l00066"></a><a class="code" href="bond_8h.shtml#a7d2254db1e5e6904e5490bfc80a281ea">00066</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CIS_OR_TRANS_BOND     (1&lt;&lt;12)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068   <span class="comment">//class OBBondPrivate;</span>
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml">00069</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     <span class="keyword">protected</span>:
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a1219a011a5e0ec59c67a5a873d81986c">00072</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                <a class="code" href="classOpenBabel_1_1OBBond.shtml#a1219a011a5e0ec59c67a5a873d81986c" title="Unique edge index used by GetIdx() and SetIdx()">_idx</a>;   
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aa15238ffbdb1330727678c9d6553d6ba">00073</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>                      *<a class="code" href="classOpenBabel_1_1OBBond.shtml#aa15238ffbdb1330727678c9d6553d6ba" title="The molecule which contains me (if any)">_parent</a>;
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3a61f73b711933e11ee793bf8fc550e0">00074</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                     *<a class="code" href="classOpenBabel_1_1OBBond.shtml#a3a61f73b711933e11ee793bf8fc550e0" title="I connect one node.">_bgn</a>;   
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aa094fa86d6e276e37457b5f662d386e0">00075</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                     *<a class="code" href="classOpenBabel_1_1OBBond.shtml#aa094fa86d6e276e37457b5f662d386e0" title="to another node">_end</a>;   
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3db9d8d4a032ad98c3cc9139bff39a49">00076</a>       <span class="keywordtype">char</span>                        <a class="code" href="classOpenBabel_1_1OBBond.shtml#a3db9d8d4a032ad98c3cc9139bff39a49" title="Bond order (1, 2, 3, 5=aromatic)">_order</a>; 
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aec57dcfb24a8b5496b6319fa1172fa5e">00077</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>          <a class="code" href="classOpenBabel_1_1OBBond.shtml#aec57dcfb24a8b5496b6319fa1172fa5e" title="Any flags for this bond.">_flags</a>; 
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#accc49a515c7a81154bd46a8ea8a16204">00078</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>                 <a class="code" href="classOpenBabel_1_1OBBond.shtml#accc49a515c7a81154bd46a8ea8a16204" title="unique id">_id</a>;        
<a name="l00079"></a>00079       <span class="comment">//OBBondPrivate * const d;</span>
<a name="l00080"></a>00080 
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a152d1276438a7bf4a6ac76d6305c84b2">00084</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a152d1276438a7bf4a6ac76d6305c84b2">HasFlag</a>(<span class="keywordtype">int</span> flag)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((_flags &amp; flag) != 0); }
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#adcdab8f96dc4fdc2940749e527087245">00088</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a>(<span class="keywordtype">int</span> flag) { _flags |= flag; }
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a401b99defa8a57195dc40a2604cee115">00092</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a>(<span class="keywordtype">int</span> flag) { _flags &amp;= (~(flag)); }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="keyword">public</span>:
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">00095</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">Flag</a> {
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c">00096</a>         Aromatic = (1&lt;&lt;1), 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50">00097</a>         Ring     = (1&lt;&lt;4), 
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773">00098</a>         Closure  = (1&lt;&lt;10) 
<a name="l00099"></a>00099       };
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">00100</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a> {
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091">00101</a>         Wedge       = (1&lt;&lt;2),  
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03">00102</a>         Hash        = (1&lt;&lt;3),  
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063">00103</a>         WedgeOrHash = (1&lt;&lt;11), 
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d">00104</a>         CisOrTrans  = (1&lt;&lt;12)  
<a name="l00105"></a>00105       };
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a6368d7673f23186649b2969ade3661d7">00108</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a6368d7673f23186649b2969ade3661d7" title="Whether this bond has been visited by a graph algorithm.">Visit</a>;
<a name="l00109"></a>00109 
<a name="l00111"></a>00111       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>();
<a name="l00113"></a>00113       <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>();
<a name="l00114"></a>00114 
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9">00120</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9" title="Set the internal bond index.">SetIdx</a>(<span class="keywordtype">int</span> idx)        {          _idx = idx;        }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a383094c5a19383cf09f3dfb4c1de1da2">00121</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a383094c5a19383cf09f3dfb4c1de1da2">SetId</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) { _id = id; }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124       <span class="keywordtype">void</span> SetBO(<span class="keywordtype">int</span> order);
<a name="l00126"></a>00126       <span class="keywordtype">void</span> SetBondOrder(<span class="keywordtype">int</span> order);
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3c443bcf96eac155aa058b69cc59aa4e">00128</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a3c443bcf96eac155aa058b69cc59aa4e" title="Set the beginning atom of this bond to begin. Does not update begin.">SetBegin</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *begin){          _bgn = begin;      }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a9bcf1c90715c368ce2896acae75235c4">00130</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a9bcf1c90715c368ce2896acae75235c4" title="Set the ending atom of this bond to end. Does not update end.">SetEnd</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *end)    {          _end = end;        }
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a962b3010305cfb80ba816a0e54097dee">00132</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a962b3010305cfb80ba816a0e54097dee" title="Set the parent molecule to ptr. Does not update parent.">SetParent</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *ptr)  {        _parent= ptr;        }
<a name="l00134"></a>00134       <span class="keywordtype">void</span> SetLength(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *fixed,<span class="keywordtype">double</span> length);
<a name="l00137"></a>00137       <span class="keywordtype">void</span> SetLength(<span class="keywordtype">double</span> length);
<a name="l00139"></a>00139       <span class="keywordtype">void</span> Set(<span class="keywordtype">int</span> index, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* begin,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end,<span class="keywordtype">int</span> order,<span class="keywordtype">int</span> flags);
<a name="l00141"></a>00141       <span class="keywordtype">void</span> SetKSingle();
<a name="l00143"></a>00143       <span class="keywordtype">void</span> SetKDouble();
<a name="l00145"></a>00145       <span class="keywordtype">void</span> SetKTriple();
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a3d29498c15007d9b6729e26784f23a5b">00147</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a3d29498c15007d9b6729e26784f23a5b" title="Mark that this bond is aromatic. Does not update atoms or validate.">SetAromatic</a>()    { SetFlag(<a class="code" href="bond_8h.shtml#a90183171d38e32f07e97bffb7836f9fd" title="An aromatic bond (regardless of bond order)">OB_AROMATIC_BOND</a>); }
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">00152</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">SetWedge</a>() { SetFlag(Wedge); }
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">00157</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">SetHash</a>() { SetFlag(Hash); }
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#abc50b699bc2efd24c5a65295b82f0ad0">00162</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#abc50b699bc2efd24c5a65295b82f0ad0">SetWedgeOrHash</a>() { SetFlag(WedgeOrHash); }
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57">00164</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57" title="Mark that this bond has an &quot;up&quot; torsion for double-bond stereochem (i.e., &quot;/&quot; in SMILES notation...">SetUp</a>()          { SetFlag(<a class="code" href="bond_8h.shtml#a4acf405087f46d03ebc4581cbce02f3b" title="The &quot;upper&quot; bond in a double bond cis/trans isomer (i.e., &quot;\&quot; in SMILES) &lt;-- this was wrong (/)...">OB_TORUP_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#a7c5124279ed6a19b93840ab3038ef2c0" title="The &quot;down&quot; bond in a double bond cis/trans isomer (i.e., &quot;/&quot; in SMILES) &lt;-- same.">OB_TORDOWN_BOND</a>); }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3">00166</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3" title="Mark that this bond has an &quot;down&quot; torsion for double-bond stereochem (i.e., &quot;\&quot; in SMILES notation...">SetDown</a>()        { SetFlag(<a class="code" href="bond_8h.shtml#a7c5124279ed6a19b93840ab3038ef2c0" title="The &quot;down&quot; bond in a double bond cis/trans isomer (i.e., &quot;/&quot; in SMILES) &lt;-- same.">OB_TORDOWN_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#a4acf405087f46d03ebc4581cbce02f3b" title="The &quot;upper&quot; bond in a double bond cis/trans isomer (i.e., &quot;\&quot; in SMILES) &lt;-- this was wrong (/)...">OB_TORUP_BOND</a>);   }
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aacde511d3c9a744b44c88958bb86eb68">00168</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#aacde511d3c9a744b44c88958bb86eb68" title="Mark that this bond is in a ring. Primarily for internal use.">SetInRing</a>(<span class="keywordtype">bool</span> <span class="keyword">set</span>=<span class="keyword">true</span>) { <span class="keywordflow">if</span>(<span class="keyword">set</span>)SetFlag(<a class="code" href="bond_8h.shtml#a2f74970f7126e2bc1e9a4e1d8ed1af26" title="A bond in a ring.">OB_RING_BOND</a>); <span class="keywordflow">else</span> UnsetFlag(<a class="code" href="bond_8h.shtml#a2f74970f7126e2bc1e9a4e1d8ed1af26" title="A bond in a ring.">OB_RING_BOND</a>);}
<a name="l00170"></a>00170 
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ab499793fc98aadbaa192756b8327016d">00173</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#ab499793fc98aadbaa192756b8327016d" title="Mark that this bond indicates a ring closure when walking the molecule.">SetClosure</a>()     { SetFlag(<a class="code" href="bond_8h.shtml#a19b6306ab83f788b1fb60f8816b07e9c" title="A bond which &quot;closes&quot; a ring when walking the molecular graph.">OB_CLOSURE_BOND</a>);  }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a934251078b7907fd8cd8573c40fdea58">00175</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a934251078b7907fd8cd8573c40fdea58" title="Clear any indication of 2D &quot;hash&quot; notation from SetHash()">UnsetHash</a>()      { UnsetFlag(<a class="code" href="bond_8h.shtml#a14b10c08a25058d1d4a98f8573195119" title="A dashed &quot;hash&quot; bond in 2D representations -- i.e., &quot;down&quot; from the 2D plane.">OB_HASH_BOND</a>);    }
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a8425a34105ee2f2e152da12ebca9960e">00177</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a8425a34105ee2f2e152da12ebca9960e" title="Clear any indication of 2D &quot;wedge&quot; notation from SetWedge()">UnsetWedge</a>()     { UnsetFlag(<a class="code" href="bond_8h.shtml#a71faadca5c5e100b081f5a563c22e9ee" title="A solid black wedge in 2D representations -- i.e., &quot;up&quot; from the 2D plane.">OB_WEDGE_BOND</a>);   }
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a88d9f308b5a9d49e98da1c6bd195358f">00179</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a88d9f308b5a9d49e98da1c6bd195358f" title="Clear any indication of &quot;/&quot; double bond stereochemistry from SetUp()">UnsetUp</a>()        { UnsetFlag(<a class="code" href="bond_8h.shtml#a4acf405087f46d03ebc4581cbce02f3b" title="The &quot;upper&quot; bond in a double bond cis/trans isomer (i.e., &quot;\&quot; in SMILES) &lt;-- this was wrong (/)...">OB_TORUP_BOND</a>);   }
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a561d657e1cc83679879b2b8f662b9205">00181</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a561d657e1cc83679879b2b8f662b9205" title="Clear any indication of &quot;\&quot; double bond stereochemistry from SetDown()">UnsetDown</a>()      { UnsetFlag(<a class="code" href="bond_8h.shtml#a7c5124279ed6a19b93840ab3038ef2c0" title="The &quot;down&quot; bond in a double bond cis/trans isomer (i.e., &quot;/&quot; in SMILES) &lt;-- same.">OB_TORDOWN_BOND</a>); }
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a2fcf3bf429f36281a43c879e40e75f34">00183</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a2fcf3bf429f36281a43c879e40e75f34" title="Clear all aromaticity information for the bond.">UnsetAromatic</a>()  { UnsetFlag(<a class="code" href="bond_8h.shtml#a90183171d38e32f07e97bffb7836f9fd" title="An aromatic bond (regardless of bond order)">OB_AROMATIC_BOND</a>);}
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a512e7b122631a29f1ef8c679704632cd">00185</a>       <span class="keywordtype">void</span> UnsetKekule()
<a name="l00186"></a>00186         {
<a name="l00187"></a>00187           _flags &amp;= (~(<a class="code" href="bond_8h.shtml#a2cbf156fa54b94fb630c4915ab06cbb1" title="A Kekule single bond.">OB_KSINGLE_BOND</a>|<a class="code" href="bond_8h.shtml#af2291cb768c88e059cb8ee24d3f66f64" title="A Kekule double bond.">OB_KDOUBLE_BOND</a>|<a class="code" href="bond_8h.shtml#ae702c1e19159f86ccd298f273ac94cd6" title="A Kekule triple bond.">OB_KTRIPLE_BOND</a>));
<a name="l00188"></a>00188         }
<a name="l00190"></a>00190 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a80892a7fdfc7180a85160279c1186952">00194</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBBond.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>(_idx);  }
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">00195</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">GetId</a>()<span class="keyword">           const </span>{ <span class="keywordflow">return</span> _id; }
<a name="l00197"></a>00197 
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ad4d2cadd80651fe9e8bc35c492aa5667">00198</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBBond.shtml#ad4d2cadd80651fe9e8bc35c492aa5667">GetBO</a>()<span class="keyword">            const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a753514f0d4afe52f08f3ace5cfc727bb">00200</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBBond.shtml#a753514f0d4afe52f08f3ace5cfc727bb">GetBondOrder</a>()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aa793cd236a5be4bd934b9a43b28129f7">00202</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBBond.shtml#aa793cd236a5be4bd934b9a43b28129f7">GetFlags</a>()<span class="keyword">         const </span>{ <span class="keywordflow">return</span>(_flags);      }
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a831ee182c3fb21b73a712f4d5c19bf92">00204</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBeginAtomIdx()<span class="keyword">  const</span>
<a name="l00205"></a>00205 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (_bgn ? _bgn-&gt;GetIdx() : 0); }
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a35e027ae790e6e8d7d5c2c21cb4925da">00207</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetEndAtomIdx()<span class="keyword">    const</span>
<a name="l00208"></a>00208 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (_end ? _end-&gt;GetIdx() : 0); }
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#afdda9b904cabc9ce0335a665988ab143">00210</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBBond.shtml#afdda9b904cabc9ce0335a665988ab143">GetBeginAtom</a>()    { <span class="keywordflow">return</span>(_bgn);    }
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ada14874eb793cf1ab7dee5b50cab9422">00211</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetBeginAtom()<span class="keyword"> const</span>
<a name="l00212"></a>00212 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_bgn);    }
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#aee593e9cc14031b07e3dc63a003c345f">00214</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBBond.shtml#aee593e9cc14031b07e3dc63a003c345f">GetEndAtom</a>()      { <span class="keywordflow">return</span>(_end);    }
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a996c3317c41ba042ad7293f6db16906c">00215</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetEndAtom()<span class="keyword"> const</span>
<a name="l00216"></a>00216 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_end);    }
<a name="l00218"></a>00218 
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a30735471b108fe43965fd2d0a9fe86a0">00220</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetNbrAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *ptr)
<a name="l00221"></a>00221         {
<a name="l00222"></a>00222           <span class="keywordflow">return</span>((ptr != _bgn)? _bgn : _end);
<a name="l00223"></a>00223         }
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">00225</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>  *<a class="code" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a>()                 {<span class="keywordflow">return</span>(_parent);}
<a name="l00227"></a>00227 
<a name="l00228"></a>00228       <span class="keywordtype">double</span>  GetEquibLength() <span class="keyword">const</span>;
<a name="l00230"></a>00230       <span class="keywordtype">double</span>  GetLength() <span class="keyword">const</span>;
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ae3aba2dee7140a159fb534747bb2dc7a">00234</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetNbrAtomIdx(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *ptr)
<a name="l00235"></a>00235         {
<a name="l00236"></a>00236           <span class="keywordflow">if</span> (ptr!=_bgn)
<a name="l00237"></a>00237             <span class="keywordflow">return</span> (_bgn ? _bgn-&gt;GetIdx() : 0);
<a name="l00238"></a>00238           <span class="keywordflow">else</span>
<a name="l00239"></a>00239             <span class="keywordflow">return</span> (_end ? _end-&gt;GetIdx() : 0);
<a name="l00240"></a>00240         }
<a name="l00242"></a>00242       <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>* FindSmallestRing() <span class="keyword">const</span>;
<a name="l00244"></a>00244 
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250       <span class="keywordtype">bool</span> IsAromatic() <span class="keyword">const</span>;
<a name="l00252"></a>00252       <span class="keywordtype">bool</span> IsInRing() <span class="keyword">const</span>;
<a name="l00254"></a>00254 
<a name="l00259"></a>00259       <span class="keywordtype">bool</span> IsRotor();
<a name="l00262"></a>00262       <span class="keywordtype">bool</span> IsAmide();
<a name="l00265"></a>00265       <span class="keywordtype">bool</span> IsPrimaryAmide();
<a name="l00268"></a>00268       <span class="keywordtype">bool</span> IsSecondaryAmide();
<a name="l00271"></a>00271       <span class="keywordtype">bool</span> IsTertiaryAmide();
<a name="l00273"></a>00273       <span class="keywordtype">bool</span> IsEster();
<a name="l00275"></a>00275       <span class="keywordtype">bool</span> IsCarbonyl();
<a name="l00277"></a>00277       <span class="keywordtype">bool</span> IsSingle();
<a name="l00279"></a>00279       <span class="keywordtype">bool</span> IsDouble();
<a name="l00281"></a>00281       <span class="keywordtype">bool</span> IsTriple();
<a name="l00283"></a>00283       <span class="keywordtype">bool</span> IsKSingle();
<a name="l00285"></a>00285       <span class="keywordtype">bool</span> IsKDouble();
<a name="l00287"></a>00287       <span class="keywordtype">bool</span> IsKTriple();
<a name="l00289"></a>00289       <span class="keywordtype">bool</span> IsClosure();
<a name="l00292"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">00292</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">IsUp</a>()    {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#a4acf405087f46d03ebc4581cbce02f3b" title="The &quot;upper&quot; bond in a double bond cis/trans isomer (i.e., &quot;\&quot; in SMILES) &lt;-- this was wrong (/)...">OB_TORUP_BOND</a>));    }
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">00295</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">IsDown</a>()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#a7c5124279ed6a19b93840ab3038ef2c0" title="The &quot;down&quot; bond in a double bond cis/trans isomer (i.e., &quot;/&quot; in SMILES) &lt;-- same.">OB_TORDOWN_BOND</a>));  }
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a70910881ff95404e96c9b40d33e0db76">00298</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a70910881ff95404e96c9b40d33e0db76">IsWedge</a>() {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#a71faadca5c5e100b081f5a563c22e9ee" title="A solid black wedge in 2D representations -- i.e., &quot;up&quot; from the 2D plane.">OB_WEDGE_BOND</a>));    }
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">00301</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">IsHash</a>()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#a14b10c08a25058d1d4a98f8573195119" title="A dashed &quot;hash&quot; bond in 2D representations -- i.e., &quot;down&quot; from the 2D plane.">OB_HASH_BOND</a>));     }
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ad5c6dd89356b7fdfffc9c72020fec0a4">00307</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#ad5c6dd89356b7fdfffc9c72020fec0a4">IsWedgeOrHash</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(HasFlag(WedgeOrHash)); }
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a892ffd8f4ddd7adbe285b6bf7133aa7a">00312</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#a892ffd8f4ddd7adbe285b6bf7133aa7a">IsCisOrTrans</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(HasFlag(CisOrTrans)); }
<a name="l00313"></a>00313 
<a name="l00315"></a>00315       <span class="keywordtype">bool</span> IsDoubleBondGeometry();
<a name="l00317"></a>00317 
<a name="l00318"></a>00318     }; <span class="comment">// class OBBond</span>
<a name="l00319"></a>00319 
<a name="l00321"></a>00321   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a>;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 }<span class="comment">// namespace OpenBabel</span>
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="preprocessor">#endif   // OB_BOND_H</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:06 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
