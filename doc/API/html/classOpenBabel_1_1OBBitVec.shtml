<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBBitVec Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">OBBitVec Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBBitVec" -->
<p><code>#include &lt;<a class="el" href="bitvec_8h_source.shtml">openbabel/bitvec.h</a>&gt;</code></p>

<p><a href="classOpenBabel_1_1OBBitVec-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; unsigned &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a732c7bffa6fdaeb8996f3a63450f422f">word_vector</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#af0100bd07b2642e38b29dc8e74ff765b">OBBitVec</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ac5a4c3682c88b8d666b5d7d33183fb55">OBBitVec</a> (unsigned size_in_bits)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1a1bd9c96031c99d3209b04ef50b4d6c">OBBitVec</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0920b57e131b9eab47d6939e890cd521">SetBitOn</a> (unsigned bit_offset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a5ca76b0cbbf2dd86395b0af704c8cdfb">SetBitOff</a> (unsigned bit_offset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1a5ff904f4dbba5c3d92bb1d98fa23c2">SetRangeOn</a> (unsigned lo_bit_offset, unsigned hi_bit_offset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#af248c931e7d8abdcb0ca18ba0a3e8533">SetRangeOff</a> (unsigned lo_bit_offset, unsigned hi_bit_offset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a47b489f96fb83fb92444dc4fc69d052e">Fold</a> (unsigned new_bit_size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ac00671a01df7cc0b2751cf01576cb48b">FirstBit</a> (unsigned bit_offset=0) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ab8bac9f6bedd4c94792757d965945ac6">NextBit</a> (int last_bit_offset) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a787ec2b13a14e73a2732a5eb0941c89a">EndBit</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aa28b8191c62589d996ac605c9cbe5829">GetSize</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#acf47ba30bf82aff0a9f03029917c5849">CountBits</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a6fcfd4a80bfd7dc324f815cd351bfbdf">Empty</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aaef62c8761ddd1b95824fc57b1b277b5">IsEmpty</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a7bc2d3a9e8b18736d47932ba327afd38">Resize</a> (unsigned size_in_bits)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a6b57d4f315f27f863dfaba863f9d6c4c">ResizeWords</a> (unsigned size_in_words)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a9cbd85a20d3c22eed705e4215b5beff7">BitIsSet</a> (unsigned bit_offset) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad06f035d55e669326f14cd7c6ff724cc">BitIsOn</a> (int bit_offset) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a6919c04c8f2a7a600d926dfb69a2ccff">FromVecInt</a> (const std::vector&lt; int &gt; &amp;bit_offsets)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0e38205f69ea775ac85766e8fa84aa09">FromString</a> (const std::string &amp;line, int bits)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad336607832d6ef7e48bed9fe103e0fa5">ToVecInt</a> (std::vector&lt; int &gt; &amp;bit_offsets) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a00e05e1bb6f3185b1a40728679be5274">Negate</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a56df5cb29ee1da7ea5626ab4c0f35882">GetWords</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a732c7bffa6fdaeb8996f3a63450f422f">word_vector</a> &amp;vec)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a24793888dd45beaff49d652ce07bd823">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a089f455ab3d208b87f8492d900009a47">operator&amp;=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad34fbd2840a8afd87d69f4f71174407d">operator|=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a3f7949c8ca082670fa93310be6576854">operator|=</a> (int bit_offset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#afb212210bd7dffef43eaca0db7e3a499">operator^=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a321d8efee0bf7ca07bbffe94bda40b87">operator-=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aa7711d3edd25794568784a430fd7b062">operator+=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1f22ca998400b0babe0bee468189225b">operator[]</a> (int bit_offset) const </td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1c09da3d5e947c68ef25c4fa7a72fbc3">operator|</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a9beb722c4fb6a164ca45704c92c2eb35">operator&amp;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a60e304c03f383f60b6bdddc2b989e77b">operator^</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a9afe9bbf2fcb9441afbb636aad51e27e">operator-</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1ebdca3306fde1d1553fb6f796121a34">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aff92f9cf4ab168373dd84cb3f50714b2">operator&lt;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a159591a12e5958414000352f4fb32f85">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a7b0a6021022c32f1e21ea411427a1d00">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A speed-optimized vector of bits. </p>
<p>Fast and efficient bitstring class.</p>
<p>This class implements a fast vector of bits using internally a vector of processor native unsigned words. Any bits which are out of reach of the current size are considered to be zero. Streamlined, corrected and documented by <a href="mailto:kshepherd1@users.sourceforge.net">kshepherd1@users.sourceforge.net</a></p>
<p>The <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> class is a fast and efficient bitstring class that is handy to use as a truth table. Truth tables are an easy way to store whether a list of items has a particular property. Instances of <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> can be dynamically resized, and have a number of overloaded operators that make code simple and readable. The following examples demonstrate uses of the <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> class: </p>
<div class="fragment"><pre class="fragment">    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#af0100bd07b2642e38b29dc8e74ff765b" title="Construct a bit vector of the default size.">OBBitVec</a> bv1,bv2,bv3;
    bv1.SetBitOn(5);
    bv2.SetBitOff(200);
    bv1 |= bv2;
    bv1 = bv1 &amp; bv2;
    <span class="keywordflow">if</span> (bv1.IsEmpty()) <span class="comment">// IsEmpty() returns true if no bits are set on</span>
    {
       std::cout &lt;&lt; <span class="stringliteral">&quot;bv1 = &quot;</span> &lt;&lt; bv1 &lt;&lt; std::endl;
    }

    <span class="keywordtype">int</span> bit;
    <span class="keywordflow">for</span> (bit = bv1.NextBit(0);bit != bv1.EndBit();bit = bv1.NextBit(bit))
    {
       cout &lt;&lt; <span class="stringliteral">&quot;the next bit turned on is &quot;</span> &lt;&lt; bit &lt;&lt; endl;
    }
</pre></div> </div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="a732c7bffa6fdaeb8996f3a63450f422f"></a><!-- doxytag: member="OpenBabel::OBBitVec::word_vector" ref="a732c7bffa6fdaeb8996f3a63450f422f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;unsigned&gt; <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a732c7bffa6fdaeb8996f3a63450f422f">word_vector</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af0100bd07b2642e38b29dc8e74ff765b"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="af0100bd07b2642e38b29dc8e74ff765b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a bit vector of the default size. </p>
<p>Construct a bit vector of STARTWORDS size, cleared to all zero bits. </p>

</div>
</div>
<a class="anchor" id="ac5a4c3682c88b8d666b5d7d33183fb55"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="ac5a4c3682c88b8d666b5d7d33183fb55" args="(unsigned size_in_bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>size_in_bits</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a bit vector of maxbits bits. </p>
<p>Construct a bit vector with a size in bits of <code>size_in_bits</code> rounded up to the nearest word and cleared to all zero bits. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">size_in_bits</td><td>The number of bits for which to reserve space </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1a1bd9c96031c99d3209b04ef50b4d6c"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="a1a1bd9c96031c99d3209b04ef50b4d6c" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor (result has same number of bits) </p>
<p>Construct a bit vector which is an exact duplicate of <code>bv</code>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>The other bit vector to copy to this </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a0920b57e131b9eab47d6939e890cd521"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetBitOn" ref="a0920b57e131b9eab47d6939e890cd521" args="(unsigned bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBitOn </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the <code>bit_offset</code> 'th bit to 1. </p>
<p>Set the <code>bit_offset</code> 'th bit to 1 Increases the size of this bit vector if necessary </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a723b609c4e82a3b0ae91f4aa44196740">OpenBabel::addNbrs()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a26e58d067cc3985a84fbf5cfa031947d">OBBuilder::AddNbrs()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">OpenBabel::expand_cycle()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af1afc15e37f48f63ea001277fef0e289">OBMol::expandcycle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0e38205f69ea775ac85766e8fa84aa09">OBBitVec::FromString()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a6919c04c8f2a7a600d926dfb69a2ccff">OBBitVec::FromVecInt()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a55b3d11326ee365438d9c1cf97d0c51c">OBResidue::GetBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a04fb8cae80f1866e2921853c509b07b4">OpenBabel::getFragment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3ab05c6d2aa0e1597398b85b825b57b1">OBBuilder::GetFragment()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac16aac0b5b4c8698863437383b747a5c">OpenBabel::MarkGrowBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e21802967a71af8d4f4828d979676b">OpenBabel::MinimumPairRMS()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">OpenBabel::operator&gt;&gt;()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aba61821d4c16605d56801906db2d0661">OBRingSearch::SaveUniqueRing()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1a5ff904f4dbba5c3d92bb1d98fa23c2">OBBitVec::SetRangeOn()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">OpenBabel::visitRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a5ca76b0cbbf2dd86395b0af704c8cdfb"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetBitOff" ref="a5ca76b0cbbf2dd86395b0af704c8cdfb" args="(unsigned bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBitOff </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the <code>bit_offset</code> 'th bit to 0. </p>
<p>Set the <code>bit_offset</code> 'th bit to 0 </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#ac46bde575f155b4c67ec277d7659a847">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a30e32a5f76406721c6e04f431e2d46bc">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaf97dbc49b4f8743f21874c99257de73">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#aa2197b65eb45814b73aac6f4f061e436">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#af248c931e7d8abdcb0ca18ba0a3e8533">OBBitVec::SetRangeOff()</a>.</p>

</div>
</div>
<a class="anchor" id="a1a5ff904f4dbba5c3d92bb1d98fa23c2"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetRangeOn" ref="a1a5ff904f4dbba5c3d92bb1d98fa23c2" args="(unsigned lo_bit_offset, unsigned hi_bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRangeOn </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>lo_bit_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>hi_bit_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 1. </p>
<p>Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 1 Increases the size of this bit vector if necessary </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lo_bit_offset</td><td>a zero based offset into the bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi_bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#ac46bde575f155b4c67ec277d7659a847">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a30e32a5f76406721c6e04f431e2d46bc">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, and <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>.</p>

</div>
</div>
<a class="anchor" id="af248c931e7d8abdcb0ca18ba0a3e8533"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetRangeOff" ref="af248c931e7d8abdcb0ca18ba0a3e8533" args="(unsigned lo_bit_offset, unsigned hi_bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRangeOff </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>lo_bit_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>hi_bit_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 0. </p>
<p>Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 0 </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lo_bit_offset</td><td>a zero based offset into the bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hi_bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a47b489f96fb83fb92444dc4fc69d052e"></a><!-- doxytag: member="OpenBabel::OBBitVec::Fold" ref="a47b489f96fb83fb92444dc4fc69d052e" args="(unsigned new_bit_size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Fold </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>new_bit_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reduce the size of the vector by or-ing the excess bits over the start. </p>
<p>Reduce the size of the vector to <code>new_bit_size</code> by or-ing the excess bits over the start of the vector </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">new_bit_size</td><td>the size of the resultant vector, in bits </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac00671a01df7cc0b2751cf01576cb48b"></a><!-- doxytag: member="OpenBabel::OBBitVec::FirstBit" ref="ac00671a01df7cc0b2751cf01576cb48b" args="(unsigned bit_offset=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int FirstBit </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>bit_offset</em> = <code>0</code></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the first true bit at or after <code>bit_offset</code>. </p>
<p>Searches the vector for the first true value, starting at the <code>bit_offset</code> 'th bit </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offset</td><td>the first bit to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the bit offset of the first true bit at or after <code>bit_offset</code>, or -1 if there is none </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaf97dbc49b4f8743f21874c99257de73">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#aa2197b65eb45814b73aac6f4f061e436">OBMolAtomBFSIter::operator++()</a>, and <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>.</p>

</div>
</div>
<a class="anchor" id="ab8bac9f6bedd4c94792757d965945ac6"></a><!-- doxytag: member="OpenBabel::OBBitVec::NextBit" ref="ab8bac9f6bedd4c94792757d965945ac6" args="(int last_bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NextBit </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>last_bit_offset</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the next true bit after <code>last_bit_offset</code>. </p>
<p>Searches the vector for the first true value, starting at the <code>last_bit_offset</code> 'th bit </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">last_bit_offset</td><td>the bit before the first to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the bit offset of the first true bit after <code>last_bit_offset</code>, or -1 if there is none </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1205b2669e02dbc289c65ab1f56110c1">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3ba5fcca1ecb1241049411be7017186d">OpenBabel::operator&lt;()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad336607832d6ef7e48bed9fe103e0fa5">OBBitVec::ToVecInt()</a>.</p>

</div>
</div>
<a class="anchor" id="a787ec2b13a14e73a2732a5eb0941c89a"></a><!-- doxytag: member="OpenBabel::OBBitVec::EndBit" ref="a787ec2b13a14e73a2732a5eb0941c89a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int EndBit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the bit offset of the last bit (for iterating) i.e. -1. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1205b2669e02dbc289c65ab1f56110c1">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaf97dbc49b4f8743f21874c99257de73">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#aa2197b65eb45814b73aac6f4f061e436">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="aa28b8191c62589d996ac605c9cbe5829"></a><!-- doxytag: member="OpenBabel::OBBitVec::GetSize" ref="aa28b8191c62589d996ac605c9cbe5829" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the number of words ( NOT the number of bits ). </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ab8bac9f6bedd4c94792757d965945ac6">OBBitVec::NextBit()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a089f455ab3d208b87f8492d900009a47">OBBitVec::operator&amp;=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a321d8efee0bf7ca07bbffe94bda40b87">OBBitVec::operator-=()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">OpenBabel::operator==()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#afb212210bd7dffef43eaca0db7e3a499">OBBitVec::operator^=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad34fbd2840a8afd87d69f4f71174407d">OBBitVec::operator|=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a5ca76b0cbbf2dd86395b0af704c8cdfb">OBBitVec::SetBitOff()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0920b57e131b9eab47d6939e890cd521">OBBitVec::SetBitOn()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#af248c931e7d8abdcb0ca18ba0a3e8533">OBBitVec::SetRangeOff()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1a5ff904f4dbba5c3d92bb1d98fa23c2">OBBitVec::SetRangeOn()</a>.</p>

</div>
</div>
<a class="anchor" id="acf47ba30bf82aff0a9f03029917c5849"></a><!-- doxytag: member="OpenBabel::OBBitVec::CountBits" ref="acf47ba30bf82aff0a9f03029917c5849" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned CountBits </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the number of bits which are set to 1 in the vector. </p>
<p>Count the number of bits which are set in this vector </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the bit count </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">OpenBabel::Tanimoto()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad336607832d6ef7e48bed9fe103e0fa5">OBBitVec::ToVecInt()</a>.</p>

</div>
</div>
<a class="anchor" id="a6fcfd4a80bfd7dc324f815cd351bfbdf"></a><!-- doxytag: member="OpenBabel::OBBitVec::Empty" ref="a6fcfd4a80bfd7dc324f815cd351bfbdf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000015">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aaef62c8761ddd1b95824fc57b1b277b5" title="Are there no bits set to 1 in this vector?">IsEmpty()</a> instead. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1205b2669e02dbc289c65ab1f56110c1">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="aaef62c8761ddd1b95824fc57b1b277b5"></a><!-- doxytag: member="OpenBabel::OBBitVec::IsEmpty" ref="aaef62c8761ddd1b95824fc57b1b277b5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are there no bits set to 1 in this vector? </p>
<p>Are there no bits set to 1 in this vector? </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true for "is empty", false if not empty </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a7bc2d3a9e8b18736d47932ba327afd38"></a><!-- doxytag: member="OpenBabel::OBBitVec::Resize" ref="a7bc2d3a9e8b18736d47932ba327afd38" args="(unsigned size_in_bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Resize </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>size_in_bits</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reserve space for <code>size_in_bits</code> bits. </p>
<p>Reserve space for <code>size_in_bits</code> bits rounded up </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">size_in_bits</td><td>the number of bits </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if enlargement was necessary, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">OBMol::FindRingAtomsAndBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0e38205f69ea775ac85766e8fa84aa09">OBBitVec::FromString()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#ac46bde575f155b4c67ec277d7659a847">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a30e32a5f76406721c6e04f431e2d46bc">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, and <a class="el" href="classOpenBabel_1_1OBRing.shtml#ace01bbda7e867381b5b0416b3666a8e3">OBRing::OBRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a6b57d4f315f27f863dfaba863f9d6c4c"></a><!-- doxytag: member="OpenBabel::OBBitVec::ResizeWords" ref="a6b57d4f315f27f863dfaba863f9d6c4c" args="(unsigned size_in_words)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ResizeWords </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>size_in_words</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reserve space for <code>size_in_words</code> words. </p>
<p>Reserve space for <code>size_in_words</code> words </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">size_in_words</td><td>the number of words </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if enlargement was necessary, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a47b489f96fb83fb92444dc4fc69d052e">OBBitVec::Fold()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a321d8efee0bf7ca07bbffe94bda40b87">OBBitVec::operator-=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#afb212210bd7dffef43eaca0db7e3a499">OBBitVec::operator^=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ad34fbd2840a8afd87d69f4f71174407d">OBBitVec::operator|=()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0920b57e131b9eab47d6939e890cd521">OBBitVec::SetBitOn()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a1a5ff904f4dbba5c3d92bb1d98fa23c2">OBBitVec::SetRangeOn()</a>.</p>

</div>
</div>
<a class="anchor" id="a9cbd85a20d3c22eed705e4215b5beff7"></a><!-- doxytag: member="OpenBabel::OBBitVec::BitIsSet" ref="a9cbd85a20d3c22eed705e4215b5beff7" args="(unsigned bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool BitIsSet </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Asks if the <code>bit_offset</code> 'th bit is set. </p>
<p>Is the <code>bit_offset</code> 'th bit set ? </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if it is set, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a723b609c4e82a3b0ae91f4aa44196740">OpenBabel::addNbrs()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a26e58d067cc3985a84fbf5cfa031947d">OBBuilder::AddNbrs()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#abfb2d29563ee1a81f2e70a51d55c83cf">OpenBabel::CompileAutomorphismQuery()</a>, <a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">OpenBabel::expand_cycle()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af1afc15e37f48f63ea001277fef0e289">OBMol::expandcycle()</a>, <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">OpenBabel::FindAutomorphisms()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a0e3ffef22e9d0e3a960e1ddc3c7a3af0">OpenBabel::getFragment()</a>.</p>

</div>
</div>
<a class="anchor" id="ad06f035d55e669326f14cd7c6ff724cc"></a><!-- doxytag: member="OpenBabel::OBBitVec::BitIsOn" ref="ad06f035d55e669326f14cd7c6ff724cc" args="(int bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool BitIsOn </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000016">Deprecated:</a></b></dt><dd>Use BitIsSet(unsigned bit_offset) instead. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a55b3d11326ee365438d9c1cf97d0c51c">OBResidue::GetBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a6919c04c8f2a7a600d926dfb69a2ccff"></a><!-- doxytag: member="OpenBabel::OBBitVec::FromVecInt" ref="a6919c04c8f2a7a600d926dfb69a2ccff" args="(const std::vector&lt; int &gt; &amp;bit_offsets)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FromVecInt </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bit_offsets</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Sets the bits listed as bit offsets. </p>
<p>Sets bits on, listed as bit offsets </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offsets</td><td>A list of bit offsets </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">OBSmartsPattern::GetUMapList()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a11be59e45293ecb49945b0a3b6f6a84b">OBSmartsPattern::Match()</a>, and <a class="el" href="classOpenBabel_1_1OBRing.shtml#ace01bbda7e867381b5b0416b3666a8e3">OBRing::OBRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a0e38205f69ea775ac85766e8fa84aa09"></a><!-- doxytag: member="OpenBabel::OBBitVec::FromString" ref="a0e38205f69ea775ac85766e8fa84aa09" args="(const std::string &amp;line, int bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FromString </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>new_bit_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Sets the bits listed as a string of integers. </p>
<p>Sets bits on, listed as a string of character-represented integers This bit vector is first cleared. The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE, NEWLINE or HTAB For example "[ 1 5 6 9 ]" </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>A string containing positive integers </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">new_bit_size</td><td>The size that the vector should become </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad336607832d6ef7e48bed9fe103e0fa5"></a><!-- doxytag: member="OpenBabel::OBBitVec::ToVecInt" ref="ad336607832d6ef7e48bed9fe103e0fa5" args="(std::vector&lt; int &gt; &amp;bit_offsets) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToVecInt </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bit_offsets</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>List the offsets of the bits which are set. </p>
<p>Retrieve a list of bit offsets The <code>bit_offsets</code> vector is first cleared. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">bit_offsets</td><td>A list of bit offsets, in ascending order </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">OBMol::FindChildren()</a>.</p>

</div>
</div>
<a class="anchor" id="aa71d36872f416feaa853788a7a7a7ef8"></a><!-- doxytag: member="OpenBabel::OBBitVec::Clear" ref="aa71d36872f416feaa853788a7a7a7ef8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set all bits to zero. </p>
<p>Set all the bits in this vector to zero Does not currently change the size of the vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1205b2669e02dbc289c65ab1f56110c1">OBMol::FindChildren()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0e38205f69ea775ac85766e8fa84aa09">OBBitVec::FromString()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">OBSmartsPattern::GetUMapList()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a11be59e45293ecb49945b0a3b6f6a84b">OBSmartsPattern::Match()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#a5e60e6aac8c448ba3216236693e6f28a">OBRingSearch::RemoveRedundant()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">OBRotorList::SetFixAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">OBRotorList::SetFixedBonds()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">OpenBabel::visitRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a00e05e1bb6f3185b1a40728679be5274"></a><!-- doxytag: member="OpenBabel::OBBitVec::Negate" ref="a00e05e1bb6f3185b1a40728679be5274" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Negate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Inverts every bit in the vector. </p>
<p>Inverts the entire vector. Note that this may give unexpected results, as the vector can be considered to end in an arbitrary number of zero bits. </p>

</div>
</div>
<a class="anchor" id="a56df5cb29ee1da7ea5626ab4c0f35882"></a><!-- doxytag: member="OpenBabel::OBBitVec::GetWords" ref="a56df5cb29ee1da7ea5626ab4c0f35882" args="(word_vector &amp;vec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetWords </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a732c7bffa6fdaeb8996f3a63450f422f">word_vector</a> &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return a copy of the internal vector of words, at the end of <code>vec</code>. </p>
<p>Copy the internal word vector. The copy is appended to <code>vec</code>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">vec</td><td>a vector of words to which to append the data </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a24793888dd45beaff49d652ce07bd823"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator=" ref="a24793888dd45beaff49d652ce07bd823" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator. </p>
<p>Assign this vector to be a copy of <code>bv</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="a089f455ab3d208b87f8492d900009a47"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&amp;=" ref="a089f455ab3d208b87f8492d900009a47" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator&amp;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>And-equals operator. </p>
<p>Assign this vector to the result of And-ing it with <code>bv</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="ad34fbd2840a8afd87d69f4f71174407d"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|=" ref="ad34fbd2840a8afd87d69f4f71174407d" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator|= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Or-equals operator. </p>
<p>Assign this vector to the result of Or-ing it with <code>bv</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="a3f7949c8ca082670fa93310be6576854"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|=" ref="a3f7949c8ca082670fa93310be6576854" args="(int bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&amp; operator|= </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Or-equals operator for integer. </p>
<p>Or the bit at offset <code>bit_offset</code> with 1 </p>

</div>
</div>
<a class="anchor" id="afb212210bd7dffef43eaca0db7e3a499"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator^=" ref="afb212210bd7dffef43eaca0db7e3a499" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator^= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Exclusive-or-equals operator. </p>
<p>Assign this vector to the result of Exclusive-or-ing it with <code>bv</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="a321d8efee0bf7ca07bbffe94bda40b87"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&#45;=" ref="a321d8efee0bf7ca07bbffe94bda40b87" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Minus-equals operator. </p>
<p>Unset bits in this vector which are set in <code>bv</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="aa7711d3edd25794568784a430fd7b062"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator+=" ref="aa7711d3edd25794568784a430fd7b062" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Plus-equals operator. </p>
<p>Append vector <code>bv</code> to the end if this vector </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>A bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="a1f22ca998400b0babe0bee468189225b"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator[]" ref="a1f22ca998400b0babe0bee468189225b" args="(int bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator[] </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bit_offset</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Asks if the <code>bit_offset</code> 'th bit is set. </p>
<p>Is the <code>bit_offset</code> 'th bit set ? </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bit_offset</td><td>a zero based offset into the bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if it is set, false otherwise </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a1c09da3d5e947c68ef25c4fa7a72fbc3"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|" ref="a1c09da3d5e947c68ef25c4fa7a72fbc3" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Or operator. </p>
<p>Return a bit vector of the results of Or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a9beb722c4fb6a164ca45704c92c2eb35"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&amp;" ref="a9beb722c4fb6a164ca45704c92c2eb35" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>And operator. </p>
<p>Return a bit vector of the results of And-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a60e304c03f383f60b6bdddc2b989e77b"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator^" ref="a60e304c03f383f60b6bdddc2b989e77b" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator^ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Exclusive-or operator. </p>
<p>Return a bit vector of the results of Exclusive-or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a9afe9bbf2fcb9441afbb636aad51e27e"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&#45;" ref="a9afe9bbf2fcb9441afbb636aad51e27e" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Minus operator. </p>
<p>Return a bit vector of the results of clearing each bit in <code>bv1</code> which is set in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a1ebdca3306fde1d1553fb6f796121a34"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator==" ref="a1ebdca3306fde1d1553fb6f796121a34" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Equivalency operator. </p>
<p>Return true if <code>bv1</code> and <code>bv2</code> are equivalent Not that they may be of different size, and still equivalent provided that the extra bits are all zero. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="aff92f9cf4ab168373dd84cb3f50714b2"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&lt;" ref="aff92f9cf4ab168373dd84cb3f50714b2" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Smaller-than operator. </p>
<p>Return true if <code>bv1</code> i less than <code>bv2</code> Lexicographical order, with bit vectors written LSB first. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a159591a12e5958414000352f4fb32f85"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&gt;&gt;" ref="a159591a12e5958414000352f4fb32f85" args="(std::istream &amp;is, OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Input from a stream. </p>
<p>Sets bits on, listed as a string of character-represented integers in a stream Only reads one line of input The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE or HTAB For example "[ 1 5 6 9 ]" </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">is</td><td>The input stream </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">bv</td><td>The bit vector to contain the result </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7b0a6021022c32f1e21ea411427a1d00"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&lt;&lt;" ref="a7b0a6021022c32f1e21ea411427a1d00" args="(std::ostream &amp;os, const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output to a stream. </p>
<p>Output this bit vector to a stream The format is "[ n0 n1 n2 n3 ... ]". The whitespace is SPACE For example "[ 1 5 6 9 ]" </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>The output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>The bit vector to be output </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="bitvec_8h_source.shtml">bitvec.h</a></li>
<li><a class="el" href="bitvec_8cpp.shtml">bitvec.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:09 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
