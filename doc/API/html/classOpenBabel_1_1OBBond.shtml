<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBBond Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBBond Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBBond" --><!-- doxytag: inherits="OpenBabel::OBBase" -->
<p><code>#include &lt;<a class="el" href="bond_8h_source.shtml">openbabel/bond.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBBond:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBBond__inherit__graph.png" border="0" usemap="#OBBond_inherit__map" alt="Inheritance graph"/></div>
<map name="OBBond_inherit__map" id="OBBond_inherit__map">
<area shape="rect" id="node2" href="classOpenBabel_1_1OBBase.shtml" title="Base Class." alt="" coords="5,5,83,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBBond-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">Flag</a> { <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c">Aromatic</a> =  (1&lt;&lt;1), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50">Ring</a> =  (1&lt;&lt;4), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773">Closure</a> =  (1&lt;&lt;10)
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a> { <a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091">Wedge</a> =  (1&lt;&lt;2), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03">Hash</a> =  (1&lt;&lt;3), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063">WedgeOrHash</a> =  (1&lt;&lt;11), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d">CisOrTrans</a> =  (1&lt;&lt;12)
 }</td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a61559abfacb167bad8bb124d1f899b87">OBBond</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#af3978005314074b4383b10d497b55003">~OBBond</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab2f0cea1c162bbe8dd603528a3da5c87">CastAndClear</a> (bool clear=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6726eb1601555e8e7d712c43416e6af7">GetTitle</a> (bool replaceNewlines=true) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a366c8a142b8c16554597e82320dfd0e0">SetTitle</a> (const char *)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Bond modification methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a> (int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a383094c5a19383cf09f3dfb4c1de1da2">SetId</a> (unsigned long id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3b00183cecf8df500db30888b4f83e70">SetBO</a> (int order)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07">SetBondOrder</a> (int order)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3c443bcf96eac155aa058b69cc59aa4e">SetBegin</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *begin)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a9bcf1c90715c368ce2896acae75235c4">SetEnd</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a962b3010305cfb80ba816a0e54097dee">SetParent</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">SetLength</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *fixed, double length)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a62b38719673238813acc911788969922">SetLength</a> (double length)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a89e52e2c0a57a3f936e8713406cc45e9">Set</a> (int index, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *begin, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end, int order, int flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#acb95632fbaba13a5aa138725a20f2c0b">SetKSingle</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a2372682111abb0a7d49ba2f6caa7f51f">SetKDouble</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a068e086977f8e15b07d3c3d32f622ead">SetKTriple</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3d29498c15007d9b6729e26784f23a5b">SetAromatic</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">SetWedge</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">SetHash</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#abc50b699bc2efd24c5a65295b82f0ad0">SetWedgeOrHash</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57">SetUp</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3">SetDown</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aacde511d3c9a744b44c88958bb86eb68">SetInRing</a> (bool set=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab499793fc98aadbaa192756b8327016d">SetClosure</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a934251078b7907fd8cd8573c40fdea58">UnsetHash</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a8425a34105ee2f2e152da12ebca9960e">UnsetWedge</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a88d9f308b5a9d49e98da1c6bd195358f">UnsetUp</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a561d657e1cc83679879b2b8f662b9205">UnsetDown</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a2fcf3bf429f36281a43c879e40e75f34">UnsetAromatic</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a512e7b122631a29f1ef8c679704632cd">UnsetKekule</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Bond data request methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">GetId</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad4d2cadd80651fe9e8bc35c492aa5667">GetBO</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a753514f0d4afe52f08f3ace5cfc727bb">GetBondOrder</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa793cd236a5be4bd934b9a43b28129f7">GetFlags</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a831ee182c3fb21b73a712f4d5c19bf92">GetBeginAtomIdx</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a35e027ae790e6e8d7d5c2c21cb4925da">GetEndAtomIdx</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afdda9b904cabc9ce0335a665988ab143">GetBeginAtom</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ada14874eb793cf1ab7dee5b50cab9422">GetBeginAtom</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aee593e9cc14031b07e3dc63a003c345f">GetEndAtom</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a996c3317c41ba042ad7293f6db16906c">GetEndAtom</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a30735471b108fe43965fd2d0a9fe86a0">GetNbrAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a5a63a8b7f30958105ce72602da6715e9">GetEquibLength</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aae1577c27936bc32d489469f228cc2a0">GetLength</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae3aba2dee7140a159fb534747bb2dc7a">GetNbrAtomIdx</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ac567d206e2ca785c9a6d9d46ee00bb45">FindSmallestRing</a> () const </td></tr>
<tr><td colspan="2"><div class="groupHeader">property request methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ef863ca7ed29e266960966a66dc8fb8">IsAromatic</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa17842bd610dc8b2ede2fe324738fe5b">IsInRing</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a0919315f7a2fd68937c561186be76e44">IsRotor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a86eb2acbb9c5811e645df18b8b0bacf7">IsAmide</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a8d59ca837068a807d393dab30cf72775">IsPrimaryAmide</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a38f8ea65888a454fa07b77cdd4aa41ca">IsSecondaryAmide</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a771d7a8c76475f1e72a75e8330fac6d5">IsTertiaryAmide</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a783023d0c499c732c067d566c90b67ae">IsEster</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a0b3a46209d5f71fd8b5717a81dce7dd1">IsCarbonyl</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa7c514e18d5bbe2873dc223a02df526e">IsSingle</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a66926118e966d8cdb17a6ae23f2e89f4">IsDouble</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae763d876fdca6bb00dd7d97574c9c1d0">IsTriple</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3dcf63c2cdd597361fe1f140501fb4e7">IsKSingle</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1293d36d6ef65f89892ed57092aeb157">IsKDouble</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad2ccb49198384c9d22b47ac7d0c4de90">IsKTriple</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">IsClosure</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">IsUp</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">IsDown</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a70910881ff95404e96c9b40d33e0db76">IsWedge</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">IsHash</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad5c6dd89356b7fdfffc9c72020fec0a4">IsWedgeOrHash</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a892ffd8f4ddd7adbe285b6bf7133aa7a">IsCisOrTrans</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aed0dfa6939f68b337f13fbcf4e0f3da7">IsDoubleBondGeometry</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aaf61a3ecb8f2926aaf117299388d43c2">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#adb6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a69c3286ed127949ba747afcc5b9a514a">DataSize</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#afb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">ClassDescription</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a6368d7673f23186649b2969ade3661d7">Visit</a></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a152d1276438a7bf4a6ac76d6305c84b2">HasFlag</a> (int flag) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a> (int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a> (int flag)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1219a011a5e0ec59c67a5a873d81986c">_idx</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa15238ffbdb1330727678c9d6553d6ba">_parent</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3a61f73b711933e11ee793bf8fc550e0">_bgn</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa094fa86d6e276e37457b5f662d386e0">_end</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3db9d8d4a032ad98c3cc9139bff39a49">_order</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aec57dcfb24a8b5496b6319fa1172fa5e">_flags</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#accc49a515c7a81154bd46a8ea8a16204">_id</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Bond class. </p>
<p>The <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> class is straightforward in its data access and modification methods. OBBonds store pointers to the atoms on each end of the bond. In storing pointers to atoms instead of integer indices, the necessity of having to reorder bonds when atoms are shuffled, added, or delete is obviated.</p>
<p>While methods indicate "begin" and "end" atoms in the bond, all methods are designed to be independent of atom ordering, with the exception of stereochemically aware properties such as <a class="el" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">IsUp()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">IsDown()</a>, IsWedge, or <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">IsHash()</a>. </p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a3f3de3e0d751949b8d0b60ffb302944a"></a><!-- doxytag: member="OpenBabel::OBBond::Flag" ref="a3f3de3e0d751949b8d0b60ffb302944a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">Flag</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c"></a><!-- doxytag: member="Aromatic" ref="a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c" args="" -->Aromatic</em>&nbsp;</td><td>
<p>An aromatic bond (regardless of bond order) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50"></a><!-- doxytag: member="Ring" ref="a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50" args="" -->Ring</em>&nbsp;</td><td>
<p>A bond in a ring. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773"></a><!-- doxytag: member="Closure" ref="a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773" args="" -->Closure</em>&nbsp;</td><td>
<p>A bond which "closes" a ring when walking the molecular graph. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="afbdb429fe4a7d37960636a555de77326"></a><!-- doxytag: member="OpenBabel::OBBond::StereoFlag" ref="afbdb429fe4a7d37960636a555de77326" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091"></a><!-- doxytag: member="Wedge" ref="afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091" args="" -->Wedge</em>&nbsp;</td><td>
<p>A solid black wedge in 2D representations -- i.e., "up" from the 2D plane. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03"></a><!-- doxytag: member="Hash" ref="afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03" args="" -->Hash</em>&nbsp;</td><td>
<p>A dashed "hash" bond in 2D representations -- i.e., "down" from the 2D plane. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063"></a><!-- doxytag: member="WedgeOrHash" ref="afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063" args="" -->WedgeOrHash</em>&nbsp;</td><td>
<p>The bond is either wedge or hash, this is a seperate flag! </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d"></a><!-- doxytag: member="CisOrTrans" ref="afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d" args="" -->CisOrTrans</em>&nbsp;</td><td>
<p>Indicates the 2D/3D coordinates are accidently cis/trans. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a61559abfacb167bad8bb124d1f899b87"></a><!-- doxytag: member="OpenBabel::OBBond::OBBond" ref="a61559abfacb167bad8bb124d1f899b87" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="af3978005314074b4383b10d497b55003"></a><!-- doxytag: member="OpenBabel::OBBond::~OBBond" ref="af3978005314074b4383b10d497b55003" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a152d1276438a7bf4a6ac76d6305c84b2"></a><!-- doxytag: member="OpenBabel::OBBond::HasFlag" ref="a152d1276438a7bf4a6ac76d6305c84b2" args="(int flag) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td> const<code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True id the <code>flag</code> is set. </dd></dl>

</div>
</div>
<a class="anchor" id="adcdab8f96dc4fdc2940749e527087245"></a><!-- doxytag: member="OpenBabel::OBBond::SetFlag" ref="adcdab8f96dc4fdc2940749e527087245" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sets the bitwise <code>flag</code> </p>

</div>
</div>
<a class="anchor" id="a401b99defa8a57195dc40a2604cee115"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetFlag" ref="a401b99defa8a57195dc40a2604cee115" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Unsets the bitwise <code>flag</code> </p>

</div>
</div>
<a class="anchor" id="ab994a975e39f5c62288f4f972b6f90c9"></a><!-- doxytag: member="OpenBabel::OBBond::SetIdx" ref="ab994a975e39f5c62288f4f972b6f90c9" args="(int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetIdx </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the internal bond index. </p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>This will not update the index in the parent <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>. Intended mainly for internal use. Use with care. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>.</p>

</div>
</div>
<a class="anchor" id="a383094c5a19383cf09f3dfb4c1de1da2"></a><!-- doxytag: member="OpenBabel::OBBond::SetId" ref="a383094c5a19383cf09f3dfb4c1de1da2" args="(unsigned long id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetId </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a class="anchor" id="a3b00183cecf8df500db30888b4f83e70"></a><!-- doxytag: member="OpenBabel::OBBond::SetBO" ref="a3b00183cecf8df500db30888b4f83e70" args="(int order)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBO </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the bond order to <code>order</code> (i.e., 1 = single, 2 = double, 5 = aromatic) </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000018">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic)">SetBondOrder()</a> instead. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="afb89a19ab65bff6626af0eccfb83af07"></a><!-- doxytag: member="OpenBabel::OBBond::SetBondOrder" ref="afb89a19ab65bff6626af0eccfb83af07" args="(int order)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBondOrder </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the bond order to <code>order</code> (i.e., 1 = single, 2 = double, 5 = aromatic) </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a class="anchor" id="a3c443bcf96eac155aa058b69cc59aa4e"></a><!-- doxytag: member="OpenBabel::OBBond::SetBegin" ref="a3c443bcf96eac155aa058b69cc59aa4e" args="(OBAtom *begin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBegin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>begin</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the beginning atom of this bond to <code>begin</code>. Does not update <code>begin</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a class="anchor" id="a9bcf1c90715c368ce2896acae75235c4"></a><!-- doxytag: member="OpenBabel::OBBond::SetEnd" ref="a9bcf1c90715c368ce2896acae75235c4" args="(OBAtom *end)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the ending atom of this bond to <code>end</code>. Does not update <code>end</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a class="anchor" id="a962b3010305cfb80ba816a0e54097dee"></a><!-- doxytag: member="OpenBabel::OBBond::SetParent" ref="a962b3010305cfb80ba816a0e54097dee" args="(OBMol *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetParent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the parent molecule to <code>ptr</code>. Does not update parent. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>.</p>

</div>
</div>
<a class="anchor" id="ac7d5e7adb0a537d92a628c811148dc21"></a><!-- doxytag: member="OpenBabel::OBBond::SetLength" ref="ac7d5e7adb0a537d92a628c811148dc21" args="(OBAtom *fixed, double length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLength </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>fixed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the bond length to <code>length</code>, while keeping <code>fixed</code> stationary. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>.</p>

</div>
</div>
<a class="anchor" id="a62b38719673238813acc911788969922"></a><!-- doxytag: member="OpenBabel::OBBond::SetLength" ref="a62b38719673238813acc911788969922" args="(double length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLength </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>length</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Change the bond length to <code>length</code>, moving both atoms halfway </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a class="anchor" id="a89e52e2c0a57a3f936e8713406cc45e9"></a><!-- doxytag: member="OpenBabel::OBBond::Set" ref="a89e52e2c0a57a3f936e8713406cc45e9" args="(int index, OBAtom *begin, OBAtom *end, int order, int flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the main bond information (i.e., when creating a bond) </p>
<p>Mark the main information for a bond </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">idx</td><td>The unique bond index for this bond (inside an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>) </td></tr>
    <tr><td class="paramname">begin</td><td>The 'beginning' atom for the bond </td></tr>
    <tr><td class="paramname">end</td><td>The 'end' atom for the bond </td></tr>
    <tr><td class="paramname">order</td><td>The bond order (i.e., 1 = single, 2 = double... 5 = aromatic) </td></tr>
    <tr><td class="paramname">flags</td><td>Any initial property flags </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>.</p>

</div>
</div>
<a class="anchor" id="acb95632fbaba13a5aa138725a20f2c0b"></a><!-- doxytag: member="OpenBabel::OBBond::SetKSingle" ref="acb95632fbaba13a5aa138725a20f2c0b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000019">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic)">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a2372682111abb0a7d49ba2f6caa7f51f"></a><!-- doxytag: member="OpenBabel::OBBond::SetKDouble" ref="a2372682111abb0a7d49ba2f6caa7f51f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000020">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic)">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a068e086977f8e15b07d3c3d32f622ead"></a><!-- doxytag: member="OpenBabel::OBBond::SetKTriple" ref="a068e086977f8e15b07d3c3d32f622ead" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000021">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic)">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a3d29498c15007d9b6729e26784f23a5b"></a><!-- doxytag: member="OpenBabel::OBBond::SetAromatic" ref="a3d29498c15007d9b6729e26784f23a5b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that this bond is aromatic. Does not update atoms or validate. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>.</p>

</div>
</div>
<a class="anchor" id="aac63169d5f12da96ad067cc8194c8cdb"></a><!-- doxytag: member="OpenBabel::OBBond::SetWedge" ref="aac63169d5f12da96ad067cc8194c8cdb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Mark that this bond has 2D "wedge" notation (i.e., goes in a positive Z direction from the beginning to end atoms) </p>

</div>
</div>
<a class="anchor" id="a25f82438018e969b4feda4a25042c608"></a><!-- doxytag: member="OpenBabel::OBBond::SetHash" ref="a25f82438018e969b4feda4a25042c608" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Mark that this bond has 2D "hash" notation (i.e., goes in a negative Z direction from the beginning to end atoms) </p>

</div>
</div>
<a class="anchor" id="abc50b699bc2efd24c5a65295b82f0ad0"></a><!-- doxytag: member="OpenBabel::OBBond::SetWedgeOrHash" ref="abc50b699bc2efd24c5a65295b82f0ad0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetWedgeOrHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Mark that this bond has 2D "wedge" notation (i.e., goes in a positive Z direction from the beginning to end atoms) </p>

</div>
</div>
<a class="anchor" id="a1b06560e0e01a806b92c2386220d0b57"></a><!-- doxytag: member="OpenBabel::OBBond::SetUp" ref="a1b06560e0e01a806b92c2386220d0b57" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that this bond has an "up" torsion for double-bond stereochem (i.e., "/" in SMILES notation. </p>

</div>
</div>
<a class="anchor" id="a7690859a81831984dbc0fa73313d44b3"></a><!-- doxytag: member="OpenBabel::OBBond::SetDown" ref="a7690859a81831984dbc0fa73313d44b3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that this bond has an "down" torsion for double-bond stereochem (i.e., "\" in SMILES notation. </p>

</div>
</div>
<a class="anchor" id="aacde511d3c9a744b44c88958bb86eb68"></a><!-- doxytag: member="OpenBabel::OBBond::SetInRing" ref="aacde511d3c9a744b44c88958bb86eb68" args="(bool set=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetInRing </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>set</em> = <code>true</code></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that this bond is in a ring. Primarily for internal use. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">OBMol::EndModify()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>.</p>

</div>
</div>
<a class="anchor" id="ab499793fc98aadbaa192756b8327016d"></a><!-- doxytag: member="OpenBabel::OBBond::SetClosure" ref="ab499793fc98aadbaa192756b8327016d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetClosure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that this bond indicates a ring closure when walking the molecule. </p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>This is for internal use only. All closure bonds are marked automatically by lazy evaluation when requesting <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>.</p>

</div>
</div>
<a class="anchor" id="a934251078b7907fd8cd8573c40fdea58"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetHash" ref="a934251078b7907fd8cd8573c40fdea58" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any indication of 2D "hash" notation from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">SetHash()</a> </p>

</div>
</div>
<a class="anchor" id="a8425a34105ee2f2e152da12ebca9960e"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetWedge" ref="a8425a34105ee2f2e152da12ebca9960e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any indication of 2D "wedge" notation from <a class="el" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">SetWedge()</a> </p>

</div>
</div>
<a class="anchor" id="a88d9f308b5a9d49e98da1c6bd195358f"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetUp" ref="a88d9f308b5a9d49e98da1c6bd195358f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any indication of "/" double bond stereochemistry from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57" title="Mark that this bond has an &quot;up&quot; torsion for double-bond stereochem (i.e., &quot;/&quot; in SMILES notation...">SetUp()</a> </p>

</div>
</div>
<a class="anchor" id="a561d657e1cc83679879b2b8f662b9205"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetDown" ref="a561d657e1cc83679879b2b8f662b9205" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any indication of "\" double bond stereochemistry from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3" title="Mark that this bond has an &quot;down&quot; torsion for double-bond stereochem (i.e., &quot;\&quot; in SMILES notation...">SetDown()</a> </p>

</div>
</div>
<a class="anchor" id="a2fcf3bf429f36281a43c879e40e75f34"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetAromatic" ref="a2fcf3bf429f36281a43c879e40e75f34" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear all aromaticity information for the bond. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>.</p>

</div>
</div>
<a class="anchor" id="a512e7b122631a29f1ef8c679704632cd"></a><!-- doxytag: member="OpenBabel::OBBond::UnsetKekule" ref="a512e7b122631a29f1ef8c679704632cd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetKekule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear all Kekule information for the bond. </p>

</div>
</div>
<a class="anchor" id="a80892a7fdfc7180a85160279c1186952"></a><!-- doxytag: member="OpenBabel::OBBond::GetIdx" ref="a80892a7fdfc7180a85160279c1186952" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The unique bond index in a molecule. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">OpenBabel::atomRingToBondRing()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae259c581e29bfc30fe551b6d54b1a0b1">OBMolBondBFSIter::CurrentDepth()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a55b3d11326ee365438d9c1cf97d0c51c">OBResidue::GetBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">OpenBabel::KekulePropagate()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a1e4a97cdb0dce128f98c6c08ec7c85e4"></a><!-- doxytag: member="OpenBabel::OBBond::GetId" ref="a1e4a97cdb0dce128f98c6c08ec7c85e4" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long GetId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, and <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="ad4d2cadd80651fe9e8bc35c492aa5667"></a><!-- doxytag: member="OpenBabel::OBBond::GetBO" ref="ad4d2cadd80651fe9e8bc35c492aa5667" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBO </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The bond order for the bond </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000022">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#a753514f0d4afe52f08f3ace5cfc727bb">GetBondOrder()</a> as this method may be removed. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6e7269e46f6f39fb598a9f3b74bba06c">OBAtom::BOSum()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4fc49ec59966a08059750ecd2e9d20a5">OBAtom::CountBondsOfOrder()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5d65e3449d4d6a0a7a35ea4e13039f16">OpenBabel::ExpandKekule()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#addb891e1fa000764b9030d5e08c0c67a">OBAtom::HasBondOfOrder()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae3d85200b00bf0ad59725175d606acfe">OBAtom::HasNonSingleBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac8299dd769242a441864a7ad2fcb92b6">OBAtom::IsAmideNitrogen()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a753514f0d4afe52f08f3ace5cfc727bb"></a><!-- doxytag: member="OpenBabel::OBBond::GetBondOrder" ref="a753514f0d4afe52f08f3ace5cfc727bb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBondOrder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The bond order for the bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBQueryBond.shtml#aeae2e5cc4cded6921003fb5f3d7962d8">OBQueryBond::Matches()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a class="anchor" id="aa793cd236a5be4bd934b9a43b28129f7"></a><!-- doxytag: member="OpenBabel::OBBond::GetFlags" ref="aa793cd236a5be4bd934b9a43b28129f7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetFlags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The set of property flags defined for this bond. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a class="anchor" id="a831ee182c3fb21b73a712f4d5c19bf92"></a><!-- doxytag: member="OpenBabel::OBBond::GetBeginAtomIdx" ref="a831ee182c3fb21b73a712f4d5c19bf92" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBeginAtomIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The atom index for the end atom in this bond (from <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#acf3841f44863af6030c02f54a10ba635">OBRing::IsMember()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a35e027ae790e6e8d7d5c2c21cb4925da"></a><!-- doxytag: member="OpenBabel::OBBond::GetEndAtomIdx" ref="a35e027ae790e6e8d7d5c2c21cb4925da" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetEndAtomIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The atom index for the end atom in this bond (from <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#acf3841f44863af6030c02f54a10ba635">OBRing::IsMember()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="afdda9b904cabc9ce0335a665988ab143"></a><!-- doxytag: member="OpenBabel::OBBond::GetBeginAtom" ref="afdda9b904cabc9ce0335a665988ab143" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetBeginAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The "beginning" atom for this bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a35892bf1255c1b8824c870e5460fd641">OBAtom::IsConnected()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="ada14874eb793cf1ab7dee5b50cab9422"></a><!-- doxytag: member="OpenBabel::OBBond::GetBeginAtom" ref="ada14874eb793cf1ab7dee5b50cab9422" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetBeginAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aee593e9cc14031b07e3dc63a003c345f"></a><!-- doxytag: member="OpenBabel::OBBond::GetEndAtom" ref="aee593e9cc14031b07e3dc63a003c345f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetEndAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The "end" atom for this bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a35892bf1255c1b8824c870e5460fd641">OBAtom::IsConnected()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a996c3317c41ba042ad7293f6db16906c"></a><!-- doxytag: member="OpenBabel::OBBond::GetEndAtom" ref="a996c3317c41ba042ad7293f6db16906c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetEndAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a30735471b108fe43965fd2d0a9fe86a0"></a><!-- doxytag: member="OpenBabel::OBBond::GetNbrAtom" ref="a30735471b108fe43965fd2d0a9fe86a0" args="(OBAtom *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetNbrAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The neighboring atom to <code>ptr</code> (i.e., the end if <code>ptr</code> is the start) </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>If <code>ptr</code> is not part of the bond, the beginning atom will always be returned </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a599391b68a70a3a6ea87511e74e142e7">OBAtom::CountFreeOxygens()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aed271572fc66bbef1751cac6ccf3cade">OBAtom::GetBond()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a55b3d11326ee365438d9c1cf97d0c51c">OBResidue::GetBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af0cf20008ef74a7af30b2df9d9b7bc7a">OBAtom::GetHeteroValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a8def681dc1ce0b36145de5a8f4a46d9a">OBAtom::GetHvyValence()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac8299dd769242a441864a7ad2fcb92b6">OBAtom::IsAmideNitrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ab7dd88da6d7a1e72f636c50586d5551d">OBAtom::IsCarboxylOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a135d08515315b5daa95e6081dc104a38">OBAtom::IsHbondDonorH()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a256fca254282407b1342875266769463">OBAtom::IsNitroOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae519982c28911c0906e9181c46d7bdbc">OBAtom::IsNonPolarHydrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad1b5c7353abc13edd81339fc58206a3b">OBAtom::IsOneFour()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a895cbd0d89d126571465b59ee0a3b79a">OBAtom::IsOneThree()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a5b1d4c9a297629beacb66c0ef04070e9">OBAtom::IsPhosphateOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6da4cfc5bbc2e4c9b358bccd5d97e51f">OBAtom::IsPolarHydrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a76ecda2fd4bf9207310088f25f526ea8">OBAtom::IsSulfateOxygen()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="ad8480b61159bc6cb861b17341dc2b29a"></a><!-- doxytag: member="OpenBabel::OBBond::GetParent" ref="ad8480b61159bc6cb861b17341dc2b29a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* GetParent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The enclosing <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> for this bond, or NULL if none is defined. </dd></dl>

</div>
</div>
<a class="anchor" id="a5a63a8b7f30958105ce72602da6715e9"></a><!-- doxytag: member="OpenBabel::OBBond::GetEquibLength" ref="a5a63a8b7f30958105ce72602da6715e9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEquibLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The expected "equilibrium" length based on the covalent radii and bond order Length is given in Angstroms </dd></dl>

</div>
</div>
<a class="anchor" id="aae1577c27936bc32d489469f228cc2a0"></a><!-- doxytag: member="OpenBabel::OBBond::GetLength" ref="aae1577c27936bc32d489469f228cc2a0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The current length of this bond in Angstroms </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="ae3aba2dee7140a159fb534747bb2dc7a"></a><!-- doxytag: member="OpenBabel::OBBond::GetNbrAtomIdx" ref="ae3aba2dee7140a159fb534747bb2dc7a" args="(OBAtom *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNbrAtomIdx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The index to the neighboring atom of <code>ptr</code> (i.e., the end if <code>ptr</code> is the start) </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>If <code>ptr</code> is not part of the bond, the beginning atom index will always be returned </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="ac567d206e2ca785c9a6d9d46ee00bb45"></a><!-- doxytag: member="OpenBabel::OBBond::FindSmallestRing" ref="ac567d206e2ca785c9a6d9d46ee00bb45" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * FindSmallestRing </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the smallest ring containing this bond (returns a NULL pointer if none exists) </p>

</div>
</div>
<a class="anchor" id="a4ef863ca7ed29e266960966a66dc8fb8"></a><!-- doxytag: member="OpenBabel::OBBond::IsAromatic" ref="a4ef863ca7ed29e266960966a66dc8fb8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond aromatic? (Note that the two atoms of the bond may be aromatic, but not the bond) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, and <a class="el" href="classOpenBabel_1_1OBQueryBond.shtml#aeae2e5cc4cded6921003fb5f3d7962d8">OBQueryBond::Matches()</a>.</p>

</div>
</div>
<a class="anchor" id="aa17842bd610dc8b2ede2fe324738fe5b"></a><!-- doxytag: member="OpenBabel::OBBond::IsInRing" ref="aa17842bd610dc8b2ede2fe324738fe5b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInRing </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond part of a ring? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4a027cbfb230638ae056ccd04b48fe8c">OBAtom::CountRingBonds()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>, and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a68ba77b0a1443e9e7276e3e97e16893c">OBAromaticTyper::TraverseCycle()</a>.</p>

</div>
</div>
<a class="anchor" id="a0919315f7a2fd68937c561186be76e44"></a><!-- doxytag: member="OpenBabel::OBBond::IsRotor" ref="a0919315f7a2fd68937c561186be76e44" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsRotor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a rotatable bond? Currently, this function classifies any bond with at least one heavy atom, no sp-hybrid atoms (e.g., a triple bond somewhere) not in a ring as a potential rotor. No other bond typing is attempted. For more detailed rotor detection, check the <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,.">OBRotorList</a> and <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml" title="Database of default hybridization torsional rules and SMARTS-defined OBRotorRule objects.">OBRotorRules</a> classes </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4b7d18f81253efd82ca54e4a9c0aae65">OBMol::NumRotors()</a>.</p>

</div>
</div>
<a class="anchor" id="a86eb2acbb9c5811e645df18b8b0bacf7"></a><!-- doxytag: member="OpenBabel::OBBond::IsAmide" ref="a86eb2acbb9c5811e645df18b8b0bacf7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond an amide link (i.e., between a carbonyl C and a N)? No distinction is made between primary, secondary, and tertiary amides. </dd></dl>

</div>
</div>
<a class="anchor" id="a8d59ca837068a807d393dab30cf72775"></a><!-- doxytag: member="OpenBabel::OBBond::IsPrimaryAmide" ref="a8d59ca837068a807d393dab30cf72775" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPrimaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a primary amide (i.e., between carbonyl C and a NH2)? In versions prior to 2.3, this function incorrectly identified secondary amides. </dd></dl>

</div>
</div>
<a class="anchor" id="a38f8ea65888a454fa07b77cdd4aa41ca"></a><!-- doxytag: member="OpenBabel::OBBond::IsSecondaryAmide" ref="a38f8ea65888a454fa07b77cdd4aa41ca" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSecondaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a secondary amide (i.e., between a carbonyl C and a NH1)? In versions prior to 2.3, this function incorrectly identified tertiary amides. </dd></dl>

</div>
</div>
<a class="anchor" id="a771d7a8c76475f1e72a75e8330fac6d5"></a><!-- doxytag: member="OpenBabel::OBBond::IsTertiaryAmide" ref="a771d7a8c76475f1e72a75e8330fac6d5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTertiaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a teriary amide (i.e., between a carbonyl C and a NH0)? This function is new since release 2.3. </dd></dl>

</div>
</div>
<a class="anchor" id="a783023d0c499c732c067d566c90b67ae"></a><!-- doxytag: member="OpenBabel::OBBond::IsEster" ref="a783023d0c499c732c067d566c90b67ae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsEster </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond an ester link (i.e., between a carbonyl C and an O)? </dd></dl>

</div>
</div>
<a class="anchor" id="a0b3a46209d5f71fd8b5717a81dce7dd1"></a><!-- doxytag: member="OpenBabel::OBBond::IsCarbonyl" ref="a0b3a46209d5f71fd8b5717a81dce7dd1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCarbonyl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a carbonyl C=O? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#a86eb2acbb9c5811e645df18b8b0bacf7">OBBond::IsAmide()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a783023d0c499c732c067d566c90b67ae">OBBond::IsEster()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a8d59ca837068a807d393dab30cf72775">OBBond::IsPrimaryAmide()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a38f8ea65888a454fa07b77cdd4aa41ca">OBBond::IsSecondaryAmide()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#a771d7a8c76475f1e72a75e8330fac6d5">OBBond::IsTertiaryAmide()</a>.</p>

</div>
</div>
<a class="anchor" id="aa7c514e18d5bbe2873dc223a02df526e"></a><!-- doxytag: member="OpenBabel::OBBond::IsSingle" ref="aa7c514e18d5bbe2873dc223a02df526e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond a single bond? </dd></dl>

</div>
</div>
<a class="anchor" id="a66926118e966d8cdb17a6ae23f2e89f4"></a><!-- doxytag: member="OpenBabel::OBBond::IsDouble" ref="a66926118e966d8cdb17a6ae23f2e89f4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond is a double bond? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="ae763d876fdca6bb00dd7d97574c9c1d0"></a><!-- doxytag: member="OpenBabel::OBBond::IsTriple" ref="ae763d876fdca6bb00dd7d97574c9c1d0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Is the bond is a triple bond? </dd></dl>

</div>
</div>
<a class="anchor" id="a3dcf63c2cdd597361fe1f140501fb4e7"></a><!-- doxytag: member="OpenBabel::OBBond::IsKSingle" ref="a3dcf63c2cdd597361fe1f140501fb4e7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000023">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa7c514e18d5bbe2873dc223a02df526e">IsSingle()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a1293d36d6ef65f89892ed57092aeb157"></a><!-- doxytag: member="OpenBabel::OBBond::IsKDouble" ref="a1293d36d6ef65f89892ed57092aeb157" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000024">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#a66926118e966d8cdb17a6ae23f2e89f4">IsDouble()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">OpenBabel::GetCurrentValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a566764b6577e8ba6a4959bd0f2e25076">OBAtom::KBOSum()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a8e455dc2d94f2394a21dd76db3af8325">OpenBabel::ValenceSum()</a>.</p>

</div>
</div>
<a class="anchor" id="ad2ccb49198384c9d22b47ac7d0c4de90"></a><!-- doxytag: member="OpenBabel::OBBond::IsKTriple" ref="ad2ccb49198384c9d22b47ac7d0c4de90" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000025">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#ae763d876fdca6bb00dd7d97574c9c1d0">IsTriple()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">OpenBabel::GetCurrentValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a566764b6577e8ba6a4959bd0f2e25076">OBAtom::KBOSum()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="ab91f9d866c216bcb3ffc5aa0774b5177"></a><!-- doxytag: member="OpenBabel::OBBond::IsClosure" ref="ab91f9d866c216bcb3ffc5aa0774b5177" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsClosure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Does this bond "close" a ring when walking the molecular graph? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="a1733c541422f1bec76b19733d5f6f046"></a><!-- doxytag: member="OpenBabel::OBBond::IsUp" ref="a1733c541422f1bec76b19733d5f6f046" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether this is the "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a4ff4d4e51ec0a91f7b8174265de188e7"></a><!-- doxytag: member="OpenBabel::OBBond::IsDown" ref="a4ff4d4e51ec0a91f7b8174265de188e7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether this is the "lower" bond in a double bond cis/trans isomer (i.e., "\" in SMILES) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a70910881ff95404e96c9b40d33e0db76"></a><!-- doxytag: member="OpenBabel::OBBond::IsWedge" ref="a70910881ff95404e96c9b40d33e0db76" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether this bond is a "wedge" in 2D representations (i.e., goes in a positive Z direction from the beginning to end atoms) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a class="anchor" id="ab5e8e371f621ba037c843f6da7fe6bdb"></a><!-- doxytag: member="OpenBabel::OBBond::IsHash" ref="ab5e8e371f621ba037c843f6da7fe6bdb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether this bond is a "hash" in 2D representations (i.e., goes in a negative Z direction from the beginning to end atoms) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a class="anchor" id="ad5c6dd89356b7fdfffc9c72020fec0a4"></a><!-- doxytag: member="OpenBabel::OBBond::IsWedgeOrHash" ref="ad5c6dd89356b7fdfffc9c72020fec0a4" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsWedgeOrHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if this bond is either a wedge or hash. </dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>: This is a seperate bond type </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a class="anchor" id="a892ffd8f4ddd7adbe285b6bf7133aa7a"></a><!-- doxytag: member="OpenBabel::OBBond::IsCisOrTrans" ref="a892ffd8f4ddd7adbe285b6bf7133aa7a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCisOrTrans </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if this bond is either a cis or trans. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a class="anchor" id="aed0dfa6939f68b337f13fbcf4e0f3da7"></a><!-- doxytag: member="OpenBabel::OBBond::IsDoubleBondGeometry" ref="aed0dfa6939f68b337f13fbcf4e0f3da7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDoubleBondGeometry </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the geometry around this bond "looks" unsaturated</dd></dl>
<p>This method checks if the geometry around this bond looks unsaturated by measuring the torsion angles formed by all connected atoms X-start=end-Y and checking that they are close to 0 or 180 degrees </p>

</div>
</div>
<a class="anchor" id="ad12fd937da5f4b0c4562888252fe214b"></a><!-- doxytag: member="OpenBabel::OBBond::Clear" ref="ad12fd937da5f4b0c4562888252fe214b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any and all data associated with this object. </p>
<p>This method can be called by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">OBConversion::Read()</a> before reading data. Derived classes should be sure to call <a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b" title="Clear any and all data associated with this object.">OBBase::Clear()</a> to remove inherited generic data.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the call was successful. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.1. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">OBMol</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad12fd937da5f4b0c4562888252fe214b">OBAtom</a>, <a class="el" href="classOpenBabel_1_1OBReaction.shtml#ad12fd937da5f4b0c4562888252fe214b">OBReaction</a>, and <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue::Clear()</a>.</p>

</div>
</div>
<a class="anchor" id="abdc8ffeb0749b563e1108a9ceaa0b394"></a><!-- doxytag: member="OpenBabel::OBBond::DoTransformations" ref="abdc8ffeb0749b563e1108a9ceaa0b394" args="(const std::map&lt; std::string, std::string &gt; *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* DoTransformations </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a set of transformations specified by the user</p>
<p>Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> Base type does nothing </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol</a>.</p>

</div>
</div>
<a class="anchor" id="a6bb6ed5c064e3957d8dd03aba51e61f7"></a><!-- doxytag: member="OpenBabel::OBBond::ClassDescription" ref="a6bb6ed5c064e3957d8dd03aba51e61f7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const char* ClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A list of descriptions of command-line options for <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations()</a> </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol</a>, and <a class="el" href="classOpenBabel_1_1OBReaction.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">OBReaction</a>.</p>

</div>
</div>
<a class="anchor" id="ab2f0cea1c162bbe8dd603528a3da5c87"></a><!-- doxytag: member="OpenBabel::OBBond::CastAndClear" ref="ab2f0cea1c162bbe8dd603528a3da5c87" args="(bool clear=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clear</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>By default clears the object. Called from ReadMolecule of most format classes. </p>

</div>
</div>
<a class="anchor" id="a6726eb1601555e8e7d712c43416e6af7"></a><!-- doxytag: member="OpenBabel::OBBond::GetTitle" ref="a6726eb1601555e8e7d712c43416e6af7" args="(bool replaceNewlines=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetTitle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replaceNewlines</em> = <code>true</code></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Base type does nothing Made virtual around r3535 to simplify code which passes around OBBase*. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6f656d9b9241846d93d6bfbe2ee89818">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a class="anchor" id="a366c8a142b8c16554597e82320dfd0e0"></a><!-- doxytag: member="OpenBabel::OBBond::SetTitle" ref="a366c8a142b8c16554597e82320dfd0e0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a class="anchor" id="a86dd58fc1da5652d70e823fa77cc1637"></a><!-- doxytag: member="OpenBabel::OBBond::HasData" ref="a86dd58fc1da5652d70e823fa77cc1637" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">OBDescriptor::MatchPairData()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="a01b429ffcaf47cf265acd439ed2faca0"></a><!-- doxytag: member="OpenBabel::OBBond::HasData" ref="a01b429ffcaf47cf265acd439ed2faca0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div>
<a class="anchor" id="a6cb103f12f49d86132ece200000da830"></a><!-- doxytag: member="OpenBabel::OBBond::HasData" ref="a6cb103f12f49d86132ece200000da830" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a797e5b4d20b6233062d2fdba78a08e06"></a><!-- doxytag: member="OpenBabel::OBBond::DeleteData" ref="a797e5b4d20b6233062d2fdba78a08e06" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="ab586df65e3f115b69510820b34098ce9"></a><!-- doxytag: member="OpenBabel::OBBond::DeleteData" ref="ab586df65e3f115b69510820b34098ce9" args="(OBGenericData *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>gd</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aaf61a3ecb8f2926aaf117299388d43c2"></a><!-- doxytag: member="OpenBabel::OBBond::DeleteData" ref="aaf61a3ecb8f2926aaf117299388d43c2" args="(std::vector&lt; OBGenericData * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vg</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete all of the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aa068a2a7b64d2ee73aedb8c6e3cf0c4c"></a><!-- doxytag: member="OpenBabel::OBBond::DeleteData" ref="aa068a2a7b64d2ee73aedb8c6e3cf0c4c" args="(const std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Deletes the generic data with the specified attribute, returning false if not found. </p>

</div>
</div>
<a class="anchor" id="adb6b0ec89bfea783825b3b466e4dbc00"></a><!-- doxytag: member="OpenBabel::OBBond::SetData" ref="adb6b0ec89bfea783825b3b466e4dbc00" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Adds a data object; does nothing if d==NULL. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa6f692332837387535e337413d0100de"></a><!-- doxytag: member="OpenBabel::OBBond::CloneData" ref="aa6f692332837387535e337413d0100de" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Adds a copy of a data object; does nothing if d == NULL </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a class="anchor" id="a69c3286ed127949ba747afcc5b9a514a"></a><!-- doxytag: member="OpenBabel::OBBond::DataSize" ref="a69c3286ed127949ba747afcc5b9a514a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t DataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div>
<a class="anchor" id="aee672d91b694547fb072fdaa8e03cfe9"></a><!-- doxytag: member="OpenBabel::OBBond::GetData" ref="aee672d91b694547fb072fdaa8e03cfe9" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">OpenBabel::CorrectChirality()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">OpenBabel::GetAtomSymClass()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div>
<a class="anchor" id="a22f0eade8b5924eec28ad50f0ce2031f"></a><!-- doxytag: member="OpenBabel::OBBond::GetData" ref="a22f0eade8b5924eec28ad50f0ce2031f" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a483b277678a8ca48998742c80985fd0b"></a><!-- doxytag: member="OpenBabel::OBBond::GetData" ref="a483b277678a8ca48998742c80985fd0b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a90a551ff0a0ed3fa58745dff0ecacdaa"></a><!-- doxytag: member="OpenBabel::OBBond::GetData" ref="a90a551ff0a0ed3fa58745dff0ecacdaa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa959146c3f7b458009dc04f61b5a2e7f"></a><!-- doxytag: member="OpenBabel::OBBond::GetData" ref="aa959146c3f7b458009dc04f61b5a2e7f" args="(DataOrigin source)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div>
<a class="anchor" id="afb56decc1b824c9fad980fc22e1d778c"></a><!-- doxytag: member="OpenBabel::OBBond::GetAllData" ref="afb56decc1b824c9fad980fc22e1d778c" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a15b47c65393d46fde62d1f0a19bcf9fa"></a><!-- doxytag: member="OpenBabel::OBBond::BeginData" ref="a15b47c65393d46fde62d1f0a19bcf9fa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a117c836710dd3aaa8748509262a5c280"></a><!-- doxytag: member="OpenBabel::OBBond::EndData" ref="a117c836710dd3aaa8748509262a5c280" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a1219a011a5e0ec59c67a5a873d81986c"></a><!-- doxytag: member="OpenBabel::OBBond::_idx" ref="a1219a011a5e0ec59c67a5a873d81986c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBBond.shtml#a1219a011a5e0ec59c67a5a873d81986c">_idx</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unique edge index used by <a class="el" href="classOpenBabel_1_1OBBond.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx()</a> and <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9" title="Set the internal bond index.">SetIdx()</a> </p>

</div>
</div>
<a class="anchor" id="aa15238ffbdb1330727678c9d6553d6ba"></a><!-- doxytag: member="OpenBabel::OBBond::_parent" ref="aa15238ffbdb1330727678c9d6553d6ba" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa15238ffbdb1330727678c9d6553d6ba">_parent</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The molecule which contains me (if any) </p>

</div>
</div>
<a class="anchor" id="a3a61f73b711933e11ee793bf8fc550e0"></a><!-- doxytag: member="OpenBabel::OBBond::_bgn" ref="a3a61f73b711933e11ee793bf8fc550e0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3a61f73b711933e11ee793bf8fc550e0">_bgn</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>I connect one node. </p>

</div>
</div>
<a class="anchor" id="aa094fa86d6e276e37457b5f662d386e0"></a><!-- doxytag: member="OpenBabel::OBBond::_end" ref="aa094fa86d6e276e37457b5f662d386e0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa094fa86d6e276e37457b5f662d386e0">_end</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>to another node </p>

</div>
</div>
<a class="anchor" id="a3db9d8d4a032ad98c3cc9139bff39a49"></a><!-- doxytag: member="OpenBabel::OBBond::_order" ref="a3db9d8d4a032ad98c3cc9139bff39a49" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3db9d8d4a032ad98c3cc9139bff39a49">_order</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Bond order (1, 2, 3, 5=aromatic) </p>

</div>
</div>
<a class="anchor" id="aec57dcfb24a8b5496b6319fa1172fa5e"></a><!-- doxytag: member="OpenBabel::OBBond::_flags" ref="aec57dcfb24a8b5496b6319fa1172fa5e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBBond.shtml#aec57dcfb24a8b5496b6319fa1172fa5e">_flags</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Any flags for this bond. </p>

</div>
</div>
<a class="anchor" id="accc49a515c7a81154bd46a8ea8a16204"></a><!-- doxytag: member="OpenBabel::OBBond::_id" ref="accc49a515c7a81154bd46a8ea8a16204" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long <a class="el" href="classOpenBabel_1_1OBBond.shtml#accc49a515c7a81154bd46a8ea8a16204">_id</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>unique id </p>

</div>
</div>
<a class="anchor" id="a6368d7673f23186649b2969ade3661d7"></a><!-- doxytag: member="OpenBabel::OBBond::Visit" ref="a6368d7673f23186649b2969ade3661d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBBond.shtml#a6368d7673f23186649b2969ade3661d7">Visit</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Whether this bond has been visited by a graph algorithm. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000017">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> objects instead to be fully thread-safe. </dd></dl>

</div>
</div>
<a class="anchor" id="af7811cf8aadbf3b3477c560b0ef2f797"></a><!-- doxytag: member="OpenBabel::OBBond::_vdata" ref="af7811cf8aadbf3b3477c560b0ef2f797" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; <a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Custom data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="bond_8h_source.shtml">bond.h</a></li>
<li><a class="el" href="bond_8cpp.shtml">bond.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:09 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
