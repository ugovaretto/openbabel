<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBForceField Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBForceField Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBForceField" --><!-- doxytag: inherits="OpenBabel::OBPlugin" -->
<p><code>#include &lt;<a class="el" href="forcefield_8h_source.shtml">openbabel/forcefield.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBForceField:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBForceField__inherit__graph.png" border="0" usemap="#OBForceField_inherit__map" alt="Inheritance graph"/></div>
<map name="OBForceField_inherit__map" id="OBForceField_inherit__map">
<area shape="rect" id="node2" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="20,5,103,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBForceField-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char <br class="typebreak"/>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <br class="typebreak"/>
PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad6b7355f59eca545c6921a7b16ad035b">MakeNewInstance</a> ()=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab49558e469015d76e7c27ee0cfdf4a75">~OBForceField</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#af264a32549daf4185196ac9d9c074833">SetParameterFile</a> (const std::string &amp;filename)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1107abae4af40cd96faa7385b4de79c2">GetUnit</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8bc55d583ab340cbbf2c1b787b007ccf">Setup</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp;constraints)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4832732ca896c32a5c7cab59513f2190">ParseParamFile</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5e025d2eb5240ce5776e5cd4ad54f557">SetTypes</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0d8cc6c6af6a74b49c13ef35750910c0">SetFormalCharges</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab6922ea591809c44c1c0d89be3f8b691">SetPartialCharges</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#af2662d702c1eb43cc58c30d274712e3f">SetupCalculations</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7cf46e58ec76819b7ae31983cfdee9f2">SetupPointers</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">IsSetupNeeded</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">GetAtomTypes</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">GetPartialCharges</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">GetCoordinates</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab9bff2ca9aad359da6491fa4c3f46577">UpdateCoordinates</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">GetConformers</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5c29065ad6e1322ade9087657bc576ec">UpdateConformers</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06b2f4ac9f082f41da3ae01d4bb3f1cc">SetCoordinates</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">SetConformers</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGridData.shtml">OBGridData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">GetGrid</a> (double step, double padding, const char *type, double pchg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for specifying interaction groups</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae9114ec448ff6ffeb4e529aa7fd39f9a">AddIntraGroup</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a524b145587c6a1f4f4f4daf96272b898">AddInterGroup</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac976169598f4df4ab91c669f052a91a6">AddInterGroups</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group1, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2bae648fc3aade1956399fce8bce98fa">ClearGroups</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#af62e7cd1222afc97088ebd1ab795fdf1">HasGroups</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for Cut-off distances</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#acfbc43a75be62083cb454b62fb7c24fc">EnableCutOff</a> (bool enable)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a395ba2797e3bc2f4ad4a401b074d0b48">IsCutOffEnabled</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a82b6dd2103b4751237474bb3671a4d24">SetVDWCutOff</a> (double r)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4109e7005a5eb4c91f10bd68958bfbf7">GetVDWCutOff</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8cd8ec1bf4c4405aa94f3b6b3a86e45e">SetElectrostaticCutOff</a> (double r)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a15a2329a93fec0c5864c6229daf4254f">GetElectrostaticCutOff</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#af02e18f8a525f1e682b58654656f5d12">SetUpdateFrequency</a> (int f)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a80a6e534a8f9a7ba20d4fc25b75c6891">GetUpdateFrequency</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7bc49547f1ea2ebf09864495d324fe67">UpdatePairsSimple</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa1d27b0f4f43d58d416528cd24215307">GetNumPairs</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a3545e8d4699a3cd7beba90de2fa7bedc">EnableAllPairs</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for energy evaluation</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ada5914c7c0927cc9157d404ac175bcce">E_Bond</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab071cd3395d95bfa4c90cbdc3426c95a">E_Angle</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a180eb032b11995b3140d54b1fd1ec991">E_StrBnd</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#abcf664aaa0bbb807a4f6e3d441d3147a">E_Torsion</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a83d00f6965c92799d4d4a6e488a737e3">E_OOP</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a9a27f6899e6a57b234cfe79022ca0d1c">E_VDW</a> (bool gradients=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7ed5b3a5502abbe3a9931165475905e0">E_Electrostatic</a> (bool gradients=true)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for logging</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5aade506ba2985dc08c1368c01f45b63">PrintTypes</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a95220f9d1cc8cb66548a504c451094c0">PrintFormalCharges</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a12dc30d677cadcf672458a5b60460559">PrintPartialCharges</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad022f259b6d08561e0c609fdc8484a6a">PrintVelocities</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#adca43238dd8a76b1f66737b74c1933ee">SetLogFile</a> (std::ostream *pos)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aad67effdb484585dffa645891d6d8ded">SetLogLevel</a> (int level)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa9927fd2efb61460c8e879f83c0d387e">GetLogLevel</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">OBFFLog</a> (std::string msg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a232f01774986e74179b56eb961728a54">OBFFLog</a> (const char *msg)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for structure generation</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7b4196fee783bef9070d3d50ba91ff84">DistanceGeometry</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0cd9e722f0f76012921ee143484e3e0a">SystematicRotorSearch</a> (unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa64a24788b054b2b29e98e0552ba27f0">SystematicRotorSearchInitialize</a> (unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aece2b94728b7f56b953b1fb7e11d0e18">SystematicRotorSearchNextConformer</a> (unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a3c2aba026c883a8c78a8874a2171cea0">RandomRotorSearch</a> (unsigned int conformers, unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a3511ce0631f467170ac6d5a9c6d5edde">RandomRotorSearchInitialize</a> (unsigned int conformers, unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad3435f0ac74b1fad83681bb0cb317616">RandomRotorSearchNextConformer</a> (unsigned int geomSteps=2500)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aabf7fa941ffdd2106f5f82f2afefa33f">WeightedRotorSearch</a> (unsigned int conformers, unsigned int geomSteps)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for energy minimization</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a303afe5059c4c70d029d160d6369fca7">SetLineSearchType</a> (int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa0635968faae8eae39c1157f34f1f186">GetLineSearchType</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">LineSearch</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;direction)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4582129101043340868e2f854db4f1d">LineSearch</a> (double *currentCoords, double *direction)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a735079ca73080f12512074483776d7ef">Newton2NumLineSearch</a> (double *direction)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1bff17c1e5b29b5635638c6a7633962c">LineSearchTakeStep</a> (double *origCoords, double *direction, double step)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a209c761c2f70a11d574a605c6f83921f">SteepestDescent</a> (int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize</a> (int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">SteepestDescentTakeNSteps</a> (int n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2f2732698efde5c2f155bfac08fd9ded">ConjugateGradients</a> (int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize</a> (int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">ConjugateGradientsTakeNSteps</a> (int n)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for molecular dynamics</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae9f7de4324a4a476ca0663772c1a6bfa">GenerateVelocities</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8c466035b972dddd7f5ebd27f04f685b">CorrectVelocities</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">MolecularDynamicsTakeNSteps</a> (int n, double T, double timestep=0.001, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for forcefield validation</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0d97557b9f37191cce473fbfd4636a54">DetectExplosion</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac6e66726b2becbbccf39e6d4ecf6ae2e">ValidateLineSearch</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;direction)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">ValidateSteepestDescent</a> (int steps)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">ValidateConjugateGradients</a> (int steps)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a591a6c018926edaa3f398ca7134e26c9">Validate</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5bd73ca104b0fd34659d77a7f9d3a0a4">ValidateGradients</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">ValidateGradientError</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;numgrad, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;anagrad)</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">FindForceField</a> (const std::string &amp;ID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8af11ddb5650f7733164c81da3aacbd8">FindForceField</a> (const char *ID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods for vector analysis (used by OBFFXXXXCalculationYYYY)</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4c518f64fa1e22d82ed6da82d14e4e3">VectorBondDerivative</a> (double *pos_a, double *pos_b, double *force_a, double *force_b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a974238716b14999015e8150dacba1037">VectorDistanceDerivative</a> (const double *const pos_i, const double *const pos_j, double *force_i, double *force_j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab451a524c7a4f04bb987b3fac9288eed">VectorLengthDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6c5b48194a0edecff825f246b645d44c">VectorAngleDerivative</a> (double *pos_a, double *pos_b, double *pos_c, double *force_a, double *force_b, double *force_c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">VectorAngleDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0d4f489e2b0ba2fd1e4a220cebf93f1c">VectorOOPDerivative</a> (double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">VectorOOPDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef595f8b6deb9c2213321352db467e98">VectorTorsionDerivative</a> (double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">VectorTorsionDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad88b7a26afc5f8b478e299a96d555f14">VectorSubtract</a> (double *i, double *j, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a19395cf2512e5b3af33f4ea603c18436">VectorSubtract</a> (const double *const i, const double *const j, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a34e901932f48c16a06929d7da9308b98">VectorAdd</a> (double *i, double *j, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac9d079c742232c33bc668f09135ab1a5">VectorDivide</a> (double *i, double n, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad3db6d00549c9448579509d878735ec0">VectorMultiply</a> (double *i, double n, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a33ebd98d01af8308d5b4f0cf0ef3b151">VectorMultiply</a> (const double *const i, const double n, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2bd8889c439dd81f3492d409f27e80d4">VectorSelfMultiply</a> (double *i, double n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a09521bcec46ef53d75215305755a911d">VectorNormalize</a> (double *i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a12db497d1100ca5a0620ba2076581a63">VectorCopy</a> (double *from, double *to)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#afa91d516c7ab5c44d0443c15deb62910">VectorLength</a> (double *i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a655c6950fb947600a4ffcbbf5f53fc18">VectorDistance</a> (double *pos_i, double *pos_j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a66aab9d4399b8502d330872181f51429">VectorAngle</a> (double *i, double *j, double *k)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5a156d1eea0507509cbb7f245999a31b">VectorTorsion</a> (double *i, double *j, double *k, double *l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#af031c62775e4d3374c0504d7af515ee0">VectorOOP</a> (double *i, double *j, double *k, double *l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae9651eef486a9afd00ef38c972df90f8">VectorClear</a> (double *i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a847a262329a92da08c099830a8431a48">VectorDot</a> (double *i, double *j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a814fd94395b7e2dfe95d78c11eb2a004">VectorCross</a> (double *i, double *j, double *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a336e29059a710e30d98a0d9898a10c63">PrintVector</a> (double *i)</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a> (int a, int b, int c, int d, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;parameter)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6d072805c7042da11d4ae8c8319a22f2">GetParameter</a> (const char *a, const char *b, const char *c, const char *d, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;parameter)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a905e6654e8bd06c0e558fa8b45223263">GetParameterIdx</a> (int a, int b, int c, int d, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;parameter)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">NumericalDerivative</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int terms=OBFF_ENERGY)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">NumericalSecondDerivative</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int terms=OBFF_ENERGY)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2ac199e3ef0f47fbdc0365ededfeced">SetGradient</a> (double *grad, int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab0b5fe1f004e97857de0cf641b5e3789">AddGradient</a> (double *grad, int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int=OBFF_ENERGY)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab1736c0602ea4313ff7602aa948ece82">GetGradientPtr</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#afeabf5a9fd6207144ed24a80c39714a2">ClearGradients</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#acafd9be7a3a74bed05e552a20aa0fccf">IsInSameRing</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b)</td></tr>
<tr><td colspan="2"><h2><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a">_mol</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a40756214f69d1c40ad70b64ae9fdc08d">_init</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0ad96c121eb2ab3291c9f348f3e66eb4">_parFile</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2d0a817f871831bed3e700ff65bd32ab">_validSetup</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa1d49201f58bfcceb6d47593bf360bcd">_gradientPtr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa5950d373df53720595c030d3db04397">_logos</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a158daac1f91a0b0efd242be1bd7c30e4">_logbuf</a> [BUFF_SIZE+1]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4e929e2f2b2aeb818341fff4bc1d73d0">_loglvl</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a122d15094b107a94e4359e67e0e1f539">_origLogLevel</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab95ae5a13edb24f5d32b01e2098f26df">_current_conformer</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7b2ba72f54b74909a53a0548cdf44ce2">_energies</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a47292a5e3cad98d5a169bd2c54103d66">_econv</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad33cee0e99c32beb8f2b8b05248a085f">_e_n1</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac7f362c839a5c13c37dcbd43b426516b">_cstep</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe138e40e061c04494421e5513829b37">_nsteps</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1c24fef8a19cd43ec17f25b026570ad4">_grad1</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab39c453046b3d76a24615c0f4ddb5dc4">_ncoords</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#afb076d7d251019d009f919e41161d004">_linesearch</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a74c5643406e1d2fc9a8ec5a64a746d6f">_timestep</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a21c5ecf3204a9907236f7596268a76a1">_temp</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a60c161177d9d80020f3a42d8f5ad2a97">_velocityPtr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6664339ecef04e70cd97a0a5738b99c3">_cutoff</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1eab6cf4abedfa50bd898b5d8394586a">_rvdw</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1cb4961672fc9fdbbcc6f77f10328124">_rele</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#acf019f5fea50c00abe4a8eceb1ebefd0">_vdwpairs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a304e7d6e8b9b55195148d8ce241c4231">_elepairs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6daefdab547529f4ddee1b729085df82">_pairfreq</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad73a3ddc8c65a31256666ba5cd10fcf3">_intraGroup</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6212b1ca8ff39273ec120c20524deba4">_interGroup</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::pair<br class="typebreak"/>
&lt; <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab3487cbb18bbd78d58a4afa84d65beb4">_interGroups</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr><td colspan="2"><h2><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a22f844c60684776be9d47109855e16de">_constraints</a> = <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad7d6ee4569e450185c8e229aa405e138">_fixAtom</a> = 0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1a201141d98a5e271d02d2a083bc3a0f">_ignoreAtom</a> = 0</td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Methods for constraints</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6b49b3a0f1e2f4b950c61971c2eda257">GetConstraints</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac97dee57cf1c5abbbddff62294a01c3b">SetConstraints</a> (<a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp;constraints)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a285bcf84b82ad8ce98fedfdf845fd29a">SetFixAtom</a> (int index)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6df5d9cd111137994ae597f611ab5d2e">UnsetFixAtom</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#adff150aaabc20d030d023fabc67a8936">SetIgnoreAtom</a> (int index)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a190fd6af7b60752a48c3c95fbcf41697">UnsetIgnoreAtom</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1a15aa0fc35de803cb02fd0d76931742">IgnoreCalculation</a> (int a, int b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a642f86408aa78a8909e2661cf34e7460">IgnoreCalculation</a> (int a, int b, int c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a07190ce19050974e8344af32f874aece">IgnoreCalculation</a> (int a, int b, int c, int d)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Base class for molecular mechanics force fields. </p>
<p>The <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> class is the base class for molecular mechanics in Open Babel. Classes derived from the <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> implement specific force fields (Ghemical, MMFF94, UFF, ...).Other classes such as <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>, <a class="el" href="classOpenBabel_1_1OBFFConstraint.shtml" title="Internal class for OBForceField to hold constraints.">OBFFConstraint</a>, OBFFCalculation and its derived classes are only for internal use. As a user interested in using the available force fields in Open Babel, you don't need these classes. The rest of this short introduction is aimed at these users. For information on how to implement additional force fields, see the wiki pages or post your questions to the openbabel-devel mailing list.</p>
<p>Before we can start using a force field, we must first select it and set it up. This is illustrated in the first example below. The Setup procedure assigns atom types, charges and parameters. There are several reasons why this may fail, a log message will be written to the logfile before <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> returns false.</p>
<p>The force field classes use their own logging functions. You can set the logfile using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#adca43238dd8a76b1f66737b74c1933ee">SetLogFile()</a> and set the log level using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aad67effdb484585dffa645891d6d8ded">SetLogLevel()</a>. If needed you can also write to the logfile using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">OBFFLog()</a>. There are four log levels: BFF_LOGLVL_NONE, OBFF_LOGLVL_LOW, OBFF_LOGLVL_MEDIUM, OBFF_LOGLVL_HIGH. See the API documentation to know what kind of output each function writes to the logfile for the different log levels.</p>
<p>Below are two examples which explain the basics.</p>
<p>This piece of code will output a list of available forcefields to cout: </p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd" title="As ListAsVector but sent to an ostream with a default of cout if not specified.">OBPlugin::List</a>(<span class="stringliteral">&quot;forcefields&quot;</span>);
</pre></div><p>Calculate the energy for the structure in mol using the Ghemical forcefield. </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>

      <span class="comment">// See OBConversion class to fill the mol object.</span>
      OBMol mol;
      <span class="comment">// Select the forcefield, this returns a pointer that we</span>
      <span class="comment">// will later use to access the forcefield functions.</span>
      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">OBForceField::FindForceField</a>(<span class="stringliteral">&quot;MMFF94&quot;</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>

      <span class="comment">// Set the logfile (can also be &amp;cout or &amp;cerr)</span>
      pFF-&gt;SetLogFile(&amp;cerr);
      <span class="comment">// Set the log level. See indivual functions to know</span>
      <span class="comment">// what kind of output each function produces for the</span>
      <span class="comment">// different log levels.</span>
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#a09f7b02a472bb953e5b2e0641ba45e3e" title="individual calculations and parameters">OBFF_LOGLVL_HIGH</a>);

      <span class="comment">// We need to setup the forcefield before we can use it. Setup()</span>
      <span class="comment">// returns false if it failes to find the atom types, parameters, ...</span>
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol)) {
      cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: could not setup force field.&quot;</span> &lt;&lt; endl;
      }

      <span class="comment">// Calculate the energy. The output will be written to the</span>
      <span class="comment">// logfile specified by SetLogFile()</span>
      pFF-&gt;Energy();
</pre></div><p>Minimize the structure in mol using conjugate gradients. </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>

      OBMol mol;
      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">OBForceField::FindForceField</a>(<span class="stringliteral">&quot;MMFF94&quot;</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>

      pFF-&gt;SetLogFile(&amp;cerr);
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#aaf7ca13d2b94e79693c47c10ea3c1def" title="SteepestDescent progress... (no output from Energy())">OBFF_LOGLVL_LOW</a>);
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol)) {
      cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: could not setup force field.&quot;</span> &lt;&lt; endl;
      }

      <span class="comment">// Perform the actual minimization, maximum 1000 steps</span>
      pFF-&gt;ConjugateGradients(1000);
</pre></div><p>Minimize the structure in mol using steepest descent and fix the position of atom with index 1. </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>

      OBMol mol;
      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">OBForceField::FindForceField</a>(<span class="stringliteral">&quot;MMFF94&quot;</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>

      pFF-&gt;SetLogFile(&amp;cerr);
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#aaf7ca13d2b94e79693c47c10ea3c1def" title="SteepestDescent progress... (no output from Energy())">OBFF_LOGLVL_LOW</a>);

      <span class="comment">// Set the constraints</span>
      OBFFConstraints constraints;
      constraints.AddAtomConstraint(1);

      <span class="comment">// We pass the constraints as argument for Setup()</span>
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol, constraints)) {
      cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: could not setup force field.&quot;</span> &lt;&lt; endl;
      }

      <span class="comment">// Perform the actual minimization, maximum 1000 steps</span>
      pFF-&gt;SteepestDescent(1000);
</pre></div><p>Minimize a ligand molecule in a binding pocket. </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>

      OBMol mol;

      <span class="comment">//</span>
      <span class="comment">// Read the pocket + ligand (initial guess for position) into mol...</span>
      <span class="comment">//</span>

      OBBitVec pocket; <span class="comment">// set the bits with atoms indexes for the pocket to 1...</span>
      OBBitVec ligand; <span class="comment">// set the bits with atoms indexes for the ligand to 1...</span>

      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">OBForceField::FindForceField</a>(<span class="stringliteral">&quot;MMFF94&quot;</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>

      pFF-&gt;SetLogFile(&amp;cerr);
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#aaf7ca13d2b94e79693c47c10ea3c1def" title="SteepestDescent progress... (no output from Energy())">OBFF_LOGLVL_LOW</a>);

      <span class="comment">// Fix the binding pocket atoms</span>
      OBFFConstraints constraints;
      <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a> (a, mol) {
      <span class="keywordflow">if</span> (pocket.BitIsOn(a-&gt;GetIdx())
      constraints.AddAtomConstraint(a-&gt;GetIdx());
      }

      <span class="comment">// Specify the interacting groups. The pocket atoms are fixed, so there</span>
      <span class="comment">// is no need to calculate intra- and inter-molecular interactions for</span>
      <span class="comment">// the binding pocket.</span>
      pFF-&gt;AddIntraGroup(ligand); <span class="comment">// bonded interactions in the ligand</span>
      pFF-&gt;AddInterGroup(ligand); <span class="comment">// non-bonded between ligand-ligand atoms</span>
      pFF-&gt;AddInterGroups(ligand, pocket); <span class="comment">// non-bonded between ligand and pocket atoms</span>

      <span class="comment">// We pass the constraints as argument for Setup()</span>
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol, constraints)) {
      cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: could not setup force field.&quot;</span> &lt;&lt; endl;
      }

      <span class="comment">// Perform the actual minimization, maximum 1000 steps</span>
      pFF-&gt;SteepestDescent(1000);
</pre></div> <dl><dt><b>Examples: </b></dt><dd>
<p><a class="el" href="obforcefield_energy_8cpp-example.shtml#_a6">obforcefield_energy.cpp</a>.</p>
</dd>
</dl></div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab49558e469015d76e7c27ee0cfdf4a75"></a><!-- doxytag: member="OpenBabel::OBForceField::~OBForceField" ref="ab49558e469015d76e7c27ee0cfdf4a75" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ad8a19dcfdef3d4cb8a3eea17d3c1f918"></a><!-- doxytag: member="OpenBabel::OBForceField::GetParameter" ref="ad8a19dcfdef3d4cb8a3eea17d3c1f918" args="(int a, int b, int c, int d, std::vector&lt; OBFFParameter &gt; &amp;parameter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> * GetParameter </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the correct <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from a <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> vector.</p>
<div class="fragment"><pre class="fragment"> vector&lt;OBFFParameter&gt; parameters; 
</pre></div><p>this vector is filled with entries (as <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>) from a parameter file. This happens in the <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> function.</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, 0, 0, 0, parameters); 
</pre></div><p>returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a (pa = parameter.a)</p>
<p>use: vdw parameters, ...</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, 0, 0, parameters); 
</pre></div><p>returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b (ab) or: pa = b &amp; pb = a (ba)</p>
<p>use: bond parameters, vdw parameters (pairs), ...</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, c, 0, parameters); 
</pre></div><p>returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b &amp; pc = c (abc) or: pa = c &amp; pb = b &amp; pc = a (cba)</p>
<p>use: angle parameters, ...</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, c, d, parameters); 
</pre></div><p>returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b &amp; pc = c &amp; pd = d (abcd) or: pa = d &amp; pb = b &amp; pc = c &amp; pd = a (dbca) or: pa = a &amp; pb = c &amp; pc = b &amp; pd = d (acbd) or: pa = d &amp; pb = c &amp; pc = b &amp; pd = a (dcba)</p>
<p>use: torsion parameters, ... </p>

</div>
</div>
<a class="anchor" id="a6d072805c7042da11d4ae8c8319a22f2"></a><!-- doxytag: member="OpenBabel::OBForceField::GetParameter" ref="a6d072805c7042da11d4ae8c8319a22f2" args="(const char *a, const char *b, const char *c, const char *d, std::vector&lt; OBFFParameter &gt; &amp;parameter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> * GetParameter </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter(int a, int b, int c, int d, std::vector&lt;OBFFParameter&gt; &amp;parameter)</a> </p>

</div>
</div>
<a class="anchor" id="a905e6654e8bd06c0e558fa8b45223263"></a><!-- doxytag: member="OpenBabel::OBForceField::GetParameterIdx" ref="a905e6654e8bd06c0e558fa8b45223263" args="(int a, int b, int c, int d, std::vector&lt; OBFFParameter &gt; &amp;parameter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetParameterIdx </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>parameter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get index for vector&lt;OBFFParameter&gt; ... </p>

</div>
</div>
<a class="anchor" id="a2a6bafaddf41c8eb9d0bda246bb07c85"></a><!-- doxytag: member="OpenBabel::OBForceField::NumericalDerivative" ref="a2a6bafaddf41c8eb9d0bda246bb07c85" args="(OBAtom *a, int terms=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>terms</em> = <code>OBFF_ENERGY</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the potential energy function derivative numerically with repect to the coordinates of atom with index a (this vector is the gradient)</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>provides coordinates </td></tr>
    <tr><td class="paramname">terms</td><td>OBFF_ENERGY, OBFF_EBOND, OBFF_EANGLE, OBFF_ESTRBND, OBFF_ETORSION, OBFF_EOOP, OBFF_EVDW, OBFF_ELECTROSTATIC </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the negative gradient of atom a </dd></dl>

</div>
</div>
<a class="anchor" id="a499789742e7b2021f26f8d1cfe04045f"></a><!-- doxytag: member="OpenBabel::OBForceField::NumericalSecondDerivative" ref="a499789742e7b2021f26f8d1cfe04045f" args="(OBAtom *a, int terms=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalSecondDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>terms</em> = <code>OBFF_ENERGY</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>OB 3.0. </p>

</div>
</div>
<a class="anchor" id="ab2ac199e3ef0f47fbdc0365ededfeced"></a><!-- doxytag: member="OpenBabel::OBForceField::SetGradient" ref="ab2ac199e3ef0f47fbdc0365ededfeced" args="(double *grad, int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetGradient </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>grad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the gradient for atom with index idx to grad </p>

</div>
</div>
<a class="anchor" id="ab0b5fe1f004e97857de0cf641b5e3789"></a><!-- doxytag: member="OpenBabel::OBForceField::AddGradient" ref="ab0b5fe1f004e97857de0cf641b5e3789" args="(double *grad, int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddGradient </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>grad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add grad to the gradient for atom with index idx </p>

</div>
</div>
<a class="anchor" id="ad0da17ffd83c1041f1d0657404b4724d"></a><!-- doxytag: member="OpenBabel::OBForceField::GetGradient" ref="ad0da17ffd83c1041f1d0657404b4724d" args="(OBAtom *a, int=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetGradient </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"> = <code>OBFF_ENERGY</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the pointer to the gradients </p>

</div>
</div>
<a class="anchor" id="ab1736c0602ea4313ff7602aa948ece82"></a><!-- doxytag: member="OpenBabel::OBForceField::GetGradientPtr" ref="ab1736c0602ea4313ff7602aa948ece82" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetGradientPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the pointer to the gradients </p>

</div>
</div>
<a class="anchor" id="afeabf5a9fd6207144ed24a80c39714a2"></a><!-- doxytag: member="OpenBabel::OBForceField::ClearGradients" ref="afeabf5a9fd6207144ed24a80c39714a2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ClearGradients </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set all gradients to zero </p>

</div>
</div>
<a class="anchor" id="acafd9be7a3a74bed05e552a20aa0fccf"></a><!-- doxytag: member="OpenBabel::OBForceField::IsInSameRing" ref="acafd9be7a3a74bed05e552a20aa0fccf" args="(OBAtom *a, OBAtom *b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInSameRing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if two atoms are in the same ring. [NOTE: this function uses SSSR, this means that not all rings are found for bridged rings. This causes some problems with the MMFF94 validation.] </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>atom a </td></tr>
    <tr><td class="paramname">b</td><td>atom b </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if atom a and b are in the same ring </dd></dl>

</div>
</div>
<a class="anchor" id="ad6b7355f59eca545c6921a7b16ad035b"></a><!-- doxytag: member="OpenBabel::OBForceField::MakeNewInstance" ref="ad6b7355f59eca545c6921a7b16ad035b" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>* MakeNewInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Clone the current instance. May be desirable in multithreaded environments, Should be deleted after use </p>

</div>
</div>
<a class="anchor" id="a45db88b29eb37e9dd105bf4032e421d2"></a><!-- doxytag: member="OpenBabel::OBForceField::TypeID" ref="a45db88b29eb37e9dd105bf4032e421d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Plugin type ("forcefields") </dd></dl>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">OBPlugin</a>.</p>

</div>
</div>
<a class="anchor" id="a4d625c122a1c2ed931851331b0243950"></a><!-- doxytag: member="OpenBabel::OBForceField::FindForceField" ref="a4d625c122a1c2ed931851331b0243950" args="(const std::string &amp;ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>* FindForceField </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ID</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ID</td><td>forcefield id (Ghemical, MMFF94, UFF, ...). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A pointer to a forcefield (the default if ID is empty), or NULL if not available. </dd></dl>

</div>
</div>
<a class="anchor" id="a8af11ddb5650f7733164c81da3aacbd8"></a><!-- doxytag: member="OpenBabel::OBForceField::FindForceField" ref="a8af11ddb5650f7733164c81da3aacbd8" args="(const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>* FindForceField </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ID</td><td>forcefield id (Ghemical, MMFF94, UFF, ...). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A pointer to a forcefield (the default if ID is empty), or NULL if not available. </dd></dl>

</div>
</div>
<a class="anchor" id="af264a32549daf4185196ac9d9c074833"></a><!-- doxytag: member="OpenBabel::OBForceField::SetParameterFile" ref="af264a32549daf4185196ac9d9c074833" args="(const std::string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetParameterFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1107abae4af40cd96faa7385b4de79c2"></a><!-- doxytag: member="OpenBabel::OBForceField::GetUnit" ref="a1107abae4af40cd96faa7385b4de79c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string GetUnit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The unit (kcal/mol, kJ/mol, ...) in which the energy is expressed as std::string. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obforcefield_energy_8cpp-example.shtml#a9">obforcefield_energy.cpp</a>.</dd>
</dl>
</div>
</div>
<a class="anchor" id="a6bdadd446f41751086aff8c6a4fde5cf"></a><!-- doxytag: member="OpenBabel::OBForceField::HasAnalyticalGradients" ref="a6bdadd446f41751086aff8c6a4fde5cf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool HasAnalyticalGradients </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a85e63dfcf5b43e5ae867815f0398c87e"></a><!-- doxytag: member="OpenBabel::OBForceField::Setup" ref="a85e63dfcf5b43e5ae867815f0398c87e" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Setup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup the forcefield for mol (assigns atom types, charges, etc.). Keep current constraints. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object that contains the atoms and bonds. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obforcefield_energy_8cpp-example.shtml#a7">obforcefield_energy.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af48ac6558d86f5b0d3e7981ee51033a8">OBEnergyConformerScore::Score()</a>.</p>

</div>
</div>
<a class="anchor" id="a8bc55d583ab340cbbf2c1b787b007ccf"></a><!-- doxytag: member="OpenBabel::OBForceField::Setup" ref="a8bc55d583ab340cbbf2c1b787b007ccf" args="(OBMol &amp;mol, OBFFConstraints &amp;constraints)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Setup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp;&#160;</td>
          <td class="paramname"><em>constraints</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup the forcefield for mol (assigns atom types, charges, etc.). Use new constraints. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object that contains the atoms and bonds. </td></tr>
    <tr><td class="paramname">constraints</td><td>The <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a> object that contains the constraints. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="a4832732ca896c32a5c7cab59513f2190"></a><!-- doxytag: member="OpenBabel::OBForceField::ParseParamFile" ref="a4832732ca896c32a5c7cab59513f2190" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ParseParamFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Load the parameters (this function is overloaded by the individual forcefields, and is called autoamically from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>). </p>

</div>
</div>
<a class="anchor" id="a5e025d2eb5240ce5776e5cd4ad54f557"></a><!-- doxytag: member="OpenBabel::OBForceField::SetTypes" ref="a5e025d2eb5240ce5776e5cd4ad54f557" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SetTypes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the atom types (this function is overloaded by the individual forcefields, and is called autoamically from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>). </p>

</div>
</div>
<a class="anchor" id="a0d8cc6c6af6a74b49c13ef35750910c0"></a><!-- doxytag: member="OpenBabel::OBForceField::SetFormalCharges" ref="a0d8cc6c6af6a74b49c13ef35750910c0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SetFormalCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the formal charges (this function is overloaded by the individual forcefields, and is called autoamically from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>). </p>

</div>
</div>
<a class="anchor" id="ab6922ea591809c44c1c0d89be3f8b691"></a><!-- doxytag: member="OpenBabel::OBForceField::SetPartialCharges" ref="ab6922ea591809c44c1c0d89be3f8b691" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SetPartialCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the partial charges (this function is overloaded by the individual forcefields, and is called autoamically from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>). </p>

</div>
</div>
<a class="anchor" id="af2662d702c1eb43cc58c30d274712e3f"></a><!-- doxytag: member="OpenBabel::OBForceField::SetupCalculations" ref="af2662d702c1eb43cc58c30d274712e3f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SetupCalculations </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup the calculations (this function is overloaded by the individual forcefields, and is called autoamically from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>). </p>

</div>
</div>
<a class="anchor" id="a7cf46e58ec76819b7ae31983cfdee9f2"></a><!-- doxytag: member="OpenBabel::OBForceField::SetupPointers" ref="a7cf46e58ec76819b7ae31983cfdee9f2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SetupPointers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup the pointers to the atom positions in the OBFFCalculation objects. This method will iterate over all the calculations and call SetupPointers for each one. (This function should be implemented by the individual force field implementations). </p>

</div>
</div>
<a class="anchor" id="a638c3bbd2aff3edd2b372fd087ccf99d"></a><!-- doxytag: member="OpenBabel::OBForceField::IsSetupNeeded" ref="a638c3bbd2aff3edd2b372fd087ccf99d" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSetupNeeded </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare the internal forcefield <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to mol. If the two have the same number of atoms and bonds, and all atomic numbers are the same, this function returns false, and no call to Setup is needed. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if Setup needs to be called. </dd></dl>

</div>
</div>
<a class="anchor" id="aa41fd7cce6a9cf2e56ca603de7fbc507"></a><!-- doxytag: member="OpenBabel::OBForceField::GetAtomTypes" ref="aa41fd7cce6a9cf2e56ca603de7fbc507" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetAtomTypes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the force atom types. The atom types will be added to the atoms of mol as <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>. The attribute will be "FFAtomType".</p>
<div class="fragment"><pre class="fragment">  ...
  pFF-&gt;Setup(&amp;mol);
  pFF-&gt;GetAtomTypes(&amp;mol);
  <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a> (atom, mol) {
    OBPairData *type = (OBPairData*) atom-&gt;GetData(<span class="stringliteral">&quot;FFAtomType&quot;</span>);
    <span class="keywordflow">if</span> (type)
      cout &lt;&lt; <span class="stringliteral">&quot;atom &quot;</span> &lt;&lt; atom-&gt;GetIdx() &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; type-&gt;GetValue() &lt;&lt; endl;
  }
  ...
</pre></div> 
</div>
</div>
<a class="anchor" id="a06280807851159ac893d3391400861d3"></a><!-- doxytag: member="OpenBabel::OBForceField::GetPartialCharges" ref="a06280807851159ac893d3391400861d3" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetPartialCharges </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the force field formal charges. The formal charges will be added to the atoms of mol as <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>. The attribute will be "FFPartialCharge".</p>
<div class="fragment"><pre class="fragment">  ...
  pFF-&gt;Setup(&amp;mol);
  pFF-&gt;GetPartialCharges(&amp;mol);
  <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a> (atom, mol) {
    OBPairData *chg = (OBPairData*) atom-&gt;GetData(<span class="stringliteral">&quot;FFPartialCharge&quot;</span>);
    <span class="keywordflow">if</span> (chg)
      cout &lt;&lt; <span class="stringliteral">&quot;atom &quot;</span> &lt;&lt; atom-&gt;GetIdx() &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; chg-&gt;GetValue() &lt;&lt; endl;
  }
  ...
</pre></div> 
</div>
</div>
<a class="anchor" id="a8be38bcae14834b6849d777e19885955"></a><!-- doxytag: member="OpenBabel::OBForceField::GetCoordinates" ref="a8be38bcae14834b6849d777e19885955" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get coordinates for current conformer and attach <a class="el" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> with energies, forces, ... to mol. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates to (from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a" title="Molecule to be evaluated or minimized.">OBForceField::_mol</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="ab9bff2ca9aad359da6491fa4c3f46577"></a><!-- doxytag: member="OpenBabel::OBForceField::UpdateCoordinates" ref="ab9bff2ca9aad359da6491fa4c3f46577" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool UpdateCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000038">Deprecated:</a></b></dt><dd>Use GetCooordinates instead. </dd></dl>

</div>
</div>
<a class="anchor" id="ad2cdc7a2d0f83221e9536d391032c6ea"></a><!-- doxytag: member="OpenBabel::OBForceField::GetConformers" ref="ad2cdc7a2d0f83221e9536d391032c6ea" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetConformers </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get coordinates for all conformers and attach <a class="el" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> with energies, forces, ... to mol. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates to (from <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a" title="Molecule to be evaluated or minimized.">OBForceField::_mol</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="a5c29065ad6e1322ade9087657bc576ec"></a><!-- doxytag: member="OpenBabel::OBForceField::UpdateConformers" ref="a5c29065ad6e1322ade9087657bc576ec" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool UpdateConformers </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000039">Deprecated:</a></b></dt><dd>Use GetConformers instead. </dd></dl>

</div>
</div>
<a class="anchor" id="a06b2f4ac9f082f41da3ae01d4bb3f1cc"></a><!-- doxytag: member="OpenBabel::OBForceField::SetCoordinates" ref="a06b2f4ac9f082f41da3ae01d4bb3f1cc" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetCoordinates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set coordinates for current conformer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates from (to <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a" title="Molecule to be evaluated or minimized.">OBForceField::_mol</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="ac271a3bf117a79400817b696d11ea4a7"></a><!-- doxytag: member="OpenBabel::OBForceField::SetConformers" ref="ac271a3bf117a79400817b696d11ea4a7" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetConformers </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set coordinates for all conformers. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates from (to <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a" title="Molecule to be evaluated or minimized.">OBForceField::_mol</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="a5f7ae482e5f2e4f4bda8fc6b6156f2a9"></a><!-- doxytag: member="OpenBabel::OBForceField::GetGrid" ref="a5f7ae482e5f2e4f4bda8fc6b6156f2a9" args="(double step, double padding, const char *type, double pchg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGridData.shtml">OBGridData</a> * GetGrid </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>padding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pchg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a grid with spacing <code>step</code> and <code>padding</code>. Place a probe atom of type probe at every grid point, calculate the energy and store it in the grid. These grids can then be used to create isosurfaces to identify locations where the probe atom has favourable interactions with the molecule. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">step</td><td>The grid step size in A.. </td></tr>
    <tr><td class="paramname">padding</td><td>The padding for the grid in A. </td></tr>
    <tr><td class="paramname">type</td><td>The force field atom type for the probe. </td></tr>
    <tr><td class="paramname">pchg</td><td>The partial charge for the probe atom. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the grid constaining the results. </dd></dl>

</div>
</div>
<a class="anchor" id="ae9114ec448ff6ffeb4e529aa7fd39f9a"></a><!-- doxytag: member="OpenBabel::OBForceField::AddIntraGroup" ref="ae9114ec448ff6ffeb4e529aa7fd39f9a" args="(OBBitVec &amp;group)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddIntraGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable intra-molecular interactions for group (bonds, angles, strbnd, torsions, oop). This function should be called before <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">group</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> with bits set for the indexes of the atoms which make up the group. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a524b145587c6a1f4f4f4daf96272b898"></a><!-- doxytag: member="OpenBabel::OBForceField::AddInterGroup" ref="a524b145587c6a1f4f4f4daf96272b898" args="(OBBitVec &amp;group)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddInterGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable inter-molecular interactions for group (non-bonded: vdw &amp; ele). This function should be called before <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">group</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> with bits set for the indexes of the atoms which make up the group. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac976169598f4df4ab91c669f052a91a6"></a><!-- doxytag: member="OpenBabel::OBForceField::AddInterGroups" ref="ac976169598f4df4ab91c669f052a91a6" args="(OBBitVec &amp;group1, OBBitVec &amp;group2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddInterGroups </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>group1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>group2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable inter-molecular interactions between group1 and group2 (non-bonded: vdw &amp; ele). Note that this function doesn't enable bonded interactions in either group. Non-bonded interactions in the groups itself are also not enabled. This function should be called before <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">group1</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> with bits set for the indexes of the atoms which make up the first group. </td></tr>
    <tr><td class="paramname">group2</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> with bits set for the indexes of the atoms which make up the second group. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2bae648fc3aade1956399fce8bce98fa"></a><!-- doxytag: member="OpenBabel::OBForceField::ClearGroups" ref="a2bae648fc3aade1956399fce8bce98fa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearGroups </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Clear all previously specified groups. </p>

</div>
</div>
<a class="anchor" id="af62e7cd1222afc97088ebd1ab795fdf1"></a><!-- doxytag: member="OpenBabel::OBForceField::HasGroups" ref="af62e7cd1222afc97088ebd1ab795fdf1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasGroups </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>true if there are groups. </dd></dl>

</div>
</div>
<a class="anchor" id="acfbc43a75be62083cb454b62fb7c24fc"></a><!-- doxytag: member="OpenBabel::OBForceField::EnableCutOff" ref="acfbc43a75be62083cb454b62fb7c24fc" args="(bool enable)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void EnableCutOff </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enable or disable Cut-offs. Cut-offs are disabled by default. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">enable</td><td>Enable when true, disable when false. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a395ba2797e3bc2f4ad4a401b074d0b48"></a><!-- doxytag: member="OpenBabel::OBForceField::IsCutOffEnabled" ref="a395ba2797e3bc2f4ad4a401b074d0b48" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCutOffEnabled </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if Cut-off distances are used. </dd></dl>

</div>
</div>
<a class="anchor" id="a82b6dd2103b4751237474bb3671a4d24"></a><!-- doxytag: member="OpenBabel::OBForceField::SetVDWCutOff" ref="a82b6dd2103b4751237474bb3671a4d24" args="(double r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetVDWCutOff </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the VDW cut-off distance to r. Note that this does not enable cut-off distances. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">r</td><td>The VDW cut-off distance to be used in A. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4109e7005a5eb4c91f10bd68958bfbf7"></a><!-- doxytag: member="OpenBabel::OBForceField::GetVDWCutOff" ref="a4109e7005a5eb4c91f10bd68958bfbf7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetVDWCutOff </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the VDW cut-off distance. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The VDW cut-off distance in A. </dd></dl>

</div>
</div>
<a class="anchor" id="a8cd8ec1bf4c4405aa94f3b6b3a86e45e"></a><!-- doxytag: member="OpenBabel::OBForceField::SetElectrostaticCutOff" ref="a8cd8ec1bf4c4405aa94f3b6b3a86e45e" args="(double r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetElectrostaticCutOff </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the Electrostatic cut-off distance to r. Note that this does not enable cut-off distances. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">r</td><td>The electrostatic cut-off distance to be used in A. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a15a2329a93fec0c5864c6229daf4254f"></a><!-- doxytag: member="OpenBabel::OBForceField::GetElectrostaticCutOff" ref="a15a2329a93fec0c5864c6229daf4254f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetElectrostaticCutOff </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the Electrostatic cut-off distance. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The electrostatic cut-off distance in A. </dd></dl>

</div>
</div>
<a class="anchor" id="af02e18f8a525f1e682b58654656f5d12"></a><!-- doxytag: member="OpenBabel::OBForceField::SetUpdateFrequency" ref="af02e18f8a525f1e682b58654656f5d12" args="(int f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetUpdateFrequency </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the frequency by which non-bonded pairs are updated. Values from 10 to 20 are recommended. Too low will decrease performance, too high will cause non-bonded interactions within cut-off not to be calculated. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>The pair list update frequency. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a80a6e534a8f9a7ba20d4fc25b75c6891"></a><!-- doxytag: member="OpenBabel::OBForceField::GetUpdateFrequency" ref="a80a6e534a8f9a7ba20d4fc25b75c6891" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetUpdateFrequency </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the frequency by which non-bonded pairs are updated. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The pair list update frequency. </dd></dl>

</div>
</div>
<a class="anchor" id="a7bc49547f1ea2ebf09864495d324fe67"></a><!-- doxytag: member="OpenBabel::OBForceField::UpdatePairsSimple" ref="a7bc49547f1ea2ebf09864495d324fe67" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UpdatePairsSimple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the bits in _vdwpairs and _elepairs to 1 for interactions that are within cut-off distance. This function is called in minimizing algorithms such as SteepestDescent and ConjugateGradients. </p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000011">Todo:</a></b></dt><dd>set the criteria as squared values </dd></dl>

</div>
</div>
<a class="anchor" id="aa1d27b0f4f43d58d416528cd24215307"></a><!-- doxytag: member="OpenBabel::OBForceField::GetNumPairs" ref="aa1d27b0f4f43d58d416528cd24215307" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumPairs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the number of non-bonded pairs in _mol. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The number of pairs currently enabled (within cut-off distance) </dd></dl>

</div>
</div>
<a class="anchor" id="a3545e8d4699a3cd7beba90de2fa7bedc"></a><!-- doxytag: member="OpenBabel::OBForceField::EnableAllPairs" ref="a3545e8d4699a3cd7beba90de2fa7bedc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void EnableAllPairs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set bits in range 0..._numpairs-1 to 1. Using this means there will be no cut-off. (not-working: see code for more information. </p>

</div>
</div>
<a class="anchor" id="ad9242de2f838fb94efcd85f7182a6f83"></a><!-- doxytag: member="OpenBabel::OBForceField::Energy" ref="ad9242de2f838fb94efcd85f7182a6f83" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double Energy </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Total energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: none <br/>
 OBFF_LOGLVL_MEDIUM: energy for individual energy terms <br/>
 OBFF_LOGLVL_HIGH: energy for individual energy interactions <br/>
 </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obforcefield_energy_8cpp-example.shtml#a8">obforcefield_energy.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af48ac6558d86f5b0d3e7981ee51033a8">OBEnergyConformerScore::Score()</a>.</p>

</div>
</div>
<a class="anchor" id="ada5914c7c0927cc9157d404ac175bcce"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Bond" ref="ada5914c7c0927cc9157d404ac175bcce" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Bond </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Bond stretching energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab071cd3395d95bfa4c90cbdc3426c95a"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Angle" ref="ab071cd3395d95bfa4c90cbdc3426c95a" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Angle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Angle bending energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a180eb032b11995b3140d54b1fd1ec991"></a><!-- doxytag: member="OpenBabel::OBForceField::E_StrBnd" ref="a180eb032b11995b3140d54b1fd1ec991" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_StrBnd </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Stretch bending energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abcf664aaa0bbb807a4f6e3d441d3147a"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Torsion" ref="abcf664aaa0bbb807a4f6e3d441d3147a" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Torsion </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Torsional energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a83d00f6965c92799d4d4a6e488a737e3"></a><!-- doxytag: member="OpenBabel::OBForceField::E_OOP" ref="a83d00f6965c92799d4d4a6e488a737e3" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_OOP </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Out-Of-Plane bending energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9a27f6899e6a57b234cfe79022ca0d1c"></a><!-- doxytag: member="OpenBabel::OBForceField::E_VDW" ref="a9a27f6899e6a57b234cfe79022ca0d1c" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_VDW </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Van der Waals energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7ed5b3a5502abbe3a9931165475905e0"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Electrostatic" ref="a7ed5b3a5502abbe3a9931165475905e0" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Electrostatic </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>gradients</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">gradients</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">GetGradient()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Electrostatic energy. </dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5aade506ba2985dc08c1368c01f45b63"></a><!-- doxytag: member="OpenBabel::OBForceField::PrintTypes" ref="a5aade506ba2985dc08c1368c01f45b63" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PrintTypes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print the atom types to the log. </p>

</div>
</div>
<a class="anchor" id="a95220f9d1cc8cb66548a504c451094c0"></a><!-- doxytag: member="OpenBabel::OBForceField::PrintFormalCharges" ref="a95220f9d1cc8cb66548a504c451094c0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PrintFormalCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print the formal charges to the log (atom.GetPartialCharge(), MMFF94 FC's are not always int). </p>

</div>
</div>
<a class="anchor" id="a12dc30d677cadcf672458a5b60460559"></a><!-- doxytag: member="OpenBabel::OBForceField::PrintPartialCharges" ref="a12dc30d677cadcf672458a5b60460559" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PrintPartialCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print the partial charges to the log. </p>

</div>
</div>
<a class="anchor" id="ad022f259b6d08561e0c609fdc8484a6a"></a><!-- doxytag: member="OpenBabel::OBForceField::PrintVelocities" ref="ad022f259b6d08561e0c609fdc8484a6a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PrintVelocities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print the velocities to the log. </p>

</div>
</div>
<a class="anchor" id="adca43238dd8a76b1f66737b74c1933ee"></a><!-- doxytag: member="OpenBabel::OBForceField::SetLogFile" ref="adca43238dd8a76b1f66737b74c1933ee" args="(std::ostream *pos)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetLogFile </td>
          <td>(</td>
          <td class="paramtype">std::ostream *&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the stream for logging (can also be &amp;cout for logging to screen). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>Stream (when pos is 0, std::cout wil be used). </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if succesfull. </dd></dl>

</div>
</div>
<a class="anchor" id="aad67effdb484585dffa645891d6d8ded"></a><!-- doxytag: member="OpenBabel::OBForceField::SetLogLevel" ref="aad67effdb484585dffa645891d6d8ded" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetLogLevel </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the log level (OBFF_LOGLVL_NONE, OBFF_LOGLVL_LOW, OBFF_LOGLVL_MEDIUM, OBFF_LOGLVL_HIGH). Inline if statements for logging are available: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">  #define IF_OBFF_LOGLVL_LOW    if(_loglvl &gt;= OBFF_LOGLVL_LOW)</span>
<span class="preprocessor"></span><span class="preprocessor">  #define IF_OBFF_LOGLVL_MEDIUM if(_loglvl &gt;= OBFF_LOGLVL_MEDIUM)</span>
<span class="preprocessor">  #define IF_OBFF_LOGLVL_HIGH   if(_loglvl &gt;= OBFF_LOGLVL_HIGH)</span>
</pre></div><p>example: </p>
<div class="fragment"><pre class="fragment">  <a class="code" href="classOpenBabel_1_1OBForceField.shtml#aad67effdb484585dffa645891d6d8ded">SetLogLevel</a>(<a class="code" href="forcefield_8h.shtml#aefda3ec45e427a38ac62a99a50cf93af" title="individual energy terms">OBFF_LOGLVL_MEDIUM</a>);
  <a class="code" href="forcefield_8h.shtml#af9a87deee4328f76736a05bf6e6709ea">IF_OBFF_LOGLVL_HIGH</a> {
    <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">OBFFLog</a>(<span class="stringliteral">&quot;this text will NOT be logged...\n&quot;</span>);
  }

  <a class="code" href="forcefield_8h.shtml#a62a639c8c4176b63a2697aff40f4338a">IF_OBFF_LOGLVL_LOW</a> {
    <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">OBFFLog</a><span class="stringliteral">&quot;this text will be logged...\n&quot;</span>);
  }

  <a class="code" href="forcefield_8h.shtml#a6f31cf89cddb30bac3d187474f8defed">IF_OBFF_LOGLVL_MEDIUM</a> {
    <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">OBFFLog</a>(<span class="stringliteral">&quot;this text will also be logged...\n&quot;</span>);
  }
</pre></div> 
</div>
</div>
<a class="anchor" id="aa9927fd2efb61460c8e879f83c0d387e"></a><!-- doxytag: member="OpenBabel::OBForceField::GetLogLevel" ref="aa9927fd2efb61460c8e879f83c0d387e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetLogLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The log level. </dd></dl>

</div>
</div>
<a class="anchor" id="a06249fabc93686f6fa389173bcd2e300"></a><!-- doxytag: member="OpenBabel::OBForceField::OBFFLog" ref="a06249fabc93686f6fa389173bcd2e300" args="(std::string msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OBFFLog </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print msg to the logfile. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>The message to print. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a232f01774986e74179b56eb961728a54"></a><!-- doxytag: member="OpenBabel::OBForceField::OBFFLog" ref="a232f01774986e74179b56eb961728a54" args="(const char *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OBFFLog </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print msg to the logfile. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>The message to print. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7b4196fee783bef9070d3d50ba91ff84"></a><!-- doxytag: member="OpenBabel::OBForceField::DistanceGeometry" ref="a7b4196fee783bef9070d3d50ba91ff84" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DistanceGeometry </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Generate coordinates for the molecule (distance geometry). (OB 3.0). </p>

</div>
</div>
<a class="anchor" id="a0cd9e722f0f76012921ee143484e3e0a"></a><!-- doxytag: member="OpenBabel::OBForceField::SystematicRotorSearch" ref="a0cd9e722f0f76012921ee143484e3e0a" args="(unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystematicRotorSearch </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate conformers for the molecule (systematicaly rotating torsions).</p>
<p>The initial starting structure here is important, this structure should be minimized for the best results. SystematicRotorSearch works by rotating around the rotatable bond in a molecule (see <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml" title="Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds...">OBRotamerList</a> class). This rotating generates multiple conformers. The energy for all these conformers is then evaluated and the lowest energy conformer is selected.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization.</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for this function will interfere with the output for this function. <br/>
<br/>
 OBFF_LOGLVL_NONE: None. <br/>
 OBFF_LOGLVL_LOW: Number of rotatable bonds, energies for the conformers, which one is the lowest, ... <br/>
 OBFF_LOGLVL_MEDIUM: See note above. <br/>
 OBFF_LOGLVL_HIGH: See note above. <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="aa64a24788b054b2b29e98e0552ba27f0"></a><!-- doxytag: member="OpenBabel::OBForceField::SystematicRotorSearchInitialize" ref="aa64a24788b054b2b29e98e0552ba27f0" args="(unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int SystematicRotorSearchInitialize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate conformers for the molecule by systematicaly rotating torsions. To be used in combination with SystematicRotorSearchNexConformer().</p>
<p>example: </p>
<div class="fragment"><pre class="fragment">  <span class="comment">// pFF is a pointer to a OBForceField class</span>
  pFF-&gt;SystematicRotorSearchInitialize(300);
  <span class="keywordflow">while</span> (pFF-&gt;SystematicRotorSearchNextConformer(300)) {
    <span class="comment">// do some updating in your program (show last generated conformer, ...)</span>
  }
</pre></div><p>If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0cd9e722f0f76012921ee143484e3e0a">SystematicRotorSearch()</a> is recommended.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The number of conformers. </dd></dl>

</div>
</div>
<a class="anchor" id="aece2b94728b7f56b953b1fb7e11d0e18"></a><!-- doxytag: member="OpenBabel::OBForceField::SystematicRotorSearchNextConformer" ref="aece2b94728b7f56b953b1fb7e11d0e18" args="(unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystematicRotorSearchNextConformer </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Evaluate the next conformer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if there are more conformers. </dd></dl>

</div>
</div>
<a class="anchor" id="a3c2aba026c883a8c78a8874a2171cea0"></a><!-- doxytag: member="OpenBabel::OBForceField::RandomRotorSearch" ref="a3c2aba026c883a8c78a8874a2171cea0" args="(unsigned int conformers, unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RandomRotorSearch </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conformers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate conformers for the molecule (randomly rotating torsions).</p>
<p>The initial starting structure here is important, this structure should be minimized for the best results. RandomRotorSearch works by randomly rotating around the rotatable bonds in a molecule (see <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml" title="Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds...">OBRotamerList</a> class). This rotating generates multiple conformers. The energy for all these conformers is then evaluated and the lowest energy conformer is selected.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">conformers</td><td>The number of random conformers to consider during the search. </td></tr>
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization for each conformer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for this function will interfere with the output for this function. <br/>
<br/>
 OBFF_LOGLVL_NONE: None. <br/>
 OBFF_LOGLVL_LOW: Number of rotatable bonds, energies for the conformers, which one is the lowest, ... <br/>
 OBFF_LOGLVL_MEDIUM: See note above. <br/>
 OBFF_LOGLVL_HIGH: See note above. <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a3511ce0631f467170ac6d5a9c6d5edde"></a><!-- doxytag: member="OpenBabel::OBForceField::RandomRotorSearchInitialize" ref="a3511ce0631f467170ac6d5a9c6d5edde" args="(unsigned int conformers, unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RandomRotorSearchInitialize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conformers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate conformers for the molecule by randomly rotating torsions. To be used in combination with RandomRotorSearchNexConformer().</p>
<p>example: </p>
<div class="fragment"><pre class="fragment">  <span class="comment">// pFF is a pointer to a OBForceField class</span>
  pFF-&gt;RandomRotorSearchInitialize(300);
  <span class="keywordflow">while</span> (pFF-&gt;RandomRotorSearchNextConformer(300)) {
    <span class="comment">// do some updating in your program (show last generated conformer, ...)</span>
  }
</pre></div><p>If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a3c2aba026c883a8c78a8874a2171cea0">RandomRotorSearch()</a> is recommended.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">conformers</td><td>The number of random conformers to consider during the search </td></tr>
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3435f0ac74b1fad83681bb0cb317616"></a><!-- doxytag: member="OpenBabel::OBForceField::RandomRotorSearchNextConformer" ref="ad3435f0ac74b1fad83681bb0cb317616" args="(unsigned int geomSteps=2500)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RandomRotorSearchNextConformer </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em> = <code>2500</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Evaluate the next conformer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if there are more conformers. </dd></dl>

</div>
</div>
<a class="anchor" id="aabf7fa941ffdd2106f5f82f2afefa33f"></a><!-- doxytag: member="OpenBabel::OBForceField::WeightedRotorSearch" ref="aabf7fa941ffdd2106f5f82f2afefa33f" args="(unsigned int conformers, unsigned int geomSteps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WeightedRotorSearch </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>conformers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>geomSteps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate conformers for the molecule (randomly rotating torsions).</p>
<p>The initial starting structure here is important, this structure should be minimized for the best results. WeightedRotorSearch works by randomly rotating around the rotatable bonds in a molecule (see <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml" title="Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds...">OBRotamerList</a> class). Unlike <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a3c2aba026c883a8c78a8874a2171cea0">RandomRotorSearch()</a> the random choice of torsions is reweighted based on the energy of the generated conformer. Over time, the generated conformers for each step should become increasingly better. The lowest energy conformer is selected.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">conformers</td><td>The number of random conformers to consider during the search. </td></tr>
    <tr><td class="paramname">geomSteps</td><td>The number of steps to take during geometry optimization for each conformer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for this function will interfere with the output for this function. <br/>
<br/>
 OBFF_LOGLVL_NONE: None. <br/>
 OBFF_LOGLVL_LOW: Number of rotatable bonds, energies for the conformers, which one is the lowest, ... <br/>
 OBFF_LOGLVL_MEDIUM: See note above. <br/>
 OBFF_LOGLVL_HIGH: See note above. <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a303afe5059c4c70d029d160d6369fca7"></a><!-- doxytag: member="OpenBabel::OBForceField::SetLineSearchType" ref="a303afe5059c4c70d029d160d6369fca7" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLineSearchType </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the <a class="el" href="structOpenBabel_1_1LineSearchType.shtml" title="The type of line search to be used for optimization -- simple or Newton numeric.">LineSearchType</a>. The default type is <a class="el" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7aebfbf7dc5cde0772efb1aa49712bd76b">LineSearchType::Simple</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>The <a class="el" href="structOpenBabel_1_1LineSearchType.shtml" title="The type of line search to be used for optimization -- simple or Newton numeric.">LineSearchType</a> to be used in SteepestDescent and ConjugateGradients. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa0635968faae8eae39c1157f34f1f186"></a><!-- doxytag: member="OpenBabel::OBForceField::GetLineSearchType" ref="aa0635968faae8eae39c1157f34f1f186" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetLineSearchType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the <a class="el" href="structOpenBabel_1_1LineSearchType.shtml" title="The type of line search to be used for optimization -- simple or Newton numeric.">LineSearchType</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The current <a class="el" href="structOpenBabel_1_1LineSearchType.shtml" title="The type of line search to be used for optimization -- simple or Newton numeric.">LineSearchType</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a5f08066361ace92acfa362df93fafd76"></a><!-- doxytag: member="OpenBabel::OBForceField::LineSearch" ref="a5f08066361ace92acfa362df93fafd76" args="(OBAtom *atom, vector3 &amp;direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> LineSearch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a linesearch starting at atom in direction direction. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000040">Deprecated:</a></b></dt><dd>Current code should use <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4582129101043340868e2f854db4f1d">LineSearch(double *, double*)</a> instead. </dd></dl>

</div>
</div>
<a class="anchor" id="ab4582129101043340868e2f854db4f1d"></a><!-- doxytag: member="OpenBabel::OBForceField::LineSearch" ref="ab4582129101043340868e2f854db4f1d" args="(double *currentCoords, double *direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double LineSearch </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>currentCoords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a linesearch for the entire molecule in direction <code>direction</code>. This function is called when using <a class="el" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7aebfbf7dc5cde0772efb1aa49712bd76b">LineSearchType::Simple</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">currentCoords</td><td>Start coordinates. </td></tr>
    <tr><td class="paramname">direction</td><td>The search direction. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>alpha, The scale of the step we moved along the direction vector.</dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: none <br/>
 OBFF_LOGLVL_MEDIUM: none <br/>
 OBFF_LOGLVL_HIGH: none <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a735079ca73080f12512074483776d7ef"></a><!-- doxytag: member="OpenBabel::OBForceField::Newton2NumLineSearch" ref="a735079ca73080f12512074483776d7ef" args="(double *direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Newton2NumLineSearch </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>direction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a linesearch for the entire molecule. This function is called when using <a class="el" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7a38e70ed84d1b5d7404464b69c8e5093a">LineSearchType::Newton2Num</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">direction</td><td>The search direction. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>alpha, The scale of the step we moved along the direction vector.</dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: none <br/>
 OBFF_LOGLVL_MEDIUM: none <br/>
 OBFF_LOGLVL_HIGH: none <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a1bff17c1e5b29b5635638c6a7633962c"></a><!-- doxytag: member="OpenBabel::OBForceField::LineSearchTakeStep" ref="a1bff17c1e5b29b5635638c6a7633962c" args="(double *origCoords, double *direction, double step)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void LineSearchTakeStep </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>origCoords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>direction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the coordinates of the atoms to origCoord + step. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">origCoords</td><td>Start coordinates. </td></tr>
    <tr><td class="paramname">direction</td><td>The search direction. </td></tr>
    <tr><td class="paramname">step</td><td>The step to take. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a209c761c2f70a11d574a605c6f83921f"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescent" ref="a209c761c2f70a11d574a605c6f83921f" args="(int steps, double econv=1e&#45;6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SteepestDescent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform steepest descent optimalization for steps steps or until convergence criteria is reached.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">steps</td><td>The number of steps. </td></tr>
    <tr><td class="paramname">econv</td><td>Energy convergence criteria. (defualt is 1e-6) </td></tr>
    <tr><td class="paramname">method</td><td>Deprecated. (see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients()</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: header including number of steps and first step <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a6ba7f48a161b7c25d9a8ad661c3c572b"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescentInitialize" ref="a6ba7f48a161b7c25d9a8ad661c3c572b" args="(int steps=1000, double econv=1e&#45;6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SteepestDescentInitialize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em> = <code>1000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize steepest descent optimalization, to be used in combination with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">SteepestDescentTakeNSteps()</a>.</p>
<p>example: </p>
<div class="fragment"><pre class="fragment">  <span class="comment">// pFF is a pointer to a OBForceField class</span>
  pFF-&gt;SteepestDescentInitialize(100, 1e-5f);
  <span class="keywordflow">while</span> (pFF-&gt;SteepestDescentTakeNSteps(5)) {
    <span class="comment">// do some updating in your program (redraw structure, ...)</span>
  }
</pre></div><p>If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a209c761c2f70a11d574a605c6f83921f">SteepestDescent()</a> is recommended.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">steps</td><td>The number of steps. </td></tr>
    <tr><td class="paramname">econv</td><td>Energy convergence criteria. (defualt is 1e-6) </td></tr>
    <tr><td class="paramname">method</td><td>Deprecated. (see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients()</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: header including number of steps <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="ab2cea937bb0224112a6f79758a099932"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescentTakeNSteps" ref="ab2cea937bb0224112a6f79758a099932" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SteepestDescentTakeNSteps </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Take n steps in a steepestdescent optimalization that was previously initialized with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>The number of steps to take. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>False if convergence or the number of steps given by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize()</a> has been reached.</dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: step number, energy and energy for the previous step <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a2f2732698efde5c2f155bfac08fd9ded"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradients" ref="a2f2732698efde5c2f155bfac08fd9ded" args="(int steps, double econv=1e&#45;6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConjugateGradients </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform conjugate gradient optimalization for steps steps or until convergence criteria is reached.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">steps</td><td>The number of steps. </td></tr>
    <tr><td class="paramname">econv</td><td>Energy convergence criteria. (defualt is 1e-6) </td></tr>
    <tr><td class="paramname">method</td><td>Deprecated. (see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients()</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: information about the progress of the minimization <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="a7e253a1997cddeb4fd5eaa79e6e42610"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradientsInitialize" ref="a7e253a1997cddeb4fd5eaa79e6e42610" args="(int steps=1000, double econv=1e&#45;6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConjugateGradientsInitialize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em> = <code>1000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initialize conjugate gradient optimalization and take the first step, to be used in combination with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">ConjugateGradientsTakeNSteps()</a>.</p>
<p>example: </p>
<div class="fragment"><pre class="fragment">  <span class="comment">// pFF is a pointer to a OBForceField class</span>
  pFF-&gt;ConjugateGradientsInitialize(100, 1e-5f);
  <span class="keywordflow">while</span> (pFF-&gt;ConjugateGradientsTakeNSteps(5)) {
    <span class="comment">// do some updating in your program (redraw structure, ...)</span>
  }
</pre></div><p>If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2f2732698efde5c2f155bfac08fd9ded">ConjugateGradients()</a> is recommended.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">steps</td><td>The number of steps. </td></tr>
    <tr><td class="paramname">econv</td><td>Energy convergence criteria. (defualt is 1e-6) </td></tr>
    <tr><td class="paramname">method</td><td>Deprecated. (see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients()</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: header including number of steps and first step <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="aef9f033a26aaedb027c2a99de04a9646"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradientsTakeNSteps" ref="aef9f033a26aaedb027c2a99de04a9646" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConjugateGradientsTakeNSteps </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Take n steps in a conjugate gradient optimalization that was previously initialized with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>The number of steps to take. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>False if convergence or the number of steps given by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize()</a> has been reached.</dd></dl>
<dl class="user"><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br/>
<br/>
 OBFF_LOGLVL_NONE: none <br/>
 OBFF_LOGLVL_LOW: step number, energy and energy for the previous step <br/>
 OBFF_LOGLVL_MEDIUM: see note above <br/>
 OBFF_LOGLVL_HIGH: see note above <br/>
 </dd></dl>

</div>
</div>
<a class="anchor" id="ae9f7de4324a4a476ca0663772c1a6bfa"></a><!-- doxytag: member="OpenBabel::OBForceField::GenerateVelocities" ref="ae9f7de4324a4a476ca0663772c1a6bfa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GenerateVelocities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Generate starting velocities with a Maxwellian distribution. </p>

</div>
</div>
<a class="anchor" id="a8c466035b972dddd7f5ebd27f04f685b"></a><!-- doxytag: member="OpenBabel::OBForceField::CorrectVelocities" ref="a8c466035b972dddd7f5ebd27f04f685b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CorrectVelocities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Correct the velocities so that the following is true:</p>
<div class="fragment"><pre class="fragment">        3N
       ----
  0.5  \    m_i * v_i^2 = 0.5 * Ndf * kB * <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a> = E_kin
       /
       ----
       i=1

  E_kin : kinetic energy
  m_i : mass of atom i
  v_i : velocity of atom i
  Ndf : number of degrees of freedom (3 * number of atoms)
  kB : Boltzmann<span class="stringliteral">&#39;s constant</span>
<span class="stringliteral">  T : temperature</span>
</pre></div> 
</div>
</div>
<a class="anchor" id="a52ae121410bc166d73eb4200f6127842"></a><!-- doxytag: member="OpenBabel::OBForceField::MolecularDynamicsTakeNSteps" ref="a52ae121410bc166d73eb4200f6127842" args="(int n, double T, double timestep=0.001, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void MolecularDynamicsTakeNSteps </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>timestep</em> = <code>0.001</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Take n steps at temperature T. If no velocities are set, they will be generated.</p>
<p>example: </p>
<div class="fragment"><pre class="fragment">  <span class="comment">// pFF is a pointer to a OBForceField class</span>
  <span class="keywordflow">while</span> (pFF-&gt;MolecularDynamicsTakeNSteps(5, 300)) {
    <span class="comment">// do some updating in your program (redraw structure, ...)</span>
  }
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>The number of steps to take. </td></tr>
    <tr><td class="paramname">T</td><td>Absolute temperature in Kelvin. </td></tr>
    <tr><td class="paramname">timestep</td><td>The time step in picoseconds. (10e-12 s) </td></tr>
    <tr><td class="paramname">method</td><td>OBFF_ANALYTICAL_GRADIENTS (default) or OBFF_NUMERICAL_GRADIENTS </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6b49b3a0f1e2f4b950c61971c2eda257"></a><!-- doxytag: member="OpenBabel::OBForceField::GetConstraints" ref="a6b49b3a0f1e2f4b950c61971c2eda257" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp; GetConstraints </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the current constraints. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The current constrains stored in the force field. </dd></dl>

</div>
</div>
<a class="anchor" id="ac97dee57cf1c5abbbddff62294a01c3b"></a><!-- doxytag: member="OpenBabel::OBForceField::SetConstraints" ref="ac97dee57cf1c5abbbddff62294a01c3b" args="(OBFFConstraints &amp;constraints)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConstraints </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> &amp;&#160;</td>
          <td class="paramname"><em>constraints</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the constraints. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">constraints</td><td>The new constraints to be used. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a285bcf84b82ad8ce98fedfdf845fd29a"></a><!-- doxytag: member="OpenBabel::OBForceField::SetFixAtom" ref="a285bcf84b82ad8ce98fedfdf845fd29a" args="(int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFixAtom </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Fix the atom position until <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6df5d9cd111137994ae597f611ab5d2e">UnsetFixAtom()</a> is called. This function can be used in programs that allow the user to interact with a molecule that is being minimized without having to check if the atom is already fixed in the constraints set by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> or <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac97dee57cf1c5abbbddff62294a01c3b">SetConstraints()</a>. Using this makes sure the selected atom follows the mouse cursur. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index for the atom to fix. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6df5d9cd111137994ae597f611ab5d2e"></a><!-- doxytag: member="OpenBabel::OBForceField::UnsetFixAtom" ref="a6df5d9cd111137994ae597f611ab5d2e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFixAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Undo last SetFixAtom. This function will not remove the fix atom constraint for this atom if set by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> or <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac97dee57cf1c5abbbddff62294a01c3b">SetConstraints()</a>. </p>

</div>
</div>
<a class="anchor" id="adff150aaabc20d030d023fabc67a8936"></a><!-- doxytag: member="OpenBabel::OBForceField::SetIgnoreAtom" ref="adff150aaabc20d030d023fabc67a8936" args="(int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetIgnoreAtom </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Ignore the atom until <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a190fd6af7b60752a48c3c95fbcf41697">UnsetIgnoreAtom()</a> is called. This function can be used in programs that allow the user to interact with a molecule that is being minimized without having to check if the atom is already ignored in the constraints set by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> or <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac97dee57cf1c5abbbddff62294a01c3b">SetConstraints()</a>. Using this makes sure, in drawing mode, you can close rings without your newly created puching the other atoms away. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>The index for the atom to ignore. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a190fd6af7b60752a48c3c95fbcf41697"></a><!-- doxytag: member="OpenBabel::OBForceField::UnsetIgnoreAtom" ref="a190fd6af7b60752a48c3c95fbcf41697" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetIgnoreAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Undo last SetIgnoreAtom. This function will not remove the ignore atom constraint for this atom if set by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">Setup()</a> or <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac97dee57cf1c5abbbddff62294a01c3b">SetConstraints()</a>. </p>

</div>
</div>
<a class="anchor" id="a1a15aa0fc35de803cb02fd0d76931742"></a><!-- doxytag: member="OpenBabel::OBForceField::IgnoreCalculation" ref="a1a15aa0fc35de803cb02fd0d76931742" args="(int a, int b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IgnoreCalculation </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>internal function </p>

</div>
</div>
<a class="anchor" id="a642f86408aa78a8909e2661cf34e7460"></a><!-- doxytag: member="OpenBabel::OBForceField::IgnoreCalculation" ref="a642f86408aa78a8909e2661cf34e7460" args="(int a, int b, int c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IgnoreCalculation </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>internal function </p>

</div>
</div>
<a class="anchor" id="a07190ce19050974e8344af32f874aece"></a><!-- doxytag: member="OpenBabel::OBForceField::IgnoreCalculation" ref="a07190ce19050974e8344af32f874aece" args="(int a, int b, int c, int d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IgnoreCalculation </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>internal function </p>

</div>
</div>
<a class="anchor" id="a0d97557b9f37191cce473fbfd4636a54"></a><!-- doxytag: member="OpenBabel::OBForceField::DetectExplosion" ref="a0d97557b9f37191cce473fbfd4636a54" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DetectExplosion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>(debugging) </p>

</div>
</div>
<a class="anchor" id="ac6e66726b2becbbccf39e6d4ecf6ae2e"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateLineSearch" ref="ac6e66726b2becbbccf39e6d4ecf6ae2e" args="(OBAtom *atom, vector3 &amp;direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> ValidateLineSearch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>direction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>(debugging) </p>

</div>
</div>
<a class="anchor" id="a837dd6b4440b4fe77f23976bbdaa64a3"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateSteepestDescent" ref="a837dd6b4440b4fe77f23976bbdaa64a3" args="(int steps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateSteepestDescent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>(debugging) </p>

</div>
</div>
<a class="anchor" id="a91538863099a02a981364ad66f47f4e8"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateConjugateGradients" ref="a91538863099a02a981364ad66f47f4e8" args="(int steps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateConjugateGradients </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>steps</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>(debugging) </p>

</div>
</div>
<a class="anchor" id="a591a6c018926edaa3f398ca7134e26c9"></a><!-- doxytag: member="OpenBabel::OBForceField::Validate" ref="a591a6c018926edaa3f398ca7134e26c9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Validate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Validate the force field implementation (debugging) </p>

</div>
</div>
<a class="anchor" id="a5bd73ca104b0fd34659d77a7f9d3a0a4"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateGradients" ref="a5bd73ca104b0fd34659d77a7f9d3a0a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ValidateGradients </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Validate the analytical gradients by comparing them to numerical ones. This function has to be implemented force field specific. (debugging) </p>

</div>
</div>
<a class="anchor" id="ae517465b4ca745841c28cf22db304a7f"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateGradientError" ref="ae517465b4ca745841c28cf22db304a7f" args="(vector3 &amp;numgrad, vector3 &amp;anagrad)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> ValidateGradientError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>numgrad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>anagrad</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the error of the analytical gradient (debugging) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>error = fabs(numgrad - anagrad) / anagrad * 100% </dd></dl>

</div>
</div>
<a class="anchor" id="ab4c518f64fa1e22d82ed6da82d14e4e3"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorBondDerivative" ref="ab4c518f64fa1e22d82ed6da82d14e4e3" args="(double *pos_a, double *pos_b, double *force_a, double *force_b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorBondDerivative </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the derivative of a vector length. The vector is given by a - b, the length of this vector rab = sqrt(ab.x^2 + ab.y^2 + ab.z^2). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos_a</td><td>atom a (coordinates) </td></tr>
    <tr><td class="paramname">pos_b</td><td>atom b (coordinates) </td></tr>
    <tr><td class="paramname">force_a</td><td>- return value for the force on atom a </td></tr>
    <tr><td class="paramname">force_b</td><td>- return value for the force on atom b </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The distance between a and b (bondlength for bond stretching, separation for vdw, electrostatic) </dd></dl>

</div>
</div>
<a class="anchor" id="a974238716b14999015e8150dacba1037"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorDistanceDerivative" ref="a974238716b14999015e8150dacba1037" args="(const double *const pos_i, const double *const pos_j, double *force_i, double *force_j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorDistanceDerivative </td>
          <td>(</td>
          <td class="paramtype">const double *const&#160;</td>
          <td class="paramname"><em>pos_i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *const&#160;</td>
          <td class="paramname"><em>pos_j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>To be used for VDW or Electrostatic interactions. This is faster than VectorBondDerivative, but does no error checking. </p>

</div>
</div>
<a class="anchor" id="ab451a524c7a4f04bb987b3fac9288eed"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorLengthDerivative" ref="ab451a524c7a4f04bb987b3fac9288eed" args="(vector3 &amp;a, vector3 &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorLengthDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000041">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a class="anchor" id="a6c5b48194a0edecff825f246b645d44c"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorAngleDerivative" ref="a6c5b48194a0edecff825f246b645d44c" args="(double *pos_a, double *pos_b, double *pos_c, double *force_a, double *force_b, double *force_c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorAngleDerivative </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the derivative of a angle a-b-c. The angle is given by dot(ab,cb)/rab*rcb. Used for harmonic (cubic) angle potentials. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos_a</td><td>atom a (coordinates) </td></tr>
    <tr><td class="paramname">pos_b</td><td>atom b (coordinates) </td></tr>
    <tr><td class="paramname">pos_c</td><td>atom c (coordinates) </td></tr>
    <tr><td class="paramname">force_a</td><td>- return value for the force on atom a </td></tr>
    <tr><td class="paramname">force_b</td><td>- return value for the force on atom b </td></tr>
    <tr><td class="paramname">force_c</td><td>- return value for the force on atom c </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The angle between a-b-c </dd></dl>

</div>
</div>
<a class="anchor" id="afe981b8f96a737d0228fbf62c4c94417"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorAngleDerivative" ref="afe981b8f96a737d0228fbf62c4c94417" args="(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorAngleDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000042">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a class="anchor" id="a0d4f489e2b0ba2fd1e4a220cebf93f1c"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorOOPDerivative" ref="a0d4f489e2b0ba2fd1e4a220cebf93f1c" args="(double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorOOPDerivative </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the derivative of a OOP angle a-b-c-d. b is the central atom, and a-b-c is the plane. The OOP angle is given by 90° - arccos(dot(corss(ab,cb),db)/rabbc*rdb). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos_a</td><td>atom a (coordinates) </td></tr>
    <tr><td class="paramname">pos_b</td><td>atom b (coordinates) </td></tr>
    <tr><td class="paramname">pos_c</td><td>atom c (coordinates) </td></tr>
    <tr><td class="paramname">pos_d</td><td>atom d (coordinates) </td></tr>
    <tr><td class="paramname">force_a</td><td>- return value for the force on atom a </td></tr>
    <tr><td class="paramname">force_b</td><td>- return value for the force on atom b </td></tr>
    <tr><td class="paramname">force_c</td><td>- return value for the force on atom c </td></tr>
    <tr><td class="paramname">force_d</td><td>- return value for the force on atom d </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The OOP angle for a-b-c-d </dd></dl>

</div>
</div>
<a class="anchor" id="a4b7e7649d0928a2cb6a2123e3e4dec6f"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorOOPDerivative" ref="a4b7e7649d0928a2cb6a2123e3e4dec6f" args="(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c, vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorOOPDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000043">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a class="anchor" id="aef595f8b6deb9c2213321352db467e98"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorTorsionDerivative" ref="aef595f8b6deb9c2213321352db467e98" args="(double *pos_a, double *pos_b, double *pos_c, double *pos_d, double *force_a, double *force_b, double *force_c, double *force_d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorTorsionDerivative </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>force_d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the derivative of a torsion angle a-b-c-d. The torsion angle is given by arccos(dot(corss(ab,bc),cross(bc,cd))/rabbc*rbccd). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos_a</td><td>atom a (coordinates) </td></tr>
    <tr><td class="paramname">pos_b</td><td>atom b (coordinates) </td></tr>
    <tr><td class="paramname">pos_c</td><td>atom c (coordinates) </td></tr>
    <tr><td class="paramname">pos_d</td><td>atom d (coordinates) </td></tr>
    <tr><td class="paramname">force_a</td><td>- return value for the force on atom a </td></tr>
    <tr><td class="paramname">force_b</td><td>- return value for the force on atom b </td></tr>
    <tr><td class="paramname">force_c</td><td>- return value for the force on atom c </td></tr>
    <tr><td class="paramname">force_d</td><td>- return value for the force on atom d </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The tosion angle for a-b-c-d </dd></dl>

</div>
</div>
<a class="anchor" id="a4d4709cf0de47e7c6f44da4e21f20c9f"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorTorsionDerivative" ref="a4d4709cf0de47e7c6f44da4e21f20c9f" args="(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c, vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorTorsionDerivative </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000044">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a class="anchor" id="ad88b7a26afc5f8b478e299a96d555f14"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorSubtract" ref="ad88b7a26afc5f8b478e299a96d555f14" args="(double *i, double *j, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorSubtract </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">result</td><td>pointer to result[3], will be set to i - j </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a19395cf2512e5b3af33f4ea603c18436"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorSubtract" ref="a19395cf2512e5b3af33f4ea603c18436" args="(const double *const i, const double *const j, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorSubtract </td>
          <td>(</td>
          <td class="paramtype">const double *const&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *const&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a34e901932f48c16a06929d7da9308b98"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorAdd" ref="a34e901932f48c16a06929d7da9308b98" args="(double *i, double *j, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorAdd </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">result</td><td>pointer to result[3], will be set to i + j </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac9d079c742232c33bc668f09135ab1a5"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorDivide" ref="ac9d079c742232c33bc668f09135ab1a5" args="(double *i, double n, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorDivide </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">n</td><td>divide x,y,z with n </td></tr>
    <tr><td class="paramname">result</td><td>pointer to result[3] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3db6d00549c9448579509d878735ec0"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorMultiply" ref="ad3db6d00549c9448579509d878735ec0" args="(double *i, double n, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorMultiply </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">n</td><td>multiply x,y,z with n </td></tr>
    <tr><td class="paramname">result</td><td>pointer to result[3] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a33ebd98d01af8308d5b4f0cf0ef3b151"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorMultiply" ref="a33ebd98d01af8308d5b4f0cf0ef3b151" args="(const double *const i, const double n, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorMultiply </td>
          <td>(</td>
          <td class="paramtype">const double *const&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2bd8889c439dd81f3492d409f27e80d4"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorSelfMultiply" ref="a2bd8889c439dd81f3492d409f27e80d4" args="(double *i, double n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorSelfMultiply </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3], multiply this vector by n and set this vector to the result. </td></tr>
    <tr><td class="paramname">n</td><td>the scalar value to be multipled </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a09521bcec46ef53d75215305755a911d"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorNormalize" ref="a09521bcec46ef53d75215305755a911d" args="(double *i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorNormalize </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] to be normalized </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a12db497d1100ca5a0620ba2076581a63"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorCopy" ref="a12db497d1100ca5a0620ba2076581a63" args="(double *from, double *to)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorCopy </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">from</td><td>pointer to i[3] to be copied from </td></tr>
    <tr><td class="paramname">to</td><td>pointer to j[3] to be copied to </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afa91d516c7ab5c44d0443c15deb62910"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorLength" ref="afa91d516c7ab5c44d0443c15deb62910" args="(double *i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double VectorLength </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector length </dd></dl>

</div>
</div>
<a class="anchor" id="a655c6950fb947600a4ffcbbf5f53fc18"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorDistance" ref="a655c6950fb947600a4ffcbbf5f53fc18" args="(double *pos_i, double *pos_j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double VectorDistance </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>pos_j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a66aab9d4399b8502d330872181f51429"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorAngle" ref="a66aab9d4399b8502d330872181f51429" args="(double *i, double *j, double *k)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>k</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">k</td><td>pointer to k[3] </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector angle ijk (deg) </dd></dl>

</div>
</div>
<a class="anchor" id="a5a156d1eea0507509cbb7f245999a31b"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorTorsion" ref="a5a156d1eea0507509cbb7f245999a31b" args="(double *i, double *j, double *k, double *l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorTorsion </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>k</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>l</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">k</td><td>pointer to k[3] </td></tr>
    <tr><td class="paramname">l</td><td>pointer to l[3] </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector torson ijkl (deg) </dd></dl>

</div>
</div>
<a class="anchor" id="af031c62775e4d3374c0504d7af515ee0"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorOOP" ref="af031c62775e4d3374c0504d7af515ee0" args="(double *i, double *j, double *k, double *l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorOOP </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>k</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>l</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">k</td><td>pointer to k[3] </td></tr>
    <tr><td class="paramname">l</td><td>pointer to l[3] </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector torson ijkl (deg) </dd></dl>

</div>
</div>
<a class="anchor" id="ae9651eef486a9afd00ef38c972df90f8"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorClear" ref="ae9651eef486a9afd00ef38c972df90f8" args="(double *i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorClear </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3], will set x,y,z to 0,0,0 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a847a262329a92da08c099830a8431a48"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorDot" ref="a847a262329a92da08c099830a8431a48" args="(double *i, double *j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double VectorDot </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the dot product </dd></dl>

</div>
</div>
<a class="anchor" id="a814fd94395b7e2dfe95d78c11eb2a004"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorCross" ref="a814fd94395b7e2dfe95d78c11eb2a004" args="(double *i, double *j, double *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void VectorCross </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>inline fuction to speed up minimization speed </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>pointer to i[3] </td></tr>
    <tr><td class="paramname">j</td><td>pointer to j[3] </td></tr>
    <tr><td class="paramname">result</td><td>the dot product (as a return value double[3]) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a336e29059a710e30d98a0d9898a10c63"></a><!-- doxytag: member="OpenBabel::OBForceField::PrintVector" ref="a336e29059a710e30d98a0d9898a10c63" args="(double *i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void PrintVector </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a5ae66d31df78d115efc8282c8c695c1a"></a><!-- doxytag: member="OpenBabel::OBForceField::_mol" ref="a5ae66d31df78d115efc8282c8c695c1a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a">_mol</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Molecule to be evaluated or minimized. </p>

</div>
</div>
<a class="anchor" id="a40756214f69d1c40ad70b64ae9fdc08d"></a><!-- doxytag: member="OpenBabel::OBForceField::_init" ref="a40756214f69d1c40ad70b64ae9fdc08d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a40756214f69d1c40ad70b64ae9fdc08d">_init</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Used to make sure we only parse the parameter file once, when needed. </p>

</div>
</div>
<a class="anchor" id="a0ad96c121eb2ab3291c9f348f3e66eb4"></a><!-- doxytag: member="OpenBabel::OBForceField::_parFile" ref="a0ad96c121eb2ab3291c9f348f3e66eb4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a0ad96c121eb2ab3291c9f348f3e66eb4">_parFile</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2d0a817f871831bed3e700ff65bd32ab"></a><!-- doxytag: member="OpenBabel::OBForceField::_validSetup" ref="a2d0a817f871831bed3e700ff65bd32ab" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2d0a817f871831bed3e700ff65bd32ab">_validSetup</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>&lt; parameter file name </p>
<p>was the last call to Setup succesfull </p>

</div>
</div>
<a class="anchor" id="aa1d49201f58bfcceb6d47593bf360bcd"></a><!-- doxytag: member="OpenBabel::OBForceField::_gradientPtr" ref="aa1d49201f58bfcceb6d47593bf360bcd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa1d49201f58bfcceb6d47593bf360bcd">_gradientPtr</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>pointer to the gradients (used by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab0b5fe1f004e97857de0cf641b5e3789">AddGradient()</a>, minimization functions, ...) </p>

</div>
</div>
<a class="anchor" id="aa5950d373df53720595c030d3db04397"></a><!-- doxytag: member="OpenBabel::OBForceField::_logos" ref="aa5950d373df53720595c030d3db04397" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa5950d373df53720595c030d3db04397">_logos</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output for logfile. </p>

</div>
</div>
<a class="anchor" id="a158daac1f91a0b0efd242be1bd7c30e4"></a><!-- doxytag: member="OpenBabel::OBForceField::_logbuf" ref="a158daac1f91a0b0efd242be1bd7c30e4" args="[BUFF_SIZE+1]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a158daac1f91a0b0efd242be1bd7c30e4">_logbuf</a>[BUFF_SIZE+1]<code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Temporary buffer for logfile output. </p>

</div>
</div>
<a class="anchor" id="a4e929e2f2b2aeb818341fff4bc1d73d0"></a><!-- doxytag: member="OpenBabel::OBForceField::_loglvl" ref="a4e929e2f2b2aeb818341fff4bc1d73d0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4e929e2f2b2aeb818341fff4bc1d73d0">_loglvl</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Log level for output. </p>

</div>
</div>
<a class="anchor" id="a122d15094b107a94e4359e67e0e1f539"></a><!-- doxytag: member="OpenBabel::OBForceField::_origLogLevel" ref="a122d15094b107a94e4359e67e0e1f539" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a122d15094b107a94e4359e67e0e1f539">_origLogLevel</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab95ae5a13edb24f5d32b01e2098f26df"></a><!-- doxytag: member="OpenBabel::OBForceField::_current_conformer" ref="ab95ae5a13edb24f5d32b01e2098f26df" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab95ae5a13edb24f5d32b01e2098f26df">_current_conformer</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>used to hold i for current conformer (needed by UpdateConformers) </p>

</div>
</div>
<a class="anchor" id="a7b2ba72f54b74909a53a0548cdf44ce2"></a><!-- doxytag: member="OpenBabel::OBForceField::_energies" ref="a7b2ba72f54b74909a53a0548cdf44ce2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7b2ba72f54b74909a53a0548cdf44ce2">_energies</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>used to hold the energies for all conformers </p>

</div>
</div>
<a class="anchor" id="a47292a5e3cad98d5a169bd2c54103d66"></a><!-- doxytag: member="OpenBabel::OBForceField::_econv" ref="a47292a5e3cad98d5a169bd2c54103d66" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a47292a5e3cad98d5a169bd2c54103d66">_econv</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad33cee0e99c32beb8f2b8b05248a085f"></a><!-- doxytag: member="OpenBabel::OBForceField::_e_n1" ref="ad33cee0e99c32beb8f2b8b05248a085f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad33cee0e99c32beb8f2b8b05248a085f">_e_n1</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Used for conjugate gradients and steepest descent(Initialize and TakeNSteps) </p>

</div>
</div>
<a class="anchor" id="ac7f362c839a5c13c37dcbd43b426516b"></a><!-- doxytag: member="OpenBabel::OBForceField::_cstep" ref="ac7f362c839a5c13c37dcbd43b426516b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac7f362c839a5c13c37dcbd43b426516b">_cstep</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afe138e40e061c04494421e5513829b37"></a><!-- doxytag: member="OpenBabel::OBForceField::_nsteps" ref="afe138e40e061c04494421e5513829b37" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe138e40e061c04494421e5513829b37">_nsteps</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Used for conjugate gradients and steepest descent(Initialize and TakeNSteps) </p>

</div>
</div>
<a class="anchor" id="a1c24fef8a19cd43ec17f25b026570ad4"></a><!-- doxytag: member="OpenBabel::OBForceField::_grad1" ref="a1c24fef8a19cd43ec17f25b026570ad4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1c24fef8a19cd43ec17f25b026570ad4">_grad1</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Used for conjugate gradients and steepest descent(Initialize and TakeNSteps) </p>

</div>
</div>
<a class="anchor" id="ab39c453046b3d76a24615c0f4ddb5dc4"></a><!-- doxytag: member="OpenBabel::OBForceField::_ncoords" ref="ab39c453046b3d76a24615c0f4ddb5dc4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab39c453046b3d76a24615c0f4ddb5dc4">_ncoords</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of coordinates for conjugate gradients. </p>

</div>
</div>
<a class="anchor" id="afb076d7d251019d009f919e41161d004"></a><!-- doxytag: member="OpenBabel::OBForceField::_linesearch" ref="afb076d7d251019d009f919e41161d004" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afb076d7d251019d009f919e41161d004">_linesearch</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>LineSearch type. </p>

</div>
</div>
<a class="anchor" id="a74c5643406e1d2fc9a8ec5a64a746d6f"></a><!-- doxytag: member="OpenBabel::OBForceField::_timestep" ref="a74c5643406e1d2fc9a8ec5a64a746d6f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a74c5643406e1d2fc9a8ec5a64a746d6f">_timestep</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Molecular dynamics time step in picoseconds. </p>

</div>
</div>
<a class="anchor" id="a21c5ecf3204a9907236f7596268a76a1"></a><!-- doxytag: member="OpenBabel::OBForceField::_temp" ref="a21c5ecf3204a9907236f7596268a76a1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a21c5ecf3204a9907236f7596268a76a1">_temp</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Molecular dynamics temperature in Kelvin. </p>

</div>
</div>
<a class="anchor" id="a60c161177d9d80020f3a42d8f5ad2a97"></a><!-- doxytag: member="OpenBabel::OBForceField::_velocityPtr" ref="a60c161177d9d80020f3a42d8f5ad2a97" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a60c161177d9d80020f3a42d8f5ad2a97">_velocityPtr</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>pointer to the velocities </p>

</div>
</div>
<a class="anchor" id="a22f844c60684776be9d47109855e16de"></a><!-- doxytag: member="OpenBabel::OBForceField::_constraints" ref="a22f844c60684776be9d47109855e16de" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a> <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a22f844c60684776be9d47109855e16de">_constraints</a> = <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a>()<code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constraints. </p>

</div>
</div>
<a class="anchor" id="ad7d6ee4569e450185c8e229aa405e138"></a><!-- doxytag: member="OpenBabel::OBForceField::_fixAtom" ref="ad7d6ee4569e450185c8e229aa405e138" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad7d6ee4569e450185c8e229aa405e138">_fixAtom</a> = 0<code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a285bcf84b82ad8ce98fedfdf845fd29a">SetFixAtom()</a>/UnsetFixAtom() </p>

</div>
</div>
<a class="anchor" id="a1a201141d98a5e271d02d2a083bc3a0f"></a><!-- doxytag: member="OpenBabel::OBForceField::_ignoreAtom" ref="a1a201141d98a5e271d02d2a083bc3a0f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1a201141d98a5e271d02d2a083bc3a0f">_ignoreAtom</a> = 0<code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classOpenBabel_1_1OBForceField.shtml#adff150aaabc20d030d023fabc67a8936">SetIgnoreAtom()</a>/UnsetIgnoreAtom() </p>

</div>
</div>
<a class="anchor" id="a6664339ecef04e70cd97a0a5738b99c3"></a><!-- doxytag: member="OpenBabel::OBForceField::_cutoff" ref="a6664339ecef04e70cd97a0a5738b99c3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6664339ecef04e70cd97a0a5738b99c3">_cutoff</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>true = cut-off enabled </p>

</div>
</div>
<a class="anchor" id="a1eab6cf4abedfa50bd898b5d8394586a"></a><!-- doxytag: member="OpenBabel::OBForceField::_rvdw" ref="a1eab6cf4abedfa50bd898b5d8394586a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1eab6cf4abedfa50bd898b5d8394586a">_rvdw</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>VDW cut-off distance. </p>

</div>
</div>
<a class="anchor" id="a1cb4961672fc9fdbbcc6f77f10328124"></a><!-- doxytag: member="OpenBabel::OBForceField::_rele" ref="a1cb4961672fc9fdbbcc6f77f10328124" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a1cb4961672fc9fdbbcc6f77f10328124">_rele</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Electrostatic cut-off distance. </p>

</div>
</div>
<a class="anchor" id="acf019f5fea50c00abe4a8eceb1ebefd0"></a><!-- doxytag: member="OpenBabel::OBForceField::_vdwpairs" ref="acf019f5fea50c00abe4a8eceb1ebefd0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="el" href="classOpenBabel_1_1OBForceField.shtml#acf019f5fea50c00abe4a8eceb1ebefd0">_vdwpairs</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>VDW pairs that should be calculated. </p>

</div>
</div>
<a class="anchor" id="a304e7d6e8b9b55195148d8ce241c4231"></a><!-- doxytag: member="OpenBabel::OBForceField::_elepairs" ref="a304e7d6e8b9b55195148d8ce241c4231" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a304e7d6e8b9b55195148d8ce241c4231">_elepairs</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Electrostatic pairs that should be calculated. </p>

</div>
</div>
<a class="anchor" id="a6daefdab547529f4ddee1b729085df82"></a><!-- doxytag: member="OpenBabel::OBForceField::_pairfreq" ref="a6daefdab547529f4ddee1b729085df82" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6daefdab547529f4ddee1b729085df82">_pairfreq</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The frequence to update non-bonded pairs. </p>

</div>
</div>
<a class="anchor" id="ad73a3ddc8c65a31256666ba5cd10fcf3"></a><!-- doxytag: member="OpenBabel::OBForceField::_intraGroup" ref="ad73a3ddc8c65a31256666ba5cd10fcf3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad73a3ddc8c65a31256666ba5cd10fcf3">_intraGroup</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>groups for which intra-molecular interactions should be calculated </p>

</div>
</div>
<a class="anchor" id="a6212b1ca8ff39273ec120c20524deba4"></a><!-- doxytag: member="OpenBabel::OBForceField::_interGroup" ref="a6212b1ca8ff39273ec120c20524deba4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6212b1ca8ff39273ec120c20524deba4">_interGroup</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>groups for which intra-molecular interactions should be calculated </p>

</div>
</div>
<a class="anchor" id="ab3487cbb18bbd78d58a4afa84d65beb4"></a><!-- doxytag: member="OpenBabel::OBForceField::_interGroups" ref="ab3487cbb18bbd78d58a4afa84d65beb4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::pair&lt;<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&gt; &gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab3487cbb18bbd78d58a4afa84d65beb4">_interGroups</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>groups for which intra-molecular interactions should be calculated </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="forcefield_8h_source.shtml">forcefield.h</a></li>
<li><a class="el" href="forcefield_8cpp.shtml">forcefield.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:10 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
