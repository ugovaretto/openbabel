<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBIsomorphismMapper Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBIsomorphismMapper Class Reference<div class="ingroups"><a class="el" href="group__substructure.shtml">Substructure Searching</a></div></div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBIsomorphismMapper" -->
<p><code>#include &lt;<a class="el" href="isomorphism_8h_source.shtml">openbabel/isomorphism.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBIsomorphismMapper:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBIsomorphismMapper__inherit__graph.png" border="0" usemap="#OBIsomorphismMapper_inherit__map" alt="Inheritance graph"/></div>
<map name="OBIsomorphismMapper_inherit__map" id="OBIsomorphismMapper_inherit__map">
</map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBIsomorphismMapper-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml">Functor</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml" title="Functor base class to be used in combination with MapGeneric.">Functor</a> base class to be used in combination with MapGeneric.  <a href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; std::pair<br class="typebreak"/>
&lt; unsigned int, unsigned int &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">Mapping</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">Mapping</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a9bf7837f3f721213fa343691e63eae5b">OBIsomorphismMapper</a> (<a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *query)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a6713b2cb5a577f1ca475218733158aa9">~OBIsomorphismMapper</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a1008754c556920726558c9ff4364a2b9">MapFirst</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *queried, <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">Mapping</a> &amp;map, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#ae7aeea6f463896e9de5ac36bb72ebd0f">MapUnique</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *queried, <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a> &amp;maps, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#afc1d4e5ff69ad9f3854601e0a7d5e6d8">MapAll</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *queried, <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a> &amp;maps, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), std::size_t maxMemory=3000000)=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a54d090b64d4101064d7614cf81d7decf">MapGeneric</a> (<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml">Functor</a> &amp;functor, const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *queried, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a3f1b7a8e3d742835665503376bf8643d">SetTimeout</a> (unsigned int seconds)</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a89cf32c6e6d4f6fce6a61a3e70cd2a39">GetInstance</a> (<a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *query, const std::string &amp;algorithm=std::string(&quot;VF2&quot;))</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a095cd6b4cbaab0cba9c46ea592ed899c">m_query</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#acda4225670d6511a6b4055aa91a387f9">m_timeout</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Abstract class defining interface for isomorphism (i.e. substructure) searches. </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 The OBIsomorphism class is an abstract class which defines an interface for performing isomorphism (i.e. substructure) searches. It uses a <a class="el" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a> and tries to map this onto a queried <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>. A single mapping is represented by a <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> which is a std::map mapping query indexes to queried indexes. Both query and queried indexes in the map start from 0. Multiple mappings can be stored in a <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">OBIsomorphismMapper::Mappings</a> object which is a std::vector of <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml" title="Abstract class defining interface for isomorphism (i.e. substructure) searches.">OBIsomorphismMapper</a> objects.</dd></dl>
<p>Since this is an abstract class with pure virtual methods, this class can't be instantiated directly. To get a pointer to a subclass, the <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a89cf32c6e6d4f6fce6a61a3e70cd2a39">GetInstance()</a> method can be used which also sets the query. Once an instance is obtained, the desired mapping function can be used to perform the mapping (i.e. <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a1008754c556920726558c9ff4364a2b9">MapFirst()</a>, <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#ae7aeea6f463896e9de5ac36bb72ebd0f">MapUnique()</a> or <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#afc1d4e5ff69ad9f3854601e0a7d5e6d8">MapAll()</a>).</p>
<p>A typical example: </p>
<div class="fragment"><pre class="fragment"> OBMol *queried;
 <span class="comment">// ... initialize queried ...</span>
 OBQuery *query = <a class="code" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">CompileSmilesQuery</a>(<span class="stringliteral">&quot;c1ccccc1&quot;</span>);
 <a class="code" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a9bf7837f3f721213fa343691e63eae5b">OBIsomorphismMapper</a> *mapper = <a class="code" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a89cf32c6e6d4f6fce6a61a3e70cd2a39">OBIsomorphismMapper::GetInstance</a>(query);
 <a class="code" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">OBIsomorphismMapper::Mappings</a> maps = mapper-&gt;MapUnique(mol);

 std::cout &lt;&lt; <span class="stringliteral">&quot;found &quot;</span> &lt;&lt; maps.size() &lt;&lt; <span class="stringliteral">&quot; unique mappings&quot;</span> &lt;&lt; std::endl;

 <span class="keyword">delete</span> mapper;
 <span class="keyword">delete</span> query;
</pre></div><p>All mapping methods take an optional mask parameter. This can be used to restrict the search to a part of the queried <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>. The masked atoms in the <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> are indexed from 1. A special case of isomorphism search is an automorphism search where the query and queried molecule are the same. Automorphism searches can be done using the MapAll method but an additional <a class="el" href="group__substructure.shtml#ga16841a730cf92c8e51a804ad8d746307">FindAutomorphisms()</a> function is provided for convenience. </p>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="a97df663c0fc8a3ba6e9113802cac5c82"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::Mapping" ref="a97df663c0fc8a3ba6e9113802cac5c82" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">Mapping</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type for an individual mapping. </p>

</div>
</div>
<a class="anchor" id="af45ae29000944170414da618d8d5d677"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::Mappings" ref="af45ae29000944170414da618d8d5d677" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &gt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Type for a collection (std::vector) of Mapping objects. </p>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9bf7837f3f721213fa343691e63eae5b"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::OBIsomorphismMapper" ref="a9bf7837f3f721213fa343691e63eae5b" args="(OBQuery *query)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td>
          <td class="paramname"><em>query</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Constructor. <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml" title="Abstract class defining interface for isomorphism (i.e. substructure) searches.">OBIsomorphismMapper</a> is an abstract class, use <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a89cf32c6e6d4f6fce6a61a3e70cd2a39">GetInstance()</a> to get an instance of a derived class. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">query</td><td>The search query. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6713b2cb5a577f1ca475218733158aa9"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::~OBIsomorphismMapper" ref="a6713b2cb5a577f1ca475218733158aa9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a89cf32c6e6d4f6fce6a61a3e70cd2a39"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::GetInstance" ref="a89cf32c6e6d4f6fce6a61a3e70cd2a39" args="(OBQuery *query, const std::string &amp;algorithm=std::string(&quot;VF2&quot;))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a> * GetInstance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>algorithm</em> = <code>std::string(&quot;VF2&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get a pointer to an instance of the specified <code>algorithm</code>. This pointer has to be delted when the instance is no longer needed. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">query</td><td>The search query to be mapped. </td></tr>
    <tr><td class="paramname">algorithm</td><td>The algorithm for the mapper. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml" title="Abstract class defining interface for isomorphism (i.e. substructure) searches.">OBIsomorphismMapper</a> instance or 0 if there is no subclass implementing the specified <code>algorithm</code>. </dd></dl>

<p>Referenced by <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">OpenBabel::FindAutomorphisms()</a>.</p>

</div>
</div>
<a class="anchor" id="a1008754c556920726558c9ff4364a2b9"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::MapFirst" ref="a1008754c556920726558c9ff4364a2b9" args="(const OBMol *queried, Mapping &amp;map, const OBBitVec &amp;mask=OBBitVec())=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void MapFirst </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>queried</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">Mapping</a> &amp;&#160;</td>
          <td class="paramname"><em>map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find a single mapping in <code>queried</code>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">queried</td><td>The molecule to search. </td></tr>
    <tr><td class="paramname">map</td><td>Reference to the object to store the result in. </td></tr>
    <tr><td class="paramname">mask</td><td>A mask to restrict the search to a part of the queried molecule. The default empty mask will result in all atoms being considered. The mask indexes start from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae7aeea6f463896e9de5ac36bb72ebd0f"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::MapUnique" ref="ae7aeea6f463896e9de5ac36bb72ebd0f" args="(const OBMol *queried, Mappings &amp;maps, const OBBitVec &amp;mask=OBBitVec())=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void MapUnique </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>queried</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a> &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find all unique mappings in <code>queried</code>. A mapping is unique when there is no previous mapping covering the same queried atoms. For two mappings, some overlap is allowed but at least one atom should be different. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">queried</td><td>The molecule to search. </td></tr>
    <tr><td class="paramname">maps</td><td>Reference to the object to store the results in. </td></tr>
    <tr><td class="paramname">mask</td><td>A mask to restrict the search to a part of the queried molecule. The default empty mask will result in all atoms being considered. The mask indexes start from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afc1d4e5ff69ad9f3854601e0a7d5e6d8"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::MapAll" ref="afc1d4e5ff69ad9f3854601e0a7d5e6d8" args="(const OBMol *queried, Mappings &amp;maps, const OBBitVec &amp;mask=OBBitVec(), std::size_t maxMemory=3000000)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void MapAll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>queried</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">Mappings</a> &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>maxMemory</em> = <code>3000000</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find all mappings in <code>queried</code>. This function is used by <a class="el" href="group__substructure.shtml#ga16841a730cf92c8e51a804ad8d746307">FindAutomorphisms()</a> with a query that is a copy of the queried molecule (taking the mask into account). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">queried</td><td>The molecule to search. </td></tr>
    <tr><td class="paramname">maps</td><td>Reference to the object to store the results in. </td></tr>
    <tr><td class="paramname">mask</td><td>A mask to restrict the search to a part of the queried molecule. </td></tr>
    <tr><td class="paramname">maxMemory</td><td>Memory limit for the <code>maps</code> object in bytes. Default is 300MB. The default empty mask will result in all atoms being considered. The mask indexes start from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a54d090b64d4101064d7614cf81d7decf"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::MapGeneric" ref="a54d090b64d4101064d7614cf81d7decf" args="(Functor &amp;functor, const OBMol *queried, const OBBitVec &amp;mask=OBBitVec())=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void MapGeneric </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml">Functor</a> &amp;&#160;</td>
          <td class="paramname"><em>functor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>queried</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find all mappings in <code>queried</code>. The functor will be called when a mapping is found. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">functor</td><td>The functor to handle found mappings. </td></tr>
    <tr><td class="paramname">queried</td><td>The molecule to search. </td></tr>
    <tr><td class="paramname">mask</td><td>A mask to restrict the search to a part of the queried molecule. The default empty mask will result in all atoms being considered. The mask indexes start from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">OpenBabel::FindAutomorphisms()</a>.</p>

</div>
</div>
<a class="anchor" id="a3f1b7a8e3d742835665503376bf8643d"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::SetTimeout" ref="a3f1b7a8e3d742835665503376bf8643d" args="(unsigned int seconds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTimeout </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>seconds</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the timeout in seconds. </p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a095cd6b4cbaab0cba9c46ea592ed899c"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::m_query" ref="a095cd6b4cbaab0cba9c46ea592ed899c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>* <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a095cd6b4cbaab0cba9c46ea592ed899c">m_query</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The search query. </p>

</div>
</div>
<a class="anchor" id="acda4225670d6511a6b4055aa91a387f9"></a><!-- doxytag: member="OpenBabel::OBIsomorphismMapper::m_timeout" ref="acda4225670d6511a6b4055aa91a387f9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#acda4225670d6511a6b4055aa91a387f9">m_timeout</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The timeout in seconds. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="isomorphism_8h_source.shtml">isomorphism.h</a></li>
<li><a class="el" href="isomorphism_8cpp.shtml">isomorphism.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:10 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
