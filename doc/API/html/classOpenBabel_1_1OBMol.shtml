<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBMol Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBMol Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBMol" --><!-- doxytag: inherits="OpenBabel::OBBase" -->
<p><code>#include &lt;<a class="el" href="mol_8h_source.shtml">openbabel/mol.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBMol:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBMol__inherit__graph.png" border="0" usemap="#OBMol_inherit__map" alt="Inheritance graph"/></div>
<map name="OBMol_inherit__map" id="OBMol_inherit__map">
<area shape="rect" id="node2" href="classOpenBabel_1_1OBBase.shtml" title="Base Class." alt="" coords="5,5,83,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBMol-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab2f0cea1c162bbe8dd603528a3da5c87">CastAndClear</a> (bool clear=true)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Initialization and data (re)size methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4">OBMol</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">~OBMol</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">operator+=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">ReserveAtoms</a> (int natoms)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afd5176ccf4c318a93379716d48ab01e8">CreateAtom</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aed69c2ff7d45271240ee8e33f4344d5a">CreateBond</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3803d9a4c2a776560b0c36bc2e788132">CreateResidue</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8a3d084b1d94acc59c93b9b05e7d3281">DestroyAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a942e828cdc42e0c168f2188a225a7ac3">DestroyBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab224ebc76c4ac8cac7d10df2fae43e79">DestroyResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa53209ef174b454eb99e269ef59ebbe0">AddAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abd2ad51974aaf20356fe5a07628205b9">InsertAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">AddBond</a> (int beginIdx, int endIdx, int order, int flags=0, int insertpos=-1)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">AddBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad656115fdd6749ef7ad8394ee687f375">AddResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae215a7452ce2f50590d64af7a5558f0c">NewAtom</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad2762de927ca28384c48bf618603aab2">NewAtom</a> (unsigned long id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aeefe2b1d5039fdf141187e10cf9c6b9f">NewBond</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">NewBond</a> (unsigned long id)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7662758d1fe46ab3a3392b1970c6a656">NewResidue</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a688b0d2367ab8e683821e6cff705d5f4">DeleteAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, bool destroyAtom=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">DeleteBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, bool destroyBond=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a202a80d2d05f526fa5186dfb797558d6">DeleteResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *, bool destroyResidue=true)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Data retrieval methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba761a006b56d62912a91e259ce11bb1">GetFlags</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6f656d9b9241846d93d6bfbe2ee89818">GetTitle</a> (bool replaceNewlines=true) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0c317a10161689c407f29a6fcacdb852">NumAtoms</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a115132ab8bd21607d00d61bc1ba5cc16">NumBonds</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afa92da4c4cfc01b7c0d4385f487b42a4">NumHvyAtoms</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad1369fbd476ea326b847c08ff64f9331">NumResidues</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4b7d18f81253efd82ca54e4a9c0aae65">NumRotors</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af2f78686dc35b7f79f44edc55b42d14a">GetAtom</a> (int idx) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3e8b5af457f70a6f106be30b3375c7f5">GetAtomById</a> (unsigned long id) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a8287faea913f46d12783a066857b16">GetFirstAtom</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2d4e8eb07783443a8d663057e5193ab">GetBond</a> (int idx) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6a6ff88d670f69d418f0ad0ad76771db">GetBondById</a> (unsigned long id) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac51202dd4219b084be014d7ee533702e">GetBond</a> (int a, int b) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0de1f5399c5c15b13d1db631951cb2c0">GetBond</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *bgn, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afef672662f0f83abd8149e15cc531f01">GetResidue</a> (int idx) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af5afa8a0742e0238f3fd92ada82f079d">GetInternalCoord</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a401a725a0efbc20c49783f176d78e6a7">GetTorsion</a> (int, int, int, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adfd902d8de9eeb32ea476fe916a329fd">GetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1589aac9963e7a8f58bffb24d85b9a16">GetAngle</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">GetFormula</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">GetSpacedFormula</a> (int ones=0, const char *sp=&quot; &quot;, bool implicitH=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a898054d3301668a37b4d7c3612487157">GetEnergy</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a77cd52b60b431c19aa7debcd0d92e07d">GetMolWt</a> (bool implicitH=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7cac960f30506aa53d083983845032df">GetExactMass</a> (bool implicitH=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78d46b60f04702fa6f450ef6f8dae62">GetTotalCharge</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa431b859ed26f5a45e6ddc3448da1d1f">GetTotalSpinMultiplicity</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae66fbb23621ae4f9e7937540d5072869">GetDimension</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">GetCoordinates</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">GetSSSR</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">GetLSSR</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">AutomaticFormalCharge</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">AutomaticPartialCharge</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Data modification methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">SetTitle</a> (const char *title)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a667324c365d3b6f20d17221295c3a89e">SetTitle</a> (std::string &amp;title)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">SetFormula</a> (std::string molFormula)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">SetEnergy</a> (double energy)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">SetDimension</a> (unsigned short int d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a58b360590ab212860dc26812ce38057d">SetTotalCharge</a> (int charge)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a537e4f9fec95b76ae84e5e9c8eb7d192">SetTotalSpinMultiplicity</a> (unsigned int spinMultiplicity)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a50a6320395d2466d277dc42f872c50f8">SetInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; int_coord)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">SetAutomaticFormalCharge</a> (bool val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">SetAutomaticPartialCharge</a> (bool val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">SetAromaticPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">SetSSSRPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">SetLSSRPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">SetRingAtomsAndBondsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">SetAtomTypesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">SetRingTypesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">SetChainsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">SetChiralityPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">SetPartialChargesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">SetHybridizationPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">SetImplicitValencePerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">SetKekulePerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">SetClosureBondsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">SetHydrogensAdded</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">SetCorrectedForPH</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">SetAromaticCorrected</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">SetSpinMultiplicityAssigned</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">SetFlags</a> (int flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">UnsetAromaticPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">UnsetSSSRPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">UnsetRingTypesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">UnsetPartialChargesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">UnsetImplicitValencePerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">UnsetHydrogensAdded</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a> (int flag)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Molecule utilities and perception methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">FindSSSR</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">FindLSSR</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">FindRingAtomsAndBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">FindChiralCenters</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">FindChildren</a> (std::vector&lt; int &gt; &amp;children, int bgnIdx, int endIdx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1205b2669e02dbc289c65ab1f56110c1">FindChildren</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;children, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *bgn, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">FindLargestFragment</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;frag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">ContigFragList</a> (std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">Align</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">ConnectTheDots</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">PerceiveBondOrders</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">FindAngles</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">FindTorsions</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">GetGTDVector</a> (std::vector&lt; int &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a94276831221d5693b3017da7fab3ccc8">GetGIVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">GetGIDVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods to check for existence of properties</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">Has2D</a> (bool Not3D=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">Has3D</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">HasNonZeroCoords</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">HasAromaticPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">HasSSSRPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">HasLSSRPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">HasRingAtomsAndBondsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">HasAtomTypesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">HasRingTypesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">HasChiralityPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">HasPartialChargesPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">HasHybridizationPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">HasImplicitValencePerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">HasKekulePerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">HasClosureBondsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">HasChainsPerceived</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">HasHydrogensAdded</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">HasAromaticCorrected</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">IsCorrectedForPH</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">HasSpinMultiplicityAssigned</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">IsChiral</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">Empty</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Multiple conformer member functions</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a95a50ee3e38bea8779b490626f65fc2e">SetConformers</a> (std::vector&lt; double * &gt; &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">AddConformer</a> (double *f)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">SetConformer</a> (int i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">CopyConformer</a> (double *c, int nconf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a21951fddd6c8a35b21769a1d08718581">DeleteConformer</a> (int nconf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">GetConformer</a> (int i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">SetEnergies</a> (std::vector&lt; double &gt; &amp;energies)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">GetEnergies</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">GetEnergy</a> (int ci)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a43bacf0671104e33b04835408b5c3785">BeginConformer</a> (std::vector&lt; double * &gt;::iterator &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abd4311945a4de0a47d2f036e9632a4b9">NextConformer</a> (std::vector&lt; double * &gt;::iterator &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; double * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">GetConformers</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Iterator methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae3b07b388e733d5a0e9ee9654a4411a1">BeginAtoms</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">EndAtoms</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">BeginBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">EndBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">BeginResidues</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">EndResidues</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abceac189ade32ef3a6c5f3d13fc38db4">BeginAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac8ca499b39cdd5f4a2fc76e7d50deaa9">NextAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad9d21c9b65678905c6d7d461160fcd9f">BeginBond</a> (<a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a133c681e9534e7255b1fae272c40a511">NextBond</a> (<a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">BeginResidue</a> (<a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">NextResidue</a> (<a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a67c061a9d850cf30b4bf5ea394760d43">BeginInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;i)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6680c695e3cdceb7e42a554a0ffc8a19">NextInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;i)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aaf61a3ecb8f2926aaf117299388d43c2">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#adb6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a69c3286ed127949ba747afcc5b9a514a">DataSize</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#afb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">HasFlag</a> (int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a> (int flag)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Internal Kekulization routines -- see kekulize.cpp and NewPerceiveKekuleBonds()</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">start_kekulize</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400">expand_kekulize</a> (int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8300dbbf33e0da417f98d846442e6b1">has_no_leftover_electrons</a> (std::vector&lt; int &gt; &amp;atomState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af2e4cda76442b795b7e6f5d74dea0df8">getorden</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af1afc15e37f48f63ea001277fef0e289">expandcycle</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;potAromBonds)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">_flags</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">_title</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">_vatom</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">_atomIds</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">_vbond</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">_bondIds</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">_c</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; double * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">_vconf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">_energy</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">_natoms</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">_nbonds</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">_residue</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">_internals</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">_mod</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Molecule modification methods</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">EndModify</a> (bool nukePerceivedData=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">GetMod</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">IncrementMod</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">DecrementMod</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *pOptions, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">RenumberAtoms</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">RenumberAtoms</a> (std::vector&lt; int &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">SetCoordinates</a> (double *c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">ToInertialFrame</a> (int conf, double *rmat)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8122f52665d60a1e5e56578561bd36b3">ToInertialFrame</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6ac0385e87d0a56901913e5f8049e45f">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, int conf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae330819c26c418de3a2c995fd191807b">Rotate</a> (const double u[3][3])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3494940b2239a5f427061d2902573efd">Rotate</a> (const double m[9])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">Rotate</a> (const double m[9], int nconf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">Center</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">Kekulize</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">PerceiveKekuleBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">NewPerceiveKekuleBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4e2ddc39752d20fabcda1afc1cc4e8e4">DeleteHydrogens</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ace02501ed235e4e6c37dca0585bb46bf">DeleteHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2993ead33ec2a4b15dd536d798ff844d">DeleteNonPolarHydrogens</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a925b41d42ddf14c12b675d32bdf5e948">DeleteHydrogen</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">AddHydrogens</a> (bool polaronly=false, bool correctForPH=false, double pH=7.4)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">AddHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9c3e3f1fa320501c56cb2b7fe4d6be34">AddPolarHydrogens</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a89743304090380b06c920530f919a2fe">StripSalts</a> (int threshold=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">Separate</a> (int StartIndex=1)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">GetNextFragment</a> (<a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a> &amp;iter, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;newMol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">ConvertDativeBonds</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669">CorrectForPH</a> (double pH=7.4)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad85ec95d1f909843737b67d70638f3c9">AssignSpinMultiplicity</a> (bool NoImplicitH=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">SetIsPatternStructure</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">Center</a> (int nconf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">SetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double ang)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">ClassDescription</a> ()</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Molecule Class. </p>
<p>The most important class in Open Babel is <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>, or the molecule class. The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> class is designed to store all the basic information associated with a molecule, to make manipulations on the connection table of a molecule facile, and to provide member functions which automatically perceive information about a molecule. A guided tour of the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> class is a good place to start.</p>
<p>An <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> class can be declared: </p>
<div class="fragment"><pre class="fragment">      <a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4" title="Constructor.">OBMol</a> mol;
</pre></div><p>For example: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;iostream.h&gt;</span>

<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion.">openbabel/obconversion.h</a>&gt;</span>
      <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc,<span class="keywordtype">char</span> **argv)
      {
      OBConversion conv(&amp;cin,&amp;cout);
      <span class="keywordflow">if</span>(conv.SetInAndOutFormats(<span class="stringliteral">&quot;SDF&quot;</span>,<span class="stringliteral">&quot;MOL2&quot;</span>))
      {
      <a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4" title="Constructor.">OBMol</a> mol;
      <span class="keywordflow">if</span>(conv.Read(&amp;mol))
      ...manipulate molecule

      conv-&gt;Write(&amp;mol);
      }
      <span class="keywordflow">return</span>(1);
      }
</pre></div><p>will read in a molecule in SD file format from stdin (or the C++ equivalent cin) and write a MOL2 format file out to standard out. Additionally, The input and output formats can be altered using the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> class</p>
<p>Once a molecule has been read into an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> (or created via other methods) the atoms and bonds can be accessed by the following methods: </p>
<div class="fragment"><pre class="fragment">      OBAtom *atom;
      atom = mol.GetAtom(5); <span class="comment">//random access of an atom</span>
</pre></div><p> or </p>
<div class="fragment"><pre class="fragment">      OBBond *bond;
      bond = mol.GetBond(14); <span class="comment">//random access of a bond</span>
</pre></div><p> or </p>
<div class="fragment"><pre class="fragment">      <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(atom, mol) <span class="comment">// iterator access (see OBMolAtomIter)</span>
</pre></div><p> or </p>
<div class="fragment"><pre class="fragment">      <a class="code" href="obiter_8h.shtml#a16c0f68c4f2d476fae98338b31e77e46">FOR_BONDS_OF_MOL</a>(bond, mol) <span class="comment">// iterator access (see OBMolBondIter)</span>
</pre></div><p> It is important to note that atom arrays currently begin at 1 and bond arrays begin at 0. Requesting atom 0 ( </p>
<div class="fragment"><pre class="fragment">      OBAtom *atom = mol.GetAtom(0); 
</pre></div><p> will result in an error, but </p>
<div class="fragment"><pre class="fragment">      OBBond *bond = mol.GetBond(0);
</pre></div><p> is perfectly valid. Note that this is expected to change in the near future to simplify coding and improve efficiency.</p>
<p>The ambiguity of numbering issues and off-by-one errors led to the use of iterators in Open Babel. An iterator is essentially just a pointer, but when used in conjunction with Standard Template Library (STL) vectors it provides an unambiguous way to loop over arrays. OBMols store their atom and bond information in STL vectors. Since vectors are template based, a vector of any user defined type can be declared. OBMols declare vector&lt;OBAtom*&gt; and vector&lt;OBBond*&gt; to store atom and bond information. Iterators are then a natural way to loop over the vectors of atoms and bonds.</p>
<p>A variety of predefined iterators have been created to simplify common looping requests (e.g., looping over all atoms in a molecule, bonds to a given atom, etc.)</p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="obiter_8h.shtml" title="STL-style iterators for Open Babel.">openbabel/obiter.h</a>&gt;</span>
      ...
      #define <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a,m)     for( OBMolAtomIter     a(m); a; ++a )
      <span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; ++b )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; ++a )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; ++b )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; ++r )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; ++a )</span>
<span class="preprocessor">      ...</span>
</pre></div><p>These convenience functions can be used like so: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="obiter_8h.shtml" title="STL-style iterators for Open Babel.">openbabel/obiter.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>

      <a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4" title="Constructor.">OBMol</a> mol;
      <span class="keywordtype">double</span> exactMass = 0.0;
      <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a, mol)
      {
      exactMass +=  a-&gt;GetExactMass();
      }
</pre></div><p>Note that with these convenience macros, the iterator "a" (or whichever name you pick) is declared for you -- you do not need to do it beforehand. </p>
<dl><dt><b>Examples: </b></dt><dd>
<p><a class="el" href="obconformersearch_default_8cpp-example.shtml#_a0">obconformersearch_default.cpp</a>, <a class="el" href="obconversion_readstring_8cpp-example.shtml#_a2">obconversion_readstring.cpp</a>, and <a class="el" href="obforcefield_energy_8cpp-example.shtml#_a0">obforcefield_energy.cpp</a>.</p>
</dd>
</dl></div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a937a09d86f3f440467334e546a98d8d4"></a><!-- doxytag: member="OpenBabel::OBMol::OBMol" ref="a937a09d86f3f440467334e546a98d8d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="aafa7e4623d4c3c0305b5523ca8a77e14"></a><!-- doxytag: member="OpenBabel::OBMol::OBMol" ref="aafa7e4623d4c3c0305b5523ca8a77e14" args="(const OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor, copies atoms,bonds and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>. </p>

</div>
</div>
<a class="anchor" id="a8df0dd71ac1dba7f7876d6671279d087"></a><!-- doxytag: member="OpenBabel::OBMol::~OBMol" ref="a8df0dd71ac1dba7f7876d6671279d087" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a3a1dc0419a66d2e7288214342de43b7a"></a><!-- doxytag: member="OpenBabel::OBMol::HasFlag" ref="a3a1dc0419a66d2e7288214342de43b7a" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="adcdab8f96dc4fdc2940749e527087245"></a><!-- doxytag: member="OpenBabel::OBMol::SetFlag" ref="adcdab8f96dc4fdc2940749e527087245" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6d03ef3f811fa2c085694ccbf76051d4"></a><!-- doxytag: member="OpenBabel::OBMol::start_kekulize" ref="a6d03ef3f811fa2c085694ccbf76051d4" args="(std::vector&lt; OBAtom * &gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void start_kekulize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>cycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>electron</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find a consistent assignment of single/double bonds to a Kekule' ring or a set of fused aromatic rings. </p>
<p>The initial electronic state indicates whether each atom can make a double bond or not. The function works recursively to "walk" around the ring or rings and try all possible arrangements of single and double bonds. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000086">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="a6be250d574bdbcae500c9207cb0f2400"></a><!-- doxytag: member="OpenBabel::OBMol::expand_kekulize" ref="a6be250d574bdbcae500c9207cb0f2400" args="(int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool expand_kekulize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Recursively assign single and double bonds according to the electronical state of the atoms. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000087">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="aa8300dbbf33e0da417f98d846442e6b1"></a><!-- doxytag: member="OpenBabel::OBMol::has_no_leftover_electrons" ref="aa8300dbbf33e0da417f98d846442e6b1" args="(std::vector&lt; int &gt; &amp;atomState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_no_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check for leftover electrons. This is used during <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400" title="Recursively assign single and double bonds according to the electronical state of the atoms...">expand_kekulize()</a> to make sure all of the 4n+2 electrons that were available for bonding in the aromatic ring system were actually used during the assignment of single and double bonds. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000088">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="af2e4cda76442b795b7e6f5d74dea0df8"></a><!-- doxytag: member="OpenBabel::OBMol::getorden" ref="af2e4cda76442b795b7e6f5d74dea0df8" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int getorden </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Give the priority to give two electrons instead of 1 </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000089">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="af1afc15e37f48f63ea001277fef0e289"></a><!-- doxytag: member="OpenBabel::OBMol::expandcycle" ref="af1afc15e37f48f63ea001277fef0e289" args="(OBAtom *atom, OBBitVec &amp;avisit, const OBBitVec &amp;potAromBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool expandcycle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>potAromBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Recursively find the aromatic atoms with an aromatic bond to the current atom </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000090">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="a9d63c24cbe9dc1f6e82d58da2b67dafa"></a><!-- doxytag: member="OpenBabel::OBMol::operator=" ref="a9d63c24cbe9dc1f6e82d58da2b67dafa" args="(const OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment, copies atoms,bonds and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>. </p>

</div>
</div>
<a class="anchor" id="a3f9d2bbe4ae3f85ddca39be0a8ff4971"></a><!-- doxytag: member="OpenBabel::OBMol::operator+=" ref="a3f9d2bbe4ae3f85ddca39be0a8ff4971" args="(const OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copies atoms and bonds but not <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>. </p>

</div>
</div>
<a class="anchor" id="a723933398f0402a92916d1cfcb8dadd6"></a><!-- doxytag: member="OpenBabel::OBMol::ReserveAtoms" ref="a723933398f0402a92916d1cfcb8dadd6" args="(int natoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReserveAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>natoms</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Reserve a minimum number of atoms for internal storage This improves performance since the internal atom vector does not grow. </p>

</div>
</div>
<a class="anchor" id="afd5176ccf4c318a93379716d48ab01e8"></a><!-- doxytag: member="OpenBabel::OBMol::CreateAtom" ref="afd5176ccf4c318a93379716d48ab01e8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * CreateAtom </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> pointer. Does no bookkeeping </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000057">Deprecated:</a></b></dt><dd>Use NewAtom instead, which ensures internal connections </dd></dl>

</div>
</div>
<a class="anchor" id="aed69c2ff7d45271240ee8e33f4344d5a"></a><!-- doxytag: member="OpenBabel::OBMol::CreateBond" ref="aed69c2ff7d45271240ee8e33f4344d5a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * CreateBond </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> pointer. Does no bookkeeping </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000058">Deprecated:</a></b></dt><dd>Use NewBond instead, which ensures internal connections </dd></dl>

</div>
</div>
<a class="anchor" id="a3803d9a4c2a776560b0c36bc2e788132"></a><!-- doxytag: member="OpenBabel::OBMol::CreateResidue" ref="a3803d9a4c2a776560b0c36bc2e788132" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * CreateResidue </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> pointer. Does no bookkeeping </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000059">Deprecated:</a></b></dt><dd>Use NewResidue instead, which ensures internal connections </dd></dl>

</div>
</div>
<a class="anchor" id="a8a3d084b1d94acc59c93b9b05e7d3281"></a><!-- doxytag: member="OpenBabel::OBMol::DestroyAtom" ref="a8a3d084b1d94acc59c93b9b05e7d3281" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> pointer if defined. Does no bookkeeping </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a688b0d2367ab8e683821e6cff705d5f4">DeleteAtom</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a942e828cdc42e0c168f2188a225a7ac3"></a><!-- doxytag: member="OpenBabel::OBMol::DestroyBond" ref="a942e828cdc42e0c168f2188a225a7ac3" args="(OBBond *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> pointer if defined. Does no bookkeeping </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">DeleteBond</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ab224ebc76c4ac8cac7d10df2fae43e79"></a><!-- doxytag: member="OpenBabel::OBMol::DestroyResidue" ref="ab224ebc76c4ac8cac7d10df2fae43e79" args="(OBResidue *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td>
          <td class="paramname"><em>residue</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> pointer if defined. Does no bookkeeping </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a202a80d2d05f526fa5186dfb797558d6">DeleteResidue</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="aa53209ef174b454eb99e269ef59ebbe0"></a><!-- doxytag: member="OpenBabel::OBMol::AddAtom" ref="aa53209ef174b454eb99e269ef59ebbe0" args="(OBAtom &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add an atom to a molecule. </p>
<p>Add the specified atom to this molecule </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the method was successful</dd></dl>
<p>Also checks bond_queue for any bonds that should be made to the new atom </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>.</p>

</div>
</div>
<a class="anchor" id="abd2ad51974aaf20356fe5a07628205b9"></a><!-- doxytag: member="OpenBabel::OBMol::InsertAtom" ref="abd2ad51974aaf20356fe5a07628205b9" args="(OBAtom &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool InsertAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add a new atom to this molecule (like AddAtom) Calls <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> before insertion and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">EndModify()</a> after insertion </p>

</div>
</div>
<a class="anchor" id="a62e485fd693d4458ab5c47835afab049"></a><!-- doxytag: member="OpenBabel::OBMol::AddBond" ref="a62e485fd693d4458ab5c47835afab049" args="(int beginIdx, int endIdx, int order, int flags=0, int insertpos=&#45;1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>beginIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>endIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>insertpos</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add a new bond to the molecule with the specified parameters </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">beginIdx</td><td>the atom index of the "start" atom </td></tr>
    <tr><td class="paramname">endIdx</td><td>the atom index of the "end" atom </td></tr>
    <tr><td class="paramname">order</td><td>the bond order (see <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad4d2cadd80651fe9e8bc35c492aa5667">OBBond::GetBO()</a>) </td></tr>
    <tr><td class="paramname">flags</td><td>any bond flags such as stereochemistry (default = none) </td></tr>
    <tr><td class="paramname">insertpos</td><td>the position index to insert the bond (default = none) </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the new bond creation was successful </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ac92c32a100a07407535d5412d1a3b3ae"></a><!-- doxytag: member="OpenBabel::OBMol::AddBond" ref="ac92c32a100a07407535d5412d1a3b3ae" args="(OBBond &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add the specified residue to this molecule and update connections </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the method was successful </dd></dl>

</div>
</div>
<a class="anchor" id="ad656115fdd6749ef7ad8394ee687f375"></a><!-- doxytag: member="OpenBabel::OBMol::AddResidue" ref="ad656115fdd6749ef7ad8394ee687f375" args="(OBResidue &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;&#160;</td>
          <td class="paramname"><em>residue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add the specified residue to this molecule and update connections </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the method was successful </dd></dl>

</div>
</div>
<a class="anchor" id="ae215a7452ce2f50590d64af7a5558f0c"></a><!-- doxytag: member="OpenBabel::OBMol::NewAtom" ref="ae215a7452ce2f50590d64af7a5558f0c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NewAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBAtom::GetParent()</a>. A new unique id will be assigned to this atom. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ad2762de927ca28384c48bf618603aab2"></a><!-- doxytag: member="OpenBabel::OBMol::NewAtom" ref="ad2762de927ca28384c48bf618603aab2" args="(unsigned long id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NewAtom </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Instantiate a New Atom and add it to the molecule. </p>
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> in this molecule and ensure connections. (e.g. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBAtom::GetParent()</a>. The <code>id</code> will be assigned to this atom.</p>
<p>Checks bond_queue for any bonds that should be made to the new atom and updates atom indexes. </p>

</div>
</div>
<a class="anchor" id="aeefe2b1d5039fdf141187e10cf9c6b9f"></a><!-- doxytag: member="OpenBabel::OBMol::NewBond" ref="aeefe2b1d5039fdf141187e10cf9c6b9f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NewBond </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBBond::GetParent()</a>. A new unique id will be assigned to this bond. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a class="anchor" id="a48c326f3815a423f21bba671970ec511"></a><!-- doxytag: member="OpenBabel::OBMol::NewBond" ref="a48c326f3815a423f21bba671970ec511" args="(unsigned long id)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NewBond </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Instantiate a New Bond and add it to the molecule. </p>
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBBond::GetParent()</a>. The <code>id</code> will be assigned to this bond.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.1 Sets the proper Bond index and insures this molecule is set as the parent. </dd></dl>

</div>
</div>
<a class="anchor" id="a7662758d1fe46ab3a3392b1970c6a656"></a><!-- doxytag: member="OpenBabel::OBMol::NewResidue" ref="a7662758d1fe46ab3a3392b1970c6a656" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * NewResidue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a new <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> in this molecule and ensure connections. </p>

</div>
</div>
<a class="anchor" id="a688b0d2367ab8e683821e6cff705d5f4"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteAtom" ref="a688b0d2367ab8e683821e6cff705d5f4" args="(OBAtom *, bool destroyAtom=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyAtom</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Deletes an atom from this molecule and all appropriate bonds. Updates the molecule and atom and bond indexes accordingly. </p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Does not update any residues which may contain this atom </dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether deletion was successful </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">OpenBabel::InternalToCartesian()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ac2b07c6d4f4dee79c04614cb34d5a9e7"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteBond" ref="ac2b07c6d4f4dee79c04614cb34d5a9e7" args="(OBBond *, bool destroyBond=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyBond</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Deletes an bond from this molecule and updates accordingly </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether deletion was successful </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a class="anchor" id="a202a80d2d05f526fa5186dfb797558d6"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteResidue" ref="a202a80d2d05f526fa5186dfb797558d6" args="(OBResidue *, bool destroyResidue=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td>
          <td class="paramname"><em>residue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyResidue</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Deletes a residue from this molecule and updates accordingly. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether deletion was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a1b5760b4c75b7631fffb54f84140b3e3"></a><!-- doxytag: member="OpenBabel::OBMol::BeginModify" ref="a1b5760b4c75b7631fffb54f84140b3e3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BeginModify </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Call when making many modifications -- clears conformer/rotomer data. The method "turns off" perception routines, improving performance. Changes in molecular structure will be re-considered after modifications. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ac32ffc23db124156a953e8e5cb923ccd"></a><!-- doxytag: member="OpenBabel::OBMol::EndModify" ref="ac32ffc23db124156a953e8e5cb923ccd" args="(bool nukePerceivedData=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void EndModify </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>nukePerceivedData</em> = <code>true</code></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Call when done with modificaions -- re-perceive data as needed. This method "turns on" perception routines and re-evaluates molecular structure. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ac5103c8b3cbe4f961bd353209bf2860e"></a><!-- doxytag: member="OpenBabel::OBMol::GetMod" ref="ac5103c8b3cbe4f961bd353209bf2860e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The number of nested <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> calls. Used internally. </dd></dl>

</div>
</div>
<a class="anchor" id="adc36b31f851665247f3c576cdd7aa0af"></a><!-- doxytag: member="OpenBabel::OBMol::IncrementMod" ref="adc36b31f851665247f3c576cdd7aa0af" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IncrementMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Increase the number of nested BeginModify calls. Dangerous! Instead, properly use BeginModify as needed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="a8efda275b959c94452e1ded1f568c934"></a><!-- doxytag: member="OpenBabel::OBMol::DecrementMod" ref="a8efda275b959c94452e1ded1f568c934" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DecrementMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Decrease the number of nested BeginModify calls. Dangerous! Instead, properly use EndModify as needed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="aba761a006b56d62912a91e259ce11bb1"></a><!-- doxytag: member="OpenBabel::OBMol::GetFlags" ref="aba761a006b56d62912a91e259ce11bb1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetFlags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the entire set of flags. (Internal use, mainly.) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a class="anchor" id="a6f656d9b9241846d93d6bfbe2ee89818"></a><!-- doxytag: member="OpenBabel::OBMol::GetTitle" ref="a6f656d9b9241846d93d6bfbe2ee89818" args="(bool replaceNewlines=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * GetTitle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replaceNewlines</em> = <code>true</code></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the title of this molecule (often the filename) </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">replaceNewlines</td><td>whether to replace any newline characters with spaces </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#a6726eb1601555e8e7d712c43416e6af7">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7654363e339f0fe07323c9f7e542d4db">OpenBabel::WriteTitles()</a>.</p>

</div>
</div>
<a class="anchor" id="a0c317a10161689c407f29a6fcacdb852"></a><!-- doxytag: member="OpenBabel::OBMol::NumAtoms" ref="a0c317a10161689c407f29a6fcacdb852" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of atoms (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> children) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#aef2ec72bd2c0b6c3846d20c1ba1fce3f">patty::assign_types()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">OBMol::Center()</a>, <a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">OBMol::CopyConformer()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a3f0fbaf701b38d36aaa0a225de04841d">OBRotamerList::CreateConformerList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>, <a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">OpenBabel::generateDiagram()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad3bbdba4326cf884eeb110b02f7caef7">OBAtom::GetNextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml#a868f68596367d3b45f99bbcc06785394">OBSpectrophore::GetSpectrophore()</a>, <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">OpenBabel::GraphPotentials()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml#aa37ca1a89ffb71694922e4b90b012ab2">OBStericConformerFilter::IsGood()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e21802967a71af8d4f4828d979676b">OpenBabel::MinimumPairRMS()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#ac46bde575f155b4c67ec277d7659a847">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a30e32a5f76406721c6e04f431e2d46bc">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBSSMatch.shtml#ad5689e6c79e3e599e863a2e8020fc58c">OBSSMatch::OBSSMatch()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBRMSDConformerScore.shtml#af48ac6558d86f5b0d3e7981ee51033a8">OBRMSDConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af48ac6558d86f5b0d3e7981ee51033a8">OBEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a91c3efe37db1542a2f553440143915f9">OBRotamerList::SetBaseCoordinateSets()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06b2f4ac9f082f41da3ae01d4bb3f1cc">OBForceField::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#ac56e2c2ffd9fdf7448b3bda78cdc9549">OBAlign::SetRefMol()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a2a325b0a2af5bbc3511c6f536e686e21">OBAlign::SetTargetMol()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a3748ab33ffd81acda5060963bdae971a">OBAlign::UpdateCoords()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">OpenBabel::visitRing()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="a115132ab8bd21607d00d61bc1ba5cc16"></a><!-- doxytag: member="OpenBabel::OBMol::NumBonds" ref="a115132ab8bd21607d00d61bc1ba5cc16" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bonds (i.e. <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> children) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="namespaceOpenBabel.shtml#adbf96b6f2307d00a5f525ecc3a4c5bca">OpenBabel::get_bonds_of_ring()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">OpenBabel::visitRing()</a>.</p>

</div>
</div>
<a class="anchor" id="afa92da4c4cfc01b7c0d4385f487b42a4"></a><!-- doxytag: member="OpenBabel::OBMol::NumHvyAtoms" ref="afa92da4c4cfc01b7c0d4385f487b42a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumHvyAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of non-hydrogen atoms </dd></dl>

</div>
</div>
<a class="anchor" id="ad1369fbd476ea326b847c08ff64f9331"></a><!-- doxytag: member="OpenBabel::OBMol::NumResidues" ref="ad1369fbd476ea326b847c08ff64f9331" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of residues (i.e. <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> substituents) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a4b7d18f81253efd82ca54e4a9c0aae65"></a><!-- doxytag: member="OpenBabel::OBMol::NumRotors" ref="a4b7d18f81253efd82ca54e4a9c0aae65" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumRotors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of rotatble bonds. See <a class="el" href="classOpenBabel_1_1OBBond.shtml#a0919315f7a2fd68937c561186be76e44">OBBond::IsRotor()</a> for details </dd></dl>

</div>
</div>
<a class="anchor" id="af2f78686dc35b7f79f44edc55b42d14a"></a><!-- doxytag: member="OpenBabel::OBMol::GetAtom" ref="af2f78686dc35b7f79f44edc55b42d14a" args="(int idx) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetAtom </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the atom at index <code>idx</code> or NULL if it does not exist. </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Atom indexing will change. Use iterator methods instead.</dd></dl>
<p>Returns a pointer to the atom after a safety check 0 &lt; idx &lt;= NumAtoms </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">OpenBabel::ApplyRotMatToBond()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">OpenBabel::generateDiagram()</a>, <a class="el" href="namespaceOpenBabel.shtml#adbf96b6f2307d00a5f525ecc3a4c5bca">OpenBabel::get_bonds_of_ring()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a02dada3ad01505b2d4ddcbe7b9f006c8">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae93c2ea0464618c797ae509fb3f3f455">OBAtom::GetDistance()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad3bbdba4326cf884eeb110b02f7caef7">OBAtom::GetNextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a5f3dc6510cef07a2247e495d928afb10">OBRing::GetRootAtom()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">OpenBabel::groupRedraw()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a1c74fed3a281f591495387ec5fb0a050">OBRing::IsAromatic()</a>, <a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml#aa37ca1a89ffb71694922e4b90b012ab2">OBStericConformerFilter::IsGood()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a1d4c0074445aa349628c1d417794581b">OBSmartsMatcher::match()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e21802967a71af8d4f4828d979676b">OpenBabel::MinimumPairRMS()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaf97dbc49b4f8743f21874c99257de73">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#aa2197b65eb45814b73aac6f4f061e436">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#ac56e2c2ffd9fdf7448b3bda78cdc9549">OBAlign::SetRefMol()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a2a325b0a2af5bbc3511c6f536e686e21">OBAlign::SetTargetMol()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml#a3b4049f17c690c761669547608a29448">OBFFConstraints::Setup()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a class="anchor" id="a3e8b5af457f70a6f106be30b3375c7f5"></a><!-- doxytag: member="OpenBabel::OBMol::GetAtomById" ref="a3e8b5af457f70a6f106be30b3375c7f5" args="(unsigned long id) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetAtomById </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the atom with <code>id</code> or NULL if it does not exist. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>.</p>

</div>
</div>
<a class="anchor" id="a7a8287faea913f46d12783a066857b16"></a><!-- doxytag: member="OpenBabel::OBMol::GetFirstAtom" ref="a7a8287faea913f46d12783a066857b16" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetFirstAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the first atom in this molecule, or NULL if none exist. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000060">Deprecated:</a></b></dt><dd>Will be removed in favor of more standard iterator methods </dd></dl>

</div>
</div>
<a class="anchor" id="ac2d4e8eb07783443a8d663057e5193ab"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="ac2d4e8eb07783443a8d663057e5193ab" args="(int idx) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the bond at index <code>idx</code> or NULL if it does not exist. </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Bond indexing may change. Use iterator methods instead.</dd></dl>
<p>Returns a pointer to the bond after a safety check 0 &lt;= idx &lt; NumBonds </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a723b609c4e82a3b0ae91f4aa44196740">OpenBabel::addNbrs()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">OpenBabel::atomRingToBondRing()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0e9fff5044095331af29c5b0781557c4">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a class="anchor" id="a6a6ff88d670f69d418f0ad0ad76771db"></a><!-- doxytag: member="OpenBabel::OBMol::GetBondById" ref="a6a6ff88d670f69d418f0ad0ad76771db" args="(unsigned long id) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBondById </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the bond with <code>id</code> or NULL if it does not exist. </dd></dl>

</div>
</div>
<a class="anchor" id="ac51202dd4219b084be014d7ee533702e"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="ac51202dd4219b084be014d7ee533702e" args="(int a, int b) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the bond connecting the atom indexed by <code>a</code> and <code>b</code> or NULL if none exists. </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Atom indexing will change. Use atom objects and iterators instead. </dd></dl>

</div>
</div>
<a class="anchor" id="a0de1f5399c5c15b13d1db631951cb2c0"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="a0de1f5399c5c15b13d1db631951cb2c0" args="(OBAtom *bgn, OBAtom *end) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>bgn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the bond between the atoms <code>bgn</code> and <code>end</code> or NULL if none exists </dd></dl>

</div>
</div>
<a class="anchor" id="afef672662f0f83abd8149e15cc531f01"></a><!-- doxytag: member="OpenBabel::OBMol::GetResidue" ref="afef672662f0f83abd8149e15cc531f01" args="(int idx) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * GetResidue </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the residue indexed by <code>idx</code>, or NULL if none exists </dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Residue indexing may change. Use iterator methods instead. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="af5afa8a0742e0238f3fd92ada82f079d"></a><!-- doxytag: member="OpenBabel::OBMol::GetInternalCoord" ref="af5afa8a0742e0238f3fd92ada82f079d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; GetInternalCoord </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a401a725a0efbc20c49783f176d78e6a7"></a><!-- doxytag: member="OpenBabel::OBMol::GetTorsion" ref="a401a725a0efbc20c49783f176d78e6a7" args="(int, int, int, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the dihedral angle (in degrees) between the four atoms supplied a1-a2-a3-a4) WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="adfd902d8de9eeb32ea476fe916a329fd"></a><!-- doxytag: member="OpenBabel::OBMol::GetTorsion" ref="adfd902d8de9eeb32ea476fe916a329fd" args="(OBAtom *a, OBAtom *b, OBAtom *c, OBAtom *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the dihedral angle (in degrees) between the four atoms <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>) WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

</div>
</div>
<a class="anchor" id="a1589aac9963e7a8f58bffb24d85b9a16"></a><!-- doxytag: member="OpenBabel::OBMol::GetAngle" ref="a1589aac9963e7a8f58bffb24d85b9a16" args="(OBAtom *a, OBAtom *b, OBAtom *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetAngle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the angle (in degrees) between the three atoms <code>a</code>, <code>b</code> and <code>c</code> (where a-&gt; b (vertex) -&gt; c ) </dd></dl>

</div>
</div>
<a class="anchor" id="a7adc12bff502264eaebf537a5e28a43c"></a><!-- doxytag: member="OpenBabel::OBMol::GetFormula" ref="a7adc12bff502264eaebf537a5e28a43c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetFormula </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the stochoimetric formula (e.g., C4H6O)</dd></dl>
<p>Stochoimetric formula (e.g., C4H6O). This is either set by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67" title="Set the stochiometric formula for this molecule.">OBMol::SetFormula()</a> or generated on-the-fly using the "Hill order" -- i.e., C first if present, then H if present all other elements in alphabetical order. </p>

</div>
</div>
<a class="anchor" id="a997bc4b84a93d285f63efa60cbb8ee8d"></a><!-- doxytag: member="OpenBabel::OBMol::GetSpacedFormula" ref="a997bc4b84a93d285f63efa60cbb8ee8d" args="(int ones=0, const char *sp=&quot; &quot;, bool implicitH=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetSpacedFormula </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ones</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sp</em> = <code>&quot;&#160;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the stochoimetric formula in spaced format e.g. C 4 H 6 O 1</dd></dl>
<p>Stochoimetric formula in spaced format e.g. C 4 H 6 O 1 No pair data is stored. Normally use without parameters: <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">GetSpacedFormula()</a> </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.1 </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="a898054d3301668a37b4d7c3612487157"></a><!-- doxytag: member="OpenBabel::OBMol::GetEnergy" ref="a898054d3301668a37b4d7c3612487157" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEnergy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the heat of formation for this molecule (in kcal/mol) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a77cd52b60b431c19aa7debcd0d92e07d"></a><!-- doxytag: member="OpenBabel::OBMol::GetMolWt" ref="a77cd52b60b431c19aa7debcd0d92e07d" args="(bool implicitH=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetMolWt </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the standard molar mass given by IUPAC atomic masses (amu) </dd></dl>

</div>
</div>
<a class="anchor" id="a7cac960f30506aa53d083983845032df"></a><!-- doxytag: member="OpenBabel::OBMol::GetExactMass" ref="a7cac960f30506aa53d083983845032df" args="(bool implicitH=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetExactMass </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the mass given by isotopes (or most abundant isotope, if not specified) </dd></dl>

</div>
</div>
<a class="anchor" id="ab78d46b60f04702fa6f450ef6f8dae62"></a><!-- doxytag: member="OpenBabel::OBMol::GetTotalCharge" ref="ab78d46b60f04702fa6f450ef6f8dae62" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetTotalCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the total charge on this molecule (i.e., 0 = neutral, +1, -1...)</dd></dl>
<p>Returns the total molecular charge -- if it has not previously been set it is calculated from the atomic formal charge information. (This may or may not be correct!) If you set atomic charges with <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aa1d084182d025e6fa000b928807d7689" title="Set the formal charge of the atom to fcharge.">OBAtom::SetFormalCharge()</a> you really should set the molecular charge with <a class="el" href="classOpenBabel_1_1OBMol.shtml#a58b360590ab212860dc26812ce38057d" title="Set the total charge of this molecule to charge.">OBMol::SetTotalCharge()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="aa431b859ed26f5a45e6ddc3448da1d1f"></a><!-- doxytag: member="OpenBabel::OBMol::GetTotalSpinMultiplicity" ref="aa431b859ed26f5a45e6ddc3448da1d1f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetTotalSpinMultiplicity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the total spin on this molecule (i.e., 1 = singlet, 2 = doublet...)</dd></dl>
<p>Returns the total spin multiplicity -- if it has not previously been set It is calculated from the atomic spin multiplicity information assuming the high-spin case (i.e. it simply sums the number of unpaired electrons assuming no further pairing of spins. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="ae66fbb23621ae4f9e7937540d5072869"></a><!-- doxytag: member="OpenBabel::OBMol::GetDimension" ref="ae66fbb23621ae4f9e7937540d5072869" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int GetDimension </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the dimensionality of coordinates (i.e., 0 = unknown or no coord, 2=2D, 3=3D) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="ad11003513310725bd54265ef5bf004c0"></a><!-- doxytag: member="OpenBabel::OBMol::GetCoordinates" ref="ad11003513310725bd54265ef5bf004c0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the set of all atomic coordinates. See OBAtom::GetCoordPtr for more </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#a17b8bb0e69ea72ff166768a24f84a03f">OBScoreGrid::Eval()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af48ac6558d86f5b0d3e7981ee51033a8">OBEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#af0ec970ded1e0a8721469b45c58e4451">OBRotamerList::SetCurrentCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#a9084f759abbf98766f3fed69c14b568a">OBConformerSearch::Setup()</a>, and <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>.</p>

</div>
</div>
<a class="anchor" id="a0f6bce457ef6f963b8e4ba7c4be23775"></a><!-- doxytag: member="OpenBabel::OBMol::GetSSSR" ref="a0f6bce457ef6f963b8e4ba7c4be23775" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp; GetSSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#findSmallestSetOfSmallestRings">blue-obelisk:findSmallestSetOfSmallestRings</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac567d206e2ca785c9a6d9d46ee00bb45">OBBond::FindSmallestRing()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a9ca260c28f84147e45c377cdb2254144">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7215961220abaa4e684bfafeca87bb0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae7d5797a4c8b99c943f943034e3287d8">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="a762b79fd52bbaf0f4444f0308654dab1"></a><!-- doxytag: member="OpenBabel::OBMol::GetLSSR" ref="a762b79fd52bbaf0f4444f0308654dab1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp; GetLSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the Largest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a9f801729475d1d17415af6376458c81e"></a><!-- doxytag: member="OpenBabel::OBMol::AutomaticFormalCharge" ref="a9f801729475d1d17415af6376458c81e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticFormalCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current flag for whether formal charges are set with pH correction. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a class="anchor" id="af2ee11d3efe6526c2eb352bb67684e6c"></a><!-- doxytag: member="OpenBabel::OBMol::AutomaticPartialCharge" ref="af2ee11d3efe6526c2eb352bb67684e6c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticPartialCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current flag for whether partial charges are auto-determined. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>.</p>

</div>
</div>
<a class="anchor" id="acfe3b729dc90c4c5e21684e3a60653af"></a><!-- doxytag: member="OpenBabel::OBMol::SetTitle" ref="acfe3b729dc90c4c5e21684e3a60653af" args="(const char *title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the title of this molecule to <code>title</code>. </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#a366c8a142b8c16554597e82320dfd0e0">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="a667324c365d3b6f20d17221295c3a89e"></a><!-- doxytag: member="OpenBabel::OBMol::SetTitle" ref="a667324c365d3b6f20d17221295c3a89e" args="(std::string &amp;title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the title of this molecule to <code>title</code>. </p>

</div>
</div>
<a class="anchor" id="a0a4b32a3135f26595bdd260539256c67"></a><!-- doxytag: member="OpenBabel::OBMol::SetFormula" ref="a0a4b32a3135f26595bdd260539256c67" args="(std::string molFormula)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFormula </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>molFormula</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the stochiometric formula for this molecule. </p>

</div>
</div>
<a class="anchor" id="ab78fa0a100d47ad2beb88c7cabb80e62"></a><!-- doxytag: member="OpenBabel::OBMol::SetEnergy" ref="ab78fa0a100d47ad2beb88c7cabb80e62" args="(double energy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnergy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>energy</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the heat of formation for this molecule (in kcal/mol) </p>

</div>
</div>
<a class="anchor" id="adc2702cffcab0a0d6907958e3327284b"></a><!-- doxytag: member="OpenBabel::OBMol::SetDimension" ref="adc2702cffcab0a0d6907958e3327284b" args="(unsigned short int d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetDimension </td>
          <td>(</td>
          <td class="paramtype">unsigned short int&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the dimension of this molecule (i.e., 0, 1 , 2, 3) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>.</p>

</div>
</div>
<a class="anchor" id="a58b360590ab212860dc26812ce38057d"></a><!-- doxytag: member="OpenBabel::OBMol::SetTotalCharge" ref="a58b360590ab212860dc26812ce38057d" args="(int charge)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalCharge </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>charge</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the total charge of this molecule to <code>charge</code>. </p>

</div>
</div>
<a class="anchor" id="a537e4f9fec95b76ae84e5e9c8eb7d192"></a><!-- doxytag: member="OpenBabel::OBMol::SetTotalSpinMultiplicity" ref="a537e4f9fec95b76ae84e5e9c8eb7d192" args="(unsigned int spinMultiplicity)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalSpinMultiplicity </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>spinMultiplicity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the total spin multiplicity of this molecule to <code>spinMultiplicity</code> Overrides the calculation from spin multiplicity of OBAtoms </p>

</div>
</div>
<a class="anchor" id="a50a6320395d2466d277dc42f872c50f8"></a><!-- doxytag: member="OpenBabel::OBMol::SetInternalCoord" ref="a50a6320395d2466d277dc42f872c50f8" args="(std::vector&lt; OBInternalCoord * &gt; int_coord)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&#160;</td>
          <td class="paramname"><em>int_coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the internal coordinates to <code>int_coord</code> (Does not call InternalToCartesian to update the 3D cartesian coordinates). The size of the <code>int_coord</code> has to be the same as the number of atoms in molecule (+ NULL at the beginning). </p>

</div>
</div>
<a class="anchor" id="a31e0990c833c415708b3fc515dbb35d5"></a><!-- doxytag: member="OpenBabel::OBMol::SetAutomaticFormalCharge" ref="a31e0990c833c415708b3fc515dbb35d5" args="(bool val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticFormalCharge </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the flag for determining automatic formal charges with pH (default=true) </p>

</div>
</div>
<a class="anchor" id="aa8df95db3695e5e7ce263c484ce5533d"></a><!-- doxytag: member="OpenBabel::OBMol::SetAutomaticPartialCharge" ref="aa8df95db3695e5e7ce263c484ce5533d" args="(bool val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticPartialCharge </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the flag for determining partial charges automatically (default=true) </p>

</div>
</div>
<a class="anchor" id="aecd431b2cfaefa64d54c2dc4088551fb"></a><!-- doxytag: member="OpenBabel::OBMol::SetAromaticPerceived" ref="aecd431b2cfaefa64d54c2dc4088551fb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that aromaticity has been perceived for this molecule (see <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds.">OBAromaticTyper</a>) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, and <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a class="anchor" id="aba303a094727738eb901cafbecd7c196"></a><!-- doxytag: member="OpenBabel::OBMol::SetSSSRPerceived" ref="aba303a094727738eb901cafbecd7c196" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class) </p>

</div>
</div>
<a class="anchor" id="a4641fea7bd6513949147bb7a53b6a7e1"></a><!-- doxytag: member="OpenBabel::OBMol::SetLSSRPerceived" ref="a4641fea7bd6513949147bb7a53b6a7e1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that Largest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class) </p>

</div>
</div>
<a class="anchor" id="a0656401ba8b19bc9b9f2d3e8e833d3aa"></a><!-- doxytag: member="OpenBabel::OBMol::SetRingAtomsAndBondsPerceived" ref="a0656401ba8b19bc9b9f2d3e8e833d3aa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRingAtomsAndBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that rings have been perceived (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class for details) </p>

</div>
</div>
<a class="anchor" id="aa809ea95ee07e61c6dc00ae710d8a749"></a><!-- doxytag: member="OpenBabel::OBMol::SetAtomTypesPerceived" ref="aa809ea95ee07e61c6dc00ae710d8a749" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAtomTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that atom types have been perceived (see <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a> for details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>.</p>

</div>
</div>
<a class="anchor" id="a08b5caf5aa6fc21e7b6fcd44e3d32f58"></a><!-- doxytag: member="OpenBabel::OBMol::SetRingTypesPerceived" ref="a08b5caf5aa6fc21e7b6fcd44e3d32f58" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that ring types have been perceived (see <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml" title="Assigns ring types.">OBRingTyper</a> for details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>.</p>

</div>
</div>
<a class="anchor" id="a537294f8e96a7ec5263a79de7454326e"></a><!-- doxytag: member="OpenBabel::OBMol::SetChainsPerceived" ref="a537294f8e96a7ec5263a79de7454326e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetChainsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that chains and residues have been perceived (see <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a>) </p>

</div>
</div>
<a class="anchor" id="a608e6f965afea1f4f64cb0f499a0cb27"></a><!-- doxytag: member="OpenBabel::OBMol::SetChiralityPerceived" ref="a608e6f965afea1f4f64cb0f499a0cb27" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetChiralityPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that chirality has been perceived. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>.</p>

</div>
</div>
<a class="anchor" id="a00fd4c76a7513a9c8087d975f5d8a51b"></a><!-- doxytag: member="OpenBabel::OBMol::SetPartialChargesPerceived" ref="a00fd4c76a7513a9c8087d975f5d8a51b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that partial charges have been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>.</p>

</div>
</div>
<a class="anchor" id="a4b93b72694e8a9a970eee7f0b65ecf9a"></a><!-- doxytag: member="OpenBabel::OBMol::SetHybridizationPerceived" ref="a4b93b72694e8a9a970eee7f0b65ecf9a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetHybridizationPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that hybridization of all atoms has been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a9ecfb96410199c294c003f975d870832"></a><!-- doxytag: member="OpenBabel::OBMol::SetImplicitValencePerceived" ref="a9ecfb96410199c294c003f975d870832" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that the implicit hydrogen valence of all atoms has been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a class="anchor" id="a1e298bbe286ab2c5a6f3b086a07b1a2b"></a><!-- doxytag: member="OpenBabel::OBMol::SetKekulePerceived" ref="a1e298bbe286ab2c5a6f3b086a07b1a2b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKekulePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that Kekule forms have been assigned by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2" title="Transform to standard Kekule bond structure (presumably from an aromatic form)">Kekulize()</a> </p>

</div>
</div>
<a class="anchor" id="a7900736a9f73a041ab8bade19be84cc9"></a><!-- doxytag: member="OpenBabel::OBMol::SetClosureBondsPerceived" ref="a7900736a9f73a041ab8bade19be84cc9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetClosureBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that ring closure bonds have been assigned by graph traversal. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>.</p>

</div>
</div>
<a class="anchor" id="a47b63124c405f9c2ecdb766c6de9c56e"></a><!-- doxytag: member="OpenBabel::OBMol::SetHydrogensAdded" ref="a47b63124c405f9c2ecdb766c6de9c56e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Mark that explicit hydrogen atoms have been added. </p>

</div>
</div>
<a class="anchor" id="af56db37c6a9f7049ed16469ab0a270c2"></a><!-- doxytag: member="OpenBabel::OBMol::SetCorrectedForPH" ref="af56db37c6a9f7049ed16469ab0a270c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetCorrectedForPH </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a class="anchor" id="a6438e097839dbc98916fb00a3dc67305"></a><!-- doxytag: member="OpenBabel::OBMol::SetAromaticCorrected" ref="a6438e097839dbc98916fb00a3dc67305" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticCorrected </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a0d8f018cbaaa9d313b45e468f77afea2">OBAtomTyper::CorrectAromaticNitrogens()</a>.</p>

</div>
</div>
<a class="anchor" id="a2c81eeba803bc59d6c40f97b0e0e17fd"></a><!-- doxytag: member="OpenBabel::OBMol::SetSpinMultiplicityAssigned" ref="a2c81eeba803bc59d6c40f97b0e0e17fd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSpinMultiplicityAssigned </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab0922e1fa0939499c024e1006433adf3"></a><!-- doxytag: member="OpenBabel::OBMol::SetFlags" ref="ab0922e1fa0939499c024e1006433adf3" args="(int flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlags </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a class="anchor" id="a88f39becfe74f62c9d0ffedfb4098b77"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetAromaticPerceived" ref="a88f39becfe74f62c9d0ffedfb4098b77" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a116f93a9700551794731bf71cd17345a"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetSSSRPerceived" ref="a116f93a9700551794731bf71cd17345a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7d0001f1af294a0d5676a70e12115b43"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetRingTypesPerceived" ref="a7d0001f1af294a0d5676a70e12115b43" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0b8a9f6292b91ec5c4022a487e9d6092"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetPartialChargesPerceived" ref="a0b8a9f6292b91ec5c4022a487e9d6092" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af673e91c4869ca8c1057f006d4f06dae"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetImplicitValencePerceived" ref="af673e91c4869ca8c1057f006d4f06dae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6df023071b8d662aa513a00579f076d"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetHydrogensAdded" ref="ac6df023071b8d662aa513a00579f076d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a401b99defa8a57195dc40a2604cee115"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetFlag" ref="a401b99defa8a57195dc40a2604cee115" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="a6b78f4cdf91366de39994ade8edc9775"></a><!-- doxytag: member="OpenBabel::OBMol::DoTransformations" ref="a6b78f4cdf91366de39994ade8edc9775" args="(const std::map&lt; std::string, std::string &gt; *pOptions, OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> * DoTransformations </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a set of transformations specified by the user</p>
<p>Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> Base type does nothing </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="ab72bba66cc9e40fb3b657a30d87bbe6d"></a><!-- doxytag: member="OpenBabel::OBMol::ClassDescription" ref="ab72bba66cc9e40fb3b657a30d87bbe6d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A list of descriptions of command-line options for <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">DoTransformations()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">OBBase</a>.</p>

</div>
</div>
<a class="anchor" id="ad12fd937da5f4b0c4562888252fe214b"></a><!-- doxytag: member="OpenBabel::OBMol::Clear" ref="ad12fd937da5f4b0c4562888252fe214b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear all information from a molecule except OB_PATTERN_STRUCTURE left unchanged. </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b">OBBase</a>.</p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>, and <a class="el" href="classOpenBabel_1_1OBAlign.shtml#ac56e2c2ffd9fdf7448b3bda78cdc9549">OBAlign::SetRefMol()</a>.</p>

</div>
</div>
<a class="anchor" id="afa417798ba7c13bf75a7ab04f2803cdb"></a><!-- doxytag: member="OpenBabel::OBMol::RenumberAtoms" ref="afa417798ba7c13bf75a7ab04f2803cdb" args="(std::vector&lt; OBAtom * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RenumberAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Renumber the atoms of this molecule according to the order in the supplied vector. </p>
<p>Renumber the atoms in this molecule according to the order in the supplied vector. This will return without action if the supplied vector is empty or does not have the same number of atoms as the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="a1a93cc61677782c2b8800a12c6af5675"></a><!-- doxytag: member="OpenBabel::OBMol::RenumberAtoms" ref="a1a93cc61677782c2b8800a12c6af5675" args="(std::vector&lt; int &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RenumberAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Renumber the atoms of this molecule using the initial indexes in the supplied vector. </p>
<p>Renumber the atoms according to the order of indexes in the supplied vector This with assemble an atom vector and call RenumberAtoms(vector&lt;OBAtom*&gt;) It will return without action if the supplied vector is empty or does not have the same number of atoms as the molecule.</p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a class="anchor" id="a10c76fe88720e6ca2e17865b847edbf7"></a><!-- doxytag: member="OpenBabel::OBMol::SetCoordinates" ref="a10c76fe88720e6ca2e17865b847edbf7" args="(double *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetCoordinates </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the coordinates for all atoms in this conformer. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">OBMol::GetCoordinates()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a751725f02bf62696515d79608198cd59"></a><!-- doxytag: member="OpenBabel::OBMol::ToInertialFrame" ref="a751725f02bf62696515d79608198cd59" args="(int conf, double *rmat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>conf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>rmat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Translate one conformer and rotate by a rotation matrix (which is returned) to the inertial frame-of-reference. </p>

</div>
</div>
<a class="anchor" id="a8122f52665d60a1e5e56578561bd36b3"></a><!-- doxytag: member="OpenBabel::OBMol::ToInertialFrame" ref="a8122f52665d60a1e5e56578561bd36b3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Translate all conformers to the inertial frame-of-reference. </p>

</div>
</div>
<a class="anchor" id="a6ac0385e87d0a56901913e5f8049e45f"></a><!-- doxytag: member="OpenBabel::OBMol::Translate" ref="a6ac0385e87d0a56901913e5f8049e45f" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Translates all conformers in the molecule by the supplied vector. </p>
<p>this method adds the vector v to all atom positions in all conformers </p>

</div>
</div>
<a class="anchor" id="adad8d93db1fadf354b6f51687335fcb9"></a><!-- doxytag: member="OpenBabel::OBMol::Translate" ref="adad8d93db1fadf354b6f51687335fcb9" args="(const vector3 &amp;v, int conf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Translates one conformer in the molecule by the supplied vector. </p>
<p>this method adds the vector v to all atom positions in the conformer nconf. If nconf == OB_CURRENT_CONFORMER, then the atom positions in the current conformer are translated. </p>

</div>
</div>
<a class="anchor" id="ae330819c26c418de3a2c995fd191807b"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="ae330819c26c418de3a2c995fd191807b" args="(const double u[3][3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>u</em>[3][3]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate all conformers using the supplied matrix <code>u</code> (a 3x3 array of double) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3494940b2239a5f427061d2902573efd">OBMol::Rotate()</a>.</p>

</div>
</div>
<a class="anchor" id="a3494940b2239a5f427061d2902573efd"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="a3494940b2239a5f427061d2902573efd" args="(const double m[9])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>m</em>[9]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate all conformers using the supplied matrix <code>m</code> (a linear 3x3 row-major array of double) </p>

</div>
</div>
<a class="anchor" id="a7a6cf5e812be471e72ecac3ee5d0bc46"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="a7a6cf5e812be471e72ecac3ee5d0bc46" args="(const double m[9], int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>m</em>[9], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate a specific conformer <code>nconf</code> using the supplied rotation matrix <code>m</code>. </p>

</div>
</div>
<a class="anchor" id="ab9f6ba6fae7e12d0f61f5fd8e746aaf3"></a><!-- doxytag: member="OpenBabel::OBMol::Center" ref="ab9f6ba6fae7e12d0f61f5fd8e746aaf3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Center </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Translate to the center of all coordinates (for this conformer) </p>

</div>
</div>
<a class="anchor" id="a457c69b9a377efcbdb9e8be871f17fc2"></a><!-- doxytag: member="OpenBabel::OBMol::Kekulize" ref="a457c69b9a377efcbdb9e8be871f17fc2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Kekulize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Transform to standard Kekule bond structure (presumably from an aromatic form) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a1e9f06170626de367fba48ebbacd6f0e"></a><!-- doxytag: member="OpenBabel::OBMol::PerceiveKekuleBonds" ref="a1e9f06170626de367fba48ebbacd6f0e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool PerceiveKekuleBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab74a82552a9576514b189e2a265d5f5a"></a><!-- doxytag: member="OpenBabel::OBMol::NewPerceiveKekuleBonds" ref="ab74a82552a9576514b189e2a265d5f5a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NewPerceiveKekuleBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Kekulize aromatic rings without using implicit valence. </p>
<p>This new perceive kekule bonds function has been designed to handle molecule files without explicit hydrogens such as pdb or xyz. (It can, of course, easily handle explicit hydrogens too.) The function does not rely on GetImplicitValence function The function looks for groups of aromatic cycle For each group it tries to guess the number of electrons given by each atom in order to satisfy the huckel (4n+2) rule If the huckel rule cannot be satisfied the algorithm try with its best alternative guess Then it recursively walk on the atoms of the cycle and assign single and double bonds </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000085">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a class="anchor" id="a4e2ddc39752d20fabcda1afc1cc4e8e4"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogens" ref="a4e2ddc39752d20fabcda1afc1cc4e8e4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Delete all hydrogens from the molecule </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Success </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a class="anchor" id="ace02501ed235e4e6c37dca0585bb46bf"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogens" ref="ace02501ed235e4e6c37dca0585bb46bf" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Delete all hydrogens from the supplied atom </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Success </dd></dl>

</div>
</div>
<a class="anchor" id="a2993ead33ec2a4b15dd536d798ff844d"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteNonPolarHydrogens" ref="a2993ead33ec2a4b15dd536d798ff844d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteNonPolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Delete all hydrogen atoms connected to a non-polar atom </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae519982c28911c0906e9181c46d7bdbc">OBAtom::IsNonPolarHydrogen</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a925b41d42ddf14c12b675d32bdf5e948"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogen" ref="a925b41d42ddf14c12b675d32bdf5e948" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogen </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Delete the supplied atom if it is a hydrogen (Helper function for DeleteHydrogens) </p>

</div>
</div>
<a class="anchor" id="ad3bab31bf64ff6cb18f6ee259b3b8c11"></a><!-- doxytag: member="OpenBabel::OBMol::AddHydrogens" ref="ad3bab31bf64ff6cb18f6ee259b3b8c11" args="(bool polaronly=false, bool correctForPH=false, double pH=7.4)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>polaronly</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>correctForPH</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pH</em> = <code>7.4</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add hydrogens to the entire molecule to fill out implicit valence spots </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">polaronly</td><td>Whether to add hydrogens only to polar atoms (i.e., not to C atoms) </td></tr>
    <tr><td class="paramname">correctForPH</td><td>Whether to call <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669" title="Correct for pH by applying the OBPhModel transformations.">CorrectForPH()</a> first </td></tr>
    <tr><td class="paramname">pH</td><td>The pH to use for <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669" title="Correct for pH by applying the OBPhModel transformations.">CorrectForPH()</a> modification </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether any hydrogens were added </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">OBSmartsPattern::Match()</a>.</p>

</div>
</div>
<a class="anchor" id="a1befb9ee43954207d09e3229e4b5753b"></a><!-- doxytag: member="OpenBabel::OBMol::AddHydrogens" ref="a1befb9ee43954207d09e3229e4b5753b" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add hydrogens only to the supplied atom to fill out implicit valence. </p>

</div>
</div>
<a class="anchor" id="a9c3e3f1fa320501c56cb2b7fe4d6be34"></a><!-- doxytag: member="OpenBabel::OBMol::AddPolarHydrogens" ref="a9c3e3f1fa320501c56cb2b7fe4d6be34" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddPolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add only polar hydrogens (i.e., attached to polar atoms, not C) </p>

</div>
</div>
<a class="anchor" id="a89743304090380b06c920530f919a2fe"></a><!-- doxytag: member="OpenBabel::OBMol::StripSalts" ref="a89743304090380b06c920530f919a2fe" args="(int threshold=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StripSalts </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threshold</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>If <code>threshold</code> is not specified or is zero, remove all but the largest contiguous fragment. If <code>threshold</code> is non-zero, remove any fragments with fewer than <code>threshold</code> atoms. </p>

</div>
</div>
<a class="anchor" id="a1e5c6955a32c0ec2317a8de12ab7ba5a"></a><!-- doxytag: member="OpenBabel::OBMol::Separate" ref="a1e5c6955a32c0ec2317a8de12ab7ba5a" args="(int StartIndex=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; Separate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>StartIndex</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copies each disconnected fragment as a separate <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="ad711b0ce04370b50be246e7b859d1f99"></a><!-- doxytag: member="OpenBabel::OBMol::GetNextFragment" ref="ad711b0ce04370b50be246e7b859d1f99" args="(OpenBabel::OBMolAtomDFSIter &amp;iter, OBMol &amp;newMol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetNextFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a> &amp;&#160;</td>
          <td class="paramname"><em>iter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>newMol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Iterative component of Separate to copy one fragment at a time. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>.</p>

</div>
</div>
<a class="anchor" id="acba192e5cf0db39c2ed6af7ba05328dc"></a><!-- doxytag: member="OpenBabel::OBMol::ConvertDativeBonds" ref="acba192e5cf0db39c2ed6af7ba05328dc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConvertDativeBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Converts the charged form of coordinate bonds, e.g.[N+]([O-])=O to N(=O)=O. </p>
<p>Converts for instance [N+]([O-])=O to N(=O)=O. </p>

</div>
</div>
<a class="anchor" id="a7af037d80801b43ae5450bd74004d669"></a><!-- doxytag: member="OpenBabel::OBMol::CorrectForPH" ref="a7af037d80801b43ae5450bd74004d669" args="(double pH=7.4)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectForPH </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pH</em> = <code>7.4</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Correct for pH by applying the <a class="el" href="classOpenBabel_1_1OBPhModel.shtml" title="Corrections for pH used by OBMol::CorrectForPH()">OBPhModel</a> transformations. </p>

</div>
</div>
<a class="anchor" id="ad85ec95d1f909843737b67d70638f3c9"></a><!-- doxytag: member="OpenBabel::OBMol::AssignSpinMultiplicity" ref="ad85ec95d1f909843737b67d70638f3c9" args="(bool NoImplicitH=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AssignSpinMultiplicity </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>NoImplicitH</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set spin multiplicity for H-deficient atoms </p>
<p>If NoImplicitH is true then the molecule has no implicit hydrogens. Individual atoms on which ForceNoH() has been called also have no implicit hydrogens. If NoImplicitH is false (the default), then if there are any explicit hydrogens on an atom then they constitute all the hydrogen on that atom. However, a hydrogen atom with its _isotope!=0 is not considered explicit hydrogen for this purpose. In addition, an atom which has had ForceImplH()called for it is never considered hydrogen deficient, e.g. unbracketed atoms in SMILES. Any discrepancy with the expected atom valency is interpreted as the atom being a radical of some sort and iits _spinMultiplicity is set to 2 when it is one hydrogen short and 3 when it is two hydrogens short and similarly for greater hydrogen deficiency.</p>
<p>So SMILES C[CH] is interpreted as methyl carbene, CC[H][H] as ethane, and CC[2H] as CH3CH2D. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a0f0310aa379033994230e29e206106c7"></a><!-- doxytag: member="OpenBabel::OBMol::SetIsPatternStructure" ref="a0f0310aa379033994230e29e206106c7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetIsPatternStructure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> is a pattern, not a complete molecule. Left unchanged by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b" title="Clear all information from a molecule except OB_PATTERN_STRUCTURE left unchanged.">Clear()</a>. </p>

</div>
</div>
<a class="anchor" id="a9e896374801d7ea5f8986ecb2b54d65b"></a><!-- doxytag: member="OpenBabel::OBMol::Center" ref="a9e896374801d7ea5f8986ecb2b54d65b" args="(int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the center of the supplied conformer <code>nconf</code> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3" title="Translate to the center of all coordinates (for this conformer)">Center()</a> to actually center all conformers at the origin </dd></dl>

</div>
</div>
<a class="anchor" id="a501e76993e9deb8ec8ab24c464d4ed3c"></a><!-- doxytag: member="OpenBabel::OBMol::SetTorsion" ref="a501e76993e9deb8ec8ab24c464d4ed3c" args="(OBAtom *, OBAtom *, OBAtom *, OBAtom *, double ang)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTorsion </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the torsion defined by these atoms, rotating bonded neighbors </p>
<dl class="user"><dt><b>ang The torsion angle in radians</b></dt><dd>WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="ad4e3eab0d027bd8e503d02e7261ca477"></a><!-- doxytag: member="OpenBabel::OBMol::FindSSSR" ref="ad4e3eab0d027bd8e503d02e7261ca477" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindSSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find Smallest Set of Smallest Rings (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> class for more details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a9ca260c28f84147e45c377cdb2254144">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7215961220abaa4e684bfafeca87bb0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae7d5797a4c8b99c943f943034e3287d8">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a39a5ee36b2320d9191dac24acf90b03e"></a><!-- doxytag: member="OpenBabel::OBMol::FindLSSR" ref="a39a5ee36b2320d9191dac24acf90b03e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindLSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find Largest Set of Smallest Rings. </p>

</div>
</div>
<a class="anchor" id="ae58b3f3da59d333ffa0d5b0f005f3526"></a><!-- doxytag: member="OpenBabel::OBMol::FindRingAtomsAndBonds" ref="ae58b3f3da59d333ffa0d5b0f005f3526" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindRingAtomsAndBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find all ring atoms and bonds. Does not need to call <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477" title="Find Smallest Set of Smallest Rings (see OBRing class for more details)">FindSSSR()</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa17842bd610dc8b2ede2fe324738fe5b">OBBond::IsInRing()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aa17842bd610dc8b2ede2fe324738fe5b">OBAtom::IsInRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a3368586a5a86bd9684f4b25ac53d2e44"></a><!-- doxytag: member="OpenBabel::OBMol::FindChiralCenters" ref="a3368586a5a86bd9684f4b25ac53d2e44" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChiralCenters </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find all chiral atom centers. See <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a63258442848bd8e29e0d5224e145ad83">OBAtom::IsChiral()</a> for more details </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000061">Deprecated:</a></b></dt><dd>See FindStereogenicUnits </dd></dl>

</div>
</div>
<a class="anchor" id="ae12d082d7bc7adb2e9fd621adf27ccb6"></a><!-- doxytag: member="OpenBabel::OBMol::FindChildren" ref="ae12d082d7bc7adb2e9fd621adf27ccb6" args="(std::vector&lt; int &gt; &amp;children, int bgnIdx, int endIdx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>locates all atoms for which there exists a path to 'second' without going through 'first' children must not include 'second' </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">OpenBabel::ApplyRotMatToBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>.</p>

</div>
</div>
<a class="anchor" id="a1205b2669e02dbc289c65ab1f56110c1"></a><!-- doxytag: member="OpenBabel::OBMol::FindChildren" ref="a1205b2669e02dbc289c65ab1f56110c1" args="(std::vector&lt; OBAtom * &gt; &amp;children, OBAtom *bgn, OBAtom *end)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>bgn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>locates all atoms for which there exists a path to 'end' without going through 'bgn' children must not include 'end' </p>

</div>
</div>
<a class="anchor" id="aa797df5bf72cb5e220e13171dd9c7d4a"></a><!-- doxytag: member="OpenBabel::OBMol::FindLargestFragment" ref="aa797df5bf72cb5e220e13171dd9c7d4a" args="(OBBitVec &amp;frag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindLargestFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>frag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find the largest fragment in <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> (which may include multiple non-connected fragments) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">frag</td><td>Return (by reference) a bit vector indicating the atoms in the largest fragment </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af74913b3d793c41d1f005afdba11da35"></a><!-- doxytag: member="OpenBabel::OBMol::ContigFragList" ref="af74913b3d793c41d1f005afdba11da35" args="(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ContigFragList </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>cfl</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sort a list of contig fragments by size from largest to smallest Each vector&lt;int&gt; contains the atom numbers of a contig fragment </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>.</p>

</div>
</div>
<a class="anchor" id="a228de88f48ee3ca6a11554b74d82dedd"></a><!-- doxytag: member="OpenBabel::OBMol::Align" ref="a228de88f48ee3ca6a11554b74d82dedd" args="(OBAtom *, OBAtom *, vector3 &amp;, vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Align </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Aligns atom a on p1 and atom b along p1-&gt;p2 vector. </p>

</div>
</div>
<a class="anchor" id="a31d05972f7454e791641c4a7d0071d12"></a><!-- doxytag: member="OpenBabel::OBMol::ConnectTheDots" ref="a31d05972f7454e791641c4a7d0071d12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConnectTheDots </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Adds single bonds based on atom proximity. </p>
<p>This method adds single bonds between all atoms closer than their combined atomic covalent radii, then "cleans up" making sure bonded atoms are not closer than 0.4A and the atom does not exceed its valence. It implements blue-obelisk:rebondFrom3DCoordinates. </p>

</div>
</div>
<a class="anchor" id="ac749cfb04173f6f35ef64b1ac1d87178"></a><!-- doxytag: member="OpenBabel::OBMol::PerceiveBondOrders" ref="ac749cfb04173f6f35ef64b1ac1d87178" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PerceiveBondOrders </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Attempts to perceive multiple bonds based on geometries. </p>
<p>This method uses bond angles and geometries from current connectivity to guess atom types and then filling empty valences with multiple bonds. It currently has a pass to detect some frequent functional groups. It still needs a pass to detect aromatic rings to "clean up." AssignSpinMultiplicity(true) is called at the end of the function. The true states that there are no implict hydrogens in the molecule. </p>

</div>
</div>
<a class="anchor" id="abee51ea4be988357bb17c4e5fd3d7e12"></a><!-- doxytag: member="OpenBabel::OBMol::FindAngles" ref="abee51ea4be988357bb17c4e5fd3d7e12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindAngles </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fills out an <a class="el" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> with angles from the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>.</p>

</div>
</div>
<a class="anchor" id="a1ce9b09fb625faffaae648d7beae9598"></a><!-- doxytag: member="OpenBabel::OBMol::FindTorsions" ref="a1ce9b09fb625faffaae648d7beae9598" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindTorsions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fills out an <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> with angles from the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>.</p>

</div>
</div>
<a class="anchor" id="ac4260148aa21c7ada7d625bc0c6f2f7a"></a><!-- doxytag: member="OpenBabel::OBMol::GetGTDVector" ref="ac4260148aa21c7ada7d625bc0c6f2f7a" args="(std::vector&lt; int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetGTDVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>gtd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates the graph theoretical distance (GTD) of each atom. </p>
<p>Creates a vector (indexed from zero) containing, for each atom in the molecule, the number of bonds plus one to the most distant non-H atom.</p>
<p>For example, for the molecule H3CC(=O)Cl the GTD value for C1 would be 3, as the most distant non-H atom (either Cl or O) is 2 bonds away.</p>
<p>Since the GTD measures the distance to non-H atoms, the GTD values for terminal H atoms tend to be larger than for non-H terminal atoms. In the example above, the GTD values for the H atoms are all 4. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<a class="anchor" id="a94276831221d5693b3017da7fab3ccc8"></a><!-- doxytag: member="OpenBabel::OBMol::GetGIVector" ref="a94276831221d5693b3017da7fab3ccc8" args="(std::vector&lt; unsigned int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates a set of graph invariant indexes using the graph theoretical distance, number of connected heavy atoms, aromatic boolean, ring boolean, atomic number, and summation of bond orders connected to the atom. Vector is indexed from zero. </p>

</div>
</div>
<a class="anchor" id="ade880e97f2bdf3c90e91375aec12aaf0"></a><!-- doxytag: member="OpenBabel::OBMol::GetGIDVector" ref="ade880e97f2bdf3c90e91375aec12aaf0" args="(std::vector&lt; unsigned int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIDVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vgid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates a set of symmetry identifiers for a molecule. Atoms with the same symmetry ID are symmetrically equivalent. Vector is indexed from zero. </p>

</div>
</div>
<a class="anchor" id="afbf33662dacd733285409dfd85696457"></a><!-- doxytag: member="OpenBabel::OBMol::Has2D" ref="afbf33662dacd733285409dfd85696457" args="(bool Not3D=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has2D </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Not3D</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are there non-zero coordinates in two dimensions (i.e. X and Y)- and, if Not3D is true, no Z coordinates? </p>

</div>
</div>
<a class="anchor" id="a4aaa8b5151395ad66ecfe896ca8a0114"></a><!-- doxytag: member="OpenBabel::OBMol::Has3D" ref="a4aaa8b5151395ad66ecfe896ca8a0114" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are there non-zero coordinates in all three dimensions (i.e. X, Y, Z)? </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>.</p>

</div>
</div>
<a class="anchor" id="abdda89a787d7ae0639d5127c2f6a4dfb"></a><!-- doxytag: member="OpenBabel::OBMol::HasNonZeroCoords" ref="abdda89a787d7ae0639d5127c2f6a4dfb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasNonZeroCoords </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are there any non-zero coordinates? </p>

</div>
</div>
<a class="anchor" id="a783c51919c69da3287d51f34b2fa53a0"></a><!-- doxytag: member="OpenBabel::OBMol::HasAromaticPerceived" ref="a783c51919c69da3287d51f34b2fa53a0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has aromatic perception been performed? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ef863ca7ed29e266960966a66dc8fb8">OBBond::IsAromatic()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4ef863ca7ed29e266960966a66dc8fb8">OBAtom::IsAromatic()</a>.</p>

</div>
</div>
<a class="anchor" id="aac2c45d000ac10ad770ec5e5eff97f30"></a><!-- doxytag: member="OpenBabel::OBMol::HasSSSRPerceived" ref="aac2c45d000ac10ad770ec5e5eff97f30" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has the smallest set of smallest rings (FindSSSR) been performed? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a9ca260c28f84147e45c377cdb2254144">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7215961220abaa4e684bfafeca87bb0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae7d5797a4c8b99c943f943034e3287d8">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a3771eaf33a336f55348f80ca857a159f"></a><!-- doxytag: member="OpenBabel::OBMol::HasLSSRPerceived" ref="a3771eaf33a336f55348f80ca857a159f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasLSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has the largest set of smallest rings (FindLSSR) been performed? </p>

</div>
</div>
<a class="anchor" id="a0329d4256b426a4967afa867f415d06b"></a><!-- doxytag: member="OpenBabel::OBMol::HasRingAtomsAndBondsPerceived" ref="a0329d4256b426a4967afa867f415d06b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasRingAtomsAndBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have ring atoms and bonds been assigned? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa17842bd610dc8b2ede2fe324738fe5b">OBBond::IsInRing()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aa17842bd610dc8b2ede2fe324738fe5b">OBAtom::IsInRing()</a>.</p>

</div>
</div>
<a class="anchor" id="a0ba2ebe76f1b15c48a8f1538efc8f9b4"></a><!-- doxytag: member="OpenBabel::OBMol::HasAtomTypesPerceived" ref="a0ba2ebe76f1b15c48a8f1538efc8f9b4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAtomTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have atom types been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBAtom::GetType()</a>.</p>

</div>
</div>
<a class="anchor" id="adfe42a839d62e3d8f31ce3c28dc2e4e0"></a><!-- doxytag: member="OpenBabel::OBMol::HasRingTypesPerceived" ref="adfe42a839d62e3d8f31ce3c28dc2e4e0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have ring types been assigned by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml" title="Assigns ring types.">OBRingTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRing.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBRing::GetType()</a>.</p>

</div>
</div>
<a class="anchor" id="a39df67d7e225b9dd721b9b8c7df809ce"></a><!-- doxytag: member="OpenBabel::OBMol::HasChiralityPerceived" ref="a39df67d7e225b9dd721b9b8c7df809ce" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChiralityPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has atom chirality been assigned? </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a87c2cd2043f749d5433a98df4ad8277d"></a><!-- doxytag: member="OpenBabel::OBMol::HasPartialChargesPerceived" ref="a87c2cd2043f749d5433a98df4ad8277d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have atomic Gasteiger partial charges been assigned by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml" title="Assigns Gasteiger partial charges.">OBGastChrg</a>? </p>

</div>
</div>
<a class="anchor" id="a908e2d394d3a47cf821014899344ca37"></a><!-- doxytag: member="OpenBabel::OBMol::HasHybridizationPerceived" ref="a908e2d394d3a47cf821014899344ca37" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHybridizationPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has atomic hybridization been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4f510d8274d4d2a835c7c438aa794e57">OBAtom::GetHyb()</a>.</p>

</div>
</div>
<a class="anchor" id="a7fe699ef7fee62ca46743d6aa78bdea5"></a><!-- doxytag: member="OpenBabel::OBMol::HasImplicitValencePerceived" ref="a7fe699ef7fee62ca46743d6aa78bdea5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has implicit hydrogen valence been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ade9a7b6271ba3fb38bbaa20602d736ce">OBAtom::GetImplicitValence()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae09ed28481ac044dab3f31c8605b44a9">OBAtom::ImplicitHydrogenCount()</a>.</p>

</div>
</div>
<a class="anchor" id="aafddb1ded7f589afbdd56062368602db"></a><!-- doxytag: member="OpenBabel::OBMol::HasKekulePerceived" ref="aafddb1ded7f589afbdd56062368602db" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasKekulePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has aromaticity and Kekule forms been assigned by Kekulize? </p>

</div>
</div>
<a class="anchor" id="afb25b05d950ca109bf9c6333b906a9ee"></a><!-- doxytag: member="OpenBabel::OBMol::HasClosureBondsPerceived" ref="afb25b05d950ca109bf9c6333b906a9ee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasClosureBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have ring "closure" bonds been assigned? (e.g., <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>.</p>

</div>
</div>
<a class="anchor" id="ac31a6af8f2b96fa35170523b6318c459"></a><!-- doxytag: member="OpenBabel::OBMol::HasChainsPerceived" ref="ac31a6af8f2b96fa35170523b6318c459" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChainsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have biomolecule chains and residues been assigned by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a>? </p>

</div>
</div>
<a class="anchor" id="aefc6e71556f0cd4afdd34e4a99d06025"></a><!-- doxytag: member="OpenBabel::OBMol::HasHydrogensAdded" ref="aefc6e71556f0cd4afdd34e4a99d06025" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have hydrogens been added to the molecule? </p>

</div>
</div>
<a class="anchor" id="ab57a4b5dd9752e593e2fdb80f48909d8"></a><!-- doxytag: member="OpenBabel::OBMol::HasAromaticCorrected" ref="ab57a4b5dd9752e593e2fdb80f48909d8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticCorrected </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Have aromatic nitrogens been "corrected?" (deprecated) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, and <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a0d8f018cbaaa9d313b45e468f77afea2">OBAtomTyper::CorrectAromaticNitrogens()</a>.</p>

</div>
</div>
<a class="anchor" id="afc44b8ad27a62b9cfc670d4fd29bb52f"></a><!-- doxytag: member="OpenBabel::OBMol::IsCorrectedForPH" ref="afc44b8ad27a62b9cfc670d4fd29bb52f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCorrectedForPH </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has the molecule been corrected for pH by CorrectForPH? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a class="anchor" id="a4a45f2c821b749250e070c3594289103"></a><!-- doxytag: member="OpenBabel::OBMol::HasSpinMultiplicityAssigned" ref="a4a45f2c821b749250e070c3594289103" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSpinMultiplicityAssigned </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Has total spin multiplicity been assigned? </p>

</div>
</div>
<a class="anchor" id="a63258442848bd8e29e0d5224e145ad83"></a><!-- doxytag: member="OpenBabel::OBMol::IsChiral" ref="a63258442848bd8e29e0d5224e145ad83" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChiral </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is this molecule chiral? </p>

</div>
</div>
<a class="anchor" id="a31d1053aee208079bcc3c5e1884774df"></a><!-- doxytag: member="OpenBabel::OBMol::Empty" ref="a31d1053aee208079bcc3c5e1884774df" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Are there any atoms in this molecule? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBSSMatch.shtml#ad5689e6c79e3e599e863a2e8020fc58c">OBSSMatch::OBSSMatch()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="a37e5c0caf3b51ae81d8d3abc6ffb1a9c"></a><!-- doxytag: member="OpenBabel::OBMol::NumConformers" ref="a37e5c0caf3b51ae81d8d3abc6ffb1a9c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NumConformers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of conformers in this molecule </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae330819c26c418de3a2c995fd191807b">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6ac0385e87d0a56901913e5f8049e45f">OBMol::Translate()</a>.</p>

</div>
</div>
<a class="anchor" id="a95a50ee3e38bea8779b490626f65fc2e"></a><!-- doxytag: member="OpenBabel::OBMol::SetConformers" ref="a95a50ee3e38bea8779b490626f65fc2e" args="(std::vector&lt; double * &gt; &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformers </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the entire set of conformers for this molecule to <code>v</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#a908a9729ddc64dd383f093ab30a0aae3">OBConformerSearch::GetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>.</p>

</div>
</div>
<a class="anchor" id="a7b80e7015d000221e0cc92fd3cf6f9e4"></a><!-- doxytag: member="OpenBabel::OBMol::AddConformer" ref="a7b80e7015d000221e0cc92fd3cf6f9e4" args="(double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddConformer </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add a new set of coordinates <code>f</code> as a new conformer. </p>

</div>
</div>
<a class="anchor" id="ae4c349e7e3920df72134c0c940318997"></a><!-- doxytag: member="OpenBabel::OBMol::SetConformer" ref="ae4c349e7e3920df72134c0c940318997" args="(int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the molecule's current conformer to <code>i</code> Does nothing if <code>i</code> is less than 0 or i is larger than <a class="el" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>.</p>

</div>
</div>
<a class="anchor" id="af06dcff6ea883886d4d48bad4cc69156"></a><!-- doxytag: member="OpenBabel::OBMol::CopyConformer" ref="af06dcff6ea883886d4d48bad4cc69156" args="(double *c, int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CopyConformer </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Copy the conformer <code>nconf</code> into the array <code>c</code> </p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Does no checking to see if <code>c</code> is large enough </dd></dl>

</div>
</div>
<a class="anchor" id="a21951fddd6c8a35b21769a1d08718581"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteConformer" ref="a21951fddd6c8a35b21769a1d08718581" args="(int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete the conformer <code>nconf</code>. </p>

</div>
</div>
<a class="anchor" id="aeae833c9dcc30e182f18554bd40242d6"></a><!-- doxytag: member="OpenBabel::OBMol::GetConformer" ref="aeae833c9dcc30e182f18554bd40242d6" args="(int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the coordinates to conformer <code>i</code> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>.</p>

</div>
</div>
<a class="anchor" id="a22a1e9fe8d4ef1bebf8e9d9aa2cacc12"></a><!-- doxytag: member="OpenBabel::OBMol::SetEnergies" ref="a22a1e9fe8d4ef1bebf8e9d9aa2cacc12" args="(std::vector&lt; double &gt; &amp;energies)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnergies </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>energies</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the entire set of conformer energies. </p>

</div>
</div>
<a class="anchor" id="aa04bad1a38d0d3bff9930e332f460dc2"></a><!-- doxytag: member="OpenBabel::OBMol::GetEnergies" ref="aa04bad1a38d0d3bff9930e332f460dc2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; double &gt; GetEnergies </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the entire set of conformer energies. </p>

</div>
</div>
<a class="anchor" id="a5ba177c97c9b16781c3e87833359730c"></a><!-- doxytag: member="OpenBabel::OBMol::GetEnergy" ref="a5ba177c97c9b16781c3e87833359730c" args="(int ci)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEnergy </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ci</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the energy for conformer ci </p>
<dl class="user"><dt><b>ci conformer index </b></dt><dd></dd></dl>

</div>
</div>
<a class="anchor" id="a43bacf0671104e33b04835408b5c3785"></a><!-- doxytag: member="OpenBabel::OBMol::BeginConformer" ref="a43bacf0671104e33b04835408b5c3785" args="(std::vector&lt; double * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* BeginConformer </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the iterator to the beginning of the conformer list </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the array of coordinates for the first conformer </dd></dl>

</div>
</div>
<a class="anchor" id="abd4311945a4de0a47d2f036e9632a4b9"></a><!-- doxytag: member="OpenBabel::OBMol::NextConformer" ref="abd4311945a4de0a47d2f036e9632a4b9" args="(std::vector&lt; double * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* NextConformer </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Advance the iterator to the next confomer, if possible </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The array of coordinates for the next conformer, or NULL if none exist </dd></dl>

</div>
</div>
<a class="anchor" id="a5246a44bf82aa31c2f428665db94bfb8"></a><!-- doxytag: member="OpenBabel::OBMol::GetConformers" ref="a5246a44bf82aa31c2f428665db94bfb8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt;&amp; GetConformers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the entire set of conformers for this molecule as a vector of floating point arrays </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a91c3efe37db1542a2f553440143915f9">OBRotamerList::SetBaseCoordinateSets()</a>.</p>

</div>
</div>
<a class="anchor" id="ae3b07b388e733d5a0e9ee9654a4411a1"></a><!-- doxytag: member="OpenBabel::OBMol::BeginAtoms" ref="ae3b07b388e733d5a0e9ee9654a4411a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> BeginAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An atom iterator pointing to the beginning of the atom list </dd></dl>

</div>
</div>
<a class="anchor" id="a81afb84c73fe3e57e8edd5a472e175f6"></a><!-- doxytag: member="OpenBabel::OBMol::EndAtoms" ref="a81afb84c73fe3e57e8edd5a472e175f6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> EndAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An atom iterator pointing to the end of the atom list </dd></dl>

</div>
</div>
<a class="anchor" id="ac4ea48df79e239b506d3501dd42adde9"></a><!-- doxytag: member="OpenBabel::OBMol::BeginBonds" ref="ac4ea48df79e239b506d3501dd42adde9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> BeginBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A bond iterator pointing to the beginning of the bond list </dd></dl>

</div>
</div>
<a class="anchor" id="a87859f951e8ea33345b76d93014486c9"></a><!-- doxytag: member="OpenBabel::OBMol::EndBonds" ref="a87859f951e8ea33345b76d93014486c9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> EndBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A bond iterator pointing to the end of the bond list </dd></dl>

</div>
</div>
<a class="anchor" id="a35e5693cfdc3b993440d29540ab0509d"></a><!-- doxytag: member="OpenBabel::OBMol::BeginResidues" ref="a35e5693cfdc3b993440d29540ab0509d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> BeginResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A residue iterator pointing to the beginning of the residue list </dd></dl>

</div>
</div>
<a class="anchor" id="a62b81baba8ee7151f0aae8fb01e90358"></a><!-- doxytag: member="OpenBabel::OBMol::EndResidues" ref="a62b81baba8ee7151f0aae8fb01e90358" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> EndResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A residue iterator pointing to the end of the residue list </dd></dl>

</div>
</div>
<a class="anchor" id="abceac189ade32ef3a6c5f3d13fc38db4"></a><!-- doxytag: member="OpenBabel::OBMol::BeginAtom" ref="abceac189ade32ef3a6c5f3d13fc38db4" args="(OBAtomIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * BeginAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the atom list </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the first atom (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5230bf1636e0f8f7f3113bb335123558">OBAromaticTyper::ExcludeSmallRing()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#ac64ef48829b8b0825d823194065a813e">OBGrid::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">OBMol::IsChiral()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml#aea06b6f6c208a5a2f16a8f25889486a4">OBMolAtomIter::OBMolAtomIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a19ad5800c1b20981621429c4c16a845e">OBMolPairIter::OBMolPairIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a82f19c09f49162a5d747e6d302f2bd74">OBMolPairIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ac8ca499b39cdd5f4a2fc76e7d50deaa9"></a><!-- doxytag: member="OpenBabel::OBMol::NextAtom" ref="ac8ca499b39cdd5f4a2fc76e7d50deaa9" args="(OBAtomIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NextAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Advance the iterator <code>i</code> to the next atom in the molecule </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the next atom (if any, or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5230bf1636e0f8f7f3113bb335123558">OBAromaticTyper::ExcludeSmallRing()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#ac64ef48829b8b0825d823194065a813e">OBGrid::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">OBMol::IsChiral()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a19ad5800c1b20981621429c4c16a845e">OBMolPairIter::OBMolPairIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a82f19c09f49162a5d747e6d302f2bd74">OBMolPairIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ad9d21c9b65678905c6d7d461160fcd9f"></a><!-- doxytag: member="OpenBabel::OBMol::BeginBond" ref="ad9d21c9b65678905c6d7d461160fcd9f" args="(OBBondIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * BeginBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the bond list </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the first bond (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml#a05b5a8858b706d1046f933c51daa8727">OBMolBondIter::OBMolBondIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a133c681e9534e7255b1fae272c40a511"></a><!-- doxytag: member="OpenBabel::OBMol::NextBond" ref="a133c681e9534e7255b1fae272c40a511" args="(OBBondIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NextBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Advance the iterator <code>i</code> to the next bond in the molecule </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the next bond (if any, or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml#ad17af958901317fceb246b53b90a376d">OBMolBondIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a49f6fa37f54e72323ae1b9597fdca02e"></a><!-- doxytag: member="OpenBabel::OBMol::BeginResidue" ref="a49f6fa37f54e72323ae1b9597fdca02e" args="(OBResidueIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* BeginResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the resdiue list </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the first residue (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml#a0801e9aa4fb67ccecfb66998108bf2c1">OBResidueIter::OBResidueIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="af3747253310ab328967a8bcaf32842d3"></a><!-- doxytag: member="OpenBabel::OBMol::NextResidue" ref="af3747253310ab328967a8bcaf32842d3" args="(OBResidueIterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* NextResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Advance the iterator <code>i</code> to the next residue in the molecule </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the next residue (if any, or NULL if not possible) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml#ae34efedb2d6054469da00761bbb73e16">OBResidueIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a67c061a9d850cf30b4bf5ea394760d43"></a><!-- doxytag: member="OpenBabel::OBMol::BeginInternalCoord" ref="a67c061a9d850cf30b4bf5ea394760d43" args="(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* BeginInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the iterator to the beginning of the internal coordinate list </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the first internal coordinate record, or NULL if none exist </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a50a6320395d2466d277dc42f872c50f8">SetInternalCoord</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6680c695e3cdceb7e42a554a0ffc8a19"></a><!-- doxytag: member="OpenBabel::OBMol::NextInternalCoord" ref="a6680c695e3cdceb7e42a554a0ffc8a19" args="(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* NextInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Advance the iterator to the next internal coordinate record </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the next first internal coordinate record, or NULL if none exist </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a50a6320395d2466d277dc42f872c50f8">SetInternalCoord</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab2f0cea1c162bbe8dd603528a3da5c87"></a><!-- doxytag: member="OpenBabel::OBMol::CastAndClear" ref="ab2f0cea1c162bbe8dd603528a3da5c87" args="(bool clear=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clear</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>By default clears the object. Called from ReadMolecule of most format classes. </p>

</div>
</div>
<a class="anchor" id="a86dd58fc1da5652d70e823fa77cc1637"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="a86dd58fc1da5652d70e823fa77cc1637" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">OBDescriptor::MatchPairData()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="a01b429ffcaf47cf265acd439ed2faca0"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="a01b429ffcaf47cf265acd439ed2faca0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div>
<a class="anchor" id="a6cb103f12f49d86132ece200000da830"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="a6cb103f12f49d86132ece200000da830" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a797e5b4d20b6233062d2fdba78a08e06"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="a797e5b4d20b6233062d2fdba78a08e06" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="ab586df65e3f115b69510820b34098ce9"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="ab586df65e3f115b69510820b34098ce9" args="(OBGenericData *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>gd</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aaf61a3ecb8f2926aaf117299388d43c2"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="aaf61a3ecb8f2926aaf117299388d43c2" args="(std::vector&lt; OBGenericData * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vg</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete all of the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aa068a2a7b64d2ee73aedb8c6e3cf0c4c"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="aa068a2a7b64d2ee73aedb8c6e3cf0c4c" args="(const std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Deletes the generic data with the specified attribute, returning false if not found. </p>

</div>
</div>
<a class="anchor" id="adb6b0ec89bfea783825b3b466e4dbc00"></a><!-- doxytag: member="OpenBabel::OBMol::SetData" ref="adb6b0ec89bfea783825b3b466e4dbc00" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Adds a data object; does nothing if d==NULL. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa6f692332837387535e337413d0100de"></a><!-- doxytag: member="OpenBabel::OBMol::CloneData" ref="aa6f692332837387535e337413d0100de" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Adds a copy of a data object; does nothing if d == NULL </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a class="anchor" id="a69c3286ed127949ba747afcc5b9a514a"></a><!-- doxytag: member="OpenBabel::OBMol::DataSize" ref="a69c3286ed127949ba747afcc5b9a514a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t DataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div>
<a class="anchor" id="aee672d91b694547fb072fdaa8e03cfe9"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="aee672d91b694547fb072fdaa8e03cfe9" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">OpenBabel::CorrectChirality()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">OpenBabel::GetAtomSymClass()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div>
<a class="anchor" id="a22f0eade8b5924eec28ad50f0ce2031f"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="a22f0eade8b5924eec28ad50f0ce2031f" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a483b277678a8ca48998742c80985fd0b"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="a483b277678a8ca48998742c80985fd0b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a90a551ff0a0ed3fa58745dff0ecacdaa"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="a90a551ff0a0ed3fa58745dff0ecacdaa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa959146c3f7b458009dc04f61b5a2e7f"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="aa959146c3f7b458009dc04f61b5a2e7f" args="(DataOrigin source)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div>
<a class="anchor" id="afb56decc1b824c9fad980fc22e1d778c"></a><!-- doxytag: member="OpenBabel::OBMol::GetAllData" ref="afb56decc1b824c9fad980fc22e1d778c" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a15b47c65393d46fde62d1f0a19bcf9fa"></a><!-- doxytag: member="OpenBabel::OBMol::BeginData" ref="a15b47c65393d46fde62d1f0a19bcf9fa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a117c836710dd3aaa8748509262a5c280"></a><!-- doxytag: member="OpenBabel::OBMol::EndData" ref="a117c836710dd3aaa8748509262a5c280" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="aa4a61b1d913f2bee1e0ed5d9daf26549"></a><!-- doxytag: member="OpenBabel::OBMol::_flags" ref="aa4a61b1d913f2bee1e0ed5d9daf26549" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">_flags</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>bitfield of flags </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="ac23878536c8da0ff97c0985627dd5646"></a><!-- doxytag: member="OpenBabel::OBMol::_autoPartialCharge" ref="ac23878536c8da0ff97c0985627dd5646" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assign partial charges automatically. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ae1c74119422bd6a52bb7c384b42dca4c"></a><!-- doxytag: member="OpenBabel::OBMol::_autoFormalCharge" ref="ae1c74119422bd6a52bb7c384b42dca4c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assign formal charges automatically. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a1dda4ed41c70aef0a361682dd9b2b0f9"></a><!-- doxytag: member="OpenBabel::OBMol::_title" ref="a1dda4ed41c70aef0a361682dd9b2b0f9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">_title</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Molecule title. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ad3bcdbfad8eedc0452fe543badd080d5"></a><!-- doxytag: member="OpenBabel::OBMol::_vatom" ref="ad3bcdbfad8eedc0452fe543badd080d5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">_vatom</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of atoms </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#abceac189ade32ef3a6c5f3d13fc38db4">OBMol::BeginAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac8ca499b39cdd5f4a2fc76e7d50deaa9">OBMol::NextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="aba8a1b036f4544f328db00b0939cbaf0"></a><!-- doxytag: member="OpenBabel::OBMol::_atomIds" ref="aba8a1b036f4544f328db00b0939cbaf0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">_atomIds</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of atoms indexed by id </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a3c7208419c7703e947e9a1c365838b98"></a><!-- doxytag: member="OpenBabel::OBMol::_vbond" ref="a3c7208419c7703e947e9a1c365838b98" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">_vbond</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of bonds </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad9d21c9b65678905c6d7d461160fcd9f">OBMol::BeginBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a133c681e9534e7255b1fae272c40a511">OBMol::NextBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ad07702b91130d560479a679ae1a536d2"></a><!-- doxytag: member="OpenBabel::OBMol::_bondIds" ref="ad07702b91130d560479a679ae1a536d2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">_bondIds</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of bonds </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a601fbf5c8e5b7d92281dbe6a124d7f2c"></a><!-- doxytag: member="OpenBabel::OBMol::_dimension" ref="a601fbf5c8e5b7d92281dbe6a124d7f2c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Dimensionality of coordinates. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="aaaeee07c1d80b2638b8b9ace0095c9cd"></a><!-- doxytag: member="OpenBabel::OBMol::_totalCharge" ref="aaaeee07c1d80b2638b8b9ace0095c9cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Total charge on the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a7a92cb97f8aa52f145b2e928cf480a07"></a><!-- doxytag: member="OpenBabel::OBMol::_totalSpin" ref="a7a92cb97f8aa52f145b2e928cf480a07" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Total spin on the molecule (if not specified, assumes lowest possible spin) </p>

</div>
</div>
<a class="anchor" id="a706bc4f751bf06cf864893451a7d21e4"></a><!-- doxytag: member="OpenBabel::OBMol::_c" ref="a706bc4f751bf06cf864893451a7d21e4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">_c</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>coordinate array </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">OBMol::SetConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a95a50ee3e38bea8779b490626f65fc2e">OBMol::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>.</p>

</div>
</div>
<a class="anchor" id="a6fb1d704dcaeb179720ac771745850b1"></a><!-- doxytag: member="OpenBabel::OBMol::_vconf" ref="a6fb1d704dcaeb179720ac771745850b1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">_vconf</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of conformers </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">OBMol::CopyConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a21951fddd6c8a35b21769a1d08718581">OBMol::DeleteConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">OBMol::SetConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a95a50ee3e38bea8779b490626f65fc2e">OBMol::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ad93165c379393f8eb17506f1f9820a1a"></a><!-- doxytag: member="OpenBabel::OBMol::_energy" ref="ad93165c379393f8eb17506f1f9820a1a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">_energy</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>heat of formation </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a370c739afb1e8ed20a96680ec9f1b219"></a><!-- doxytag: member="OpenBabel::OBMol::_natoms" ref="a370c739afb1e8ed20a96680ec9f1b219" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">_natoms</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of atoms. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="a35a920486c1a28ca09de0eeb9dbb174c"></a><!-- doxytag: member="OpenBabel::OBMol::_nbonds" ref="a35a920486c1a28ca09de0eeb9dbb174c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">_nbonds</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of bonds. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="ae1c29d0efe6187e8726962008c81e956"></a><!-- doxytag: member="OpenBabel::OBMol::_residue" ref="ae1c29d0efe6187e8726962008c81e956" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">_residue</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Residue information (if applicable) </p>

</div>
</div>
<a class="anchor" id="a6c2a9726c57abf03a40339776f5d9a0b"></a><!-- doxytag: member="OpenBabel::OBMol::_internals" ref="a6c2a9726c57abf03a40339776f5d9a0b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">_internals</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Internal Coordinates (if applicable) </p>

</div>
</div>
<a class="anchor" id="a5db8eb0124fad1bf66ddaf930b4840f0"></a><!-- doxytag: member="OpenBabel::OBMol::_mod" ref="a5db8eb0124fad1bf66ddaf930b4840f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">_mod</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of nested calls to <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a class="anchor" id="af7811cf8aadbf3b3477c560b0ef2f797"></a><!-- doxytag: member="OpenBabel::OBMol::_vdata" ref="af7811cf8aadbf3b3477c560b0ef2f797" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; <a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Custom data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="mol_8h_source.shtml">mol.h</a></li>
<li><a class="el" href="kekulize_8cpp.shtml">kekulize.cpp</a></li>
<li><a class="el" href="mol_8cpp.shtml">mol.cpp</a></li>
<li><a class="el" href="ring_8cpp.shtml">ring.cpp</a></li>
<li><a class="el" href="transform_8cpp.shtml">transform.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:10 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
