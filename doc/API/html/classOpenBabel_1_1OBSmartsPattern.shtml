<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBSmartsPattern Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBSmartsPattern Class Reference<div class="ingroups"><a class="el" href="group__substructure.shtml">Substructure Searching</a></div></div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBSmartsPattern" -->
<p><code>#include &lt;<a class="el" href="parsmart_8h_source.shtml">openbabel/parsmart.h</a>&gt;</code></p>

<p><a href="classOpenBabel_1_1OBSmartsPattern-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> { <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312">All</a>, 
<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258">Single</a>, 
<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36">AllUnique</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a45c009ff3b4002e84b8f6cc4adbc1a49">~OBSmartsPattern</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ada1c40a99620ab595049ba01934b7ca6">OBSmartsPattern</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6891bcec2059a979cff31cd7970a76a3">WriteMapList</a> (std::ostream &amp;)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Initialization Methods</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init</a> (const char *pattern)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2e8f0a4d3222451efe27f83bbdb4ff10">Init</a> (const std::string &amp;pattern)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Pattern Properties</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a52d9a732c39944ff60d06aeacb96617c">GetSMARTS</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1f769a4a64988a131b80fdda554eda1e">GetSMARTS</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6fcfd4a80bfd7dc324f815cd351bfbdf">Empty</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#afa8720abaf6972d6dac22a8cd1a67225">IsValid</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a0c317a10161689c407f29a6fcacdb852">NumAtoms</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a115132ab8bd21607d00d61bc1ba5cc16">NumBonds</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6b86ace2bf7866c375372ff338fe0889">GetBond</a> (int &amp;src, int &amp;dst, int &amp;ord, int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac924c0155e56518eeca1d013126eb51a">GetAtomicNum</a> (int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af2676c751682747829be9ccc966bda59">GetCharge</a> (int idx)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#abb64da8f114045c4b41dec13919bed9f">GetVectorBinding</a> (int idx) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Matching methods (SMARTS on a specific OBMol)</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">Match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, bool single=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a11be59e45293ecb49945b0a3b6f6a84b">Match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> mtype=All) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#afaa1fd8e8e32a6dfda6fb2d0ecd4e6f5">HasMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aafeef4d5a61d7d6b3c5b6120267359a0">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1626ba77086e16c8ddcdee647937d905">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv, bool single=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a299d4f22a95890bf259cb12b4664a0ea">NumMatches</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt;<br class="typebreak"/>
 &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a548b220ea8c00d0297e81ebc7b31c6d7">BeginMList</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt;<br class="typebreak"/>
 &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7db4777fec63048db41fb890ac0a22ac">EndMList</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ae13bae2e9cf131660d957622c18280b8">ParseSMARTSPattern</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">ParseSMARTSPart</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">SMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa944f62d90a19082249f5231412c6bb6">ParseSMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">ParseSimpleAtomPrimitive</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">ParseComplexAtomPrimitive</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">ParseAtomExpr</a> (int level)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad911e5f6baeec860288054e600b0d8e7">ParseBondPrimitive</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">ParseBondExpr</a> (int level)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#acc0ac2e8af85a3076ef6fa56d353badc">ParseSMARTSString</a> (char *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aca59a47f4b9cd97f80be10a10239448d">ParseSMARTSRecord</a> (char *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac072cb8c2da0204b966173eecb83acfa">GetVectorBinding</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">SMARTSParser</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a> *stat, int prev, int part)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">OBSmartsPrivate *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">_d</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">_growbond</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">_mlist</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">_pat</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">_str</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">_buffer</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">MainPtr</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>SMARTS (SMiles ARbitrary Target Specification) substructure searching. </p>
<p>Substructure search is an incredibly useful tool in the context of a small molecule programming library. Having an efficient substructure search engine reduces the amount of hard code needed for molecule perception, as well as increases the flexibility of certain operations. For instance, atom typing can be easily performed based on hard coded rules of element type and bond orders (or hybridization). Alternatively, atom typing can also be done by matching a set of substructure rules read at run time. In the latter case customization based on application (such as changing the pH) becomes a facile operation. Fortunately for Open Babel and its users, Roger Sayle donated a SMARTS parser which became the basis for SMARTS matching in Open Babel.</p>
<p>For more information on the SMARTS support in Open Babel, see the wiki page: <a href="http://openbabel.org/wiki/SMARTS">http://openbabel.org/wiki/SMARTS</a></p>
<p>The SMARTS matcher, or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>, is a separate object which can match patterns in the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> class. The following code demonstrates how to use the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a> class: </p>
<div class="fragment"><pre class="fragment">    OBMol mol;
    ...
    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a> sp;
    sp.Init(<span class="stringliteral">&quot;CC&quot;</span>);
    sp.Match(mol);
    vector&lt;vector&lt;int&gt; &gt; maplist;
    maplist = sp.GetMapList();
    <span class="comment">//or maplist = sp.GetUMapList();</span>
    <span class="comment">//print out the results</span>
    vector&lt;vector&lt;int&gt; &gt;::iterator i;
    vector&lt;int&gt;::iterator j;
    <span class="keywordflow">for</span> (i = maplist.begin();i != maplist.end();++i)
    {
    <span class="keywordflow">for</span> (j = i-&gt;begin();j != i-&gt;end();++j)
    cout &lt;&lt; j &lt;&lt; <span class="stringliteral">&#39; `;</span>
<span class="stringliteral">    cout &lt;&lt; endl;</span>
<span class="stringliteral">    }</span>
</pre></div><p>The preceding code reads in a molecule, initializes a SMARTS pattern of two single-bonded carbons, and locates all instances of the pattern in the molecule. Note that calling the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">Match()</a> function does not return the results of the substructure match. The results from a match are stored in the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>, and a call to <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> must be made to extract the results. The function <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> returns all matches of a particular pattern while <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> returns only the unique matches. For instance, the pattern [OD1]~C~[OD1] describes a carboxylate group. This pattern will match both atom number permutations of the carboxylate, and if <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> is called, both matches will be returned. If <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> is called only unique matches of the pattern will be returned. A unique match is defined as one which does not cover the identical atoms that a previous match has covered. </p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a747637046be33d7273262104aad8069d"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::MatchType" ref="a747637046be33d7273262104aad8069d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312"></a><!-- doxytag: member="All" ref="a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312" args="" -->All</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258"></a><!-- doxytag: member="Single" ref="a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258" args="" -->Single</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36"></a><!-- doxytag: member="AllUnique" ref="a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36" args="" -->AllUnique</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aa930ba6620356e94683a1d5d4a4a25e3"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::OBSmartsPattern" ref="aa930ba6620356e94683a1d5d4a4a25e3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a45c009ff3b4002e84b8f6cc4adbc1a49"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::~OBSmartsPattern" ref="a45c009ff3b4002e84b8f6cc4adbc1a49" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ada1c40a99620ab595049ba01934b7ca6"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::OBSmartsPattern" ref="ada1c40a99620ab595049ba01934b7ca6" args="(const OBSmartsPattern &amp;cp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td>
          <td class="paramname"><em>cp</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ae13bae2e9cf131660d957622c18280b8"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSMARTSPattern" ref="ae13bae2e9cf131660d957622c18280b8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPattern </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4b00a4b53fa768081ef929d86a26992b"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSMARTSPart" ref="a4b00a4b53fa768081ef929d86a26992b" args="(Pattern *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPart </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a41f4684ab61bddd674bda41fff7bac07"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::SMARTSError" ref="a41f4684ab61bddd674bda41fff7bac07" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * SMARTSError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa944f62d90a19082249f5231412c6bb6"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSMARTSError" ref="aa944f62d90a19082249f5231412c6bb6" args="(Pattern *pat, BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a47075ee8f542860bdbe57689bf785a4c"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSimpleAtomPrimitive" ref="a47075ee8f542860bdbe57689bf785a4c" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseSimpleAtomPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a37c206172f1bf481c71af0985189e3fb"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseComplexAtomPrimitive" ref="a37c206172f1bf481c71af0985189e3fb" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseComplexAtomPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a231ab7f84bd99606983b4edee4523324"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseAtomExpr" ref="a231ab7f84bd99606983b4edee4523324" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseAtomExpr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad911e5f6baeec860288054e600b0d8e7"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseBondPrimitive" ref="ad911e5f6baeec860288054e600b0d8e7" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> * ParseBondPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6f7fd25ffc9470ac5e86db033562b63c"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseBondExpr" ref="a6f7fd25ffc9470ac5e86db033562b63c" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> * ParseBondExpr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acc0ac2e8af85a3076ef6fa56d353badc"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSMARTSString" ref="acc0ac2e8af85a3076ef6fa56d353badc" args="(char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSString </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aca59a47f4b9cd97f80be10a10239448d"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::ParseSMARTSRecord" ref="aca59a47f4b9cd97f80be10a10239448d" args="(char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSRecord </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac072cb8c2da0204b966173eecb83acfa"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetVectorBinding" ref="ac072cb8c2da0204b966173eecb83acfa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetVectorBinding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac5ed3fa8cd8081a98063409742f5326e"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::SMARTSParser" ref="ac5ed3fa8cd8081a98063409742f5326e" args="(Pattern *pat, ParseState *stat, int prev, int part)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * SMARTSParser </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a> *&#160;</td>
          <td class="paramname"><em>stat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a644ca84fee80513682392b90a2841ec6"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::operator=" ref="a644ca84fee80513682392b90a2841ec6" args="(const OBSmartsPattern &amp;cp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td>
          <td class="paramname"><em>cp</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab90ce667d180e55f26e7054ed1c6c8b1"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Init" ref="ab90ce667d180e55f26e7054ed1c6c8b1" args="(const char *pattern)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pattern</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Parse the <code>pattern</code> SMARTS string. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the pattern is a valid SMARTS expression </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1patty.shtml#a55dcef5a39d6765d545e79cff377d332">patty::assign_rules()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abb796c2d6e0cc373ea686939fa8802bf">OBRotorList::OBRotorList()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OBRotorRule::OBRotorRule()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, and <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>.</p>

</div>
</div>
<a class="anchor" id="a2e8f0a4d3222451efe27f83bbdb4ff10"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Init" ref="a2e8f0a4d3222451efe27f83bbdb4ff10" args="(const std::string &amp;pattern)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pattern</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Parse the <code>pattern</code> SMARTS string. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the pattern is a valid SMARTS expression </dd></dl>

</div>
</div>
<a class="anchor" id="a52d9a732c39944ff60d06aeacb96617c"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetSMARTS" ref="a52d9a732c39944ff60d06aeacb96617c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; GetSMARTS </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the SMARTS string which is currently used </dd></dl>

</div>
</div>
<a class="anchor" id="a1f769a4a64988a131b80fdda554eda1e"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetSMARTS" ref="a1f769a4a64988a131b80fdda554eda1e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string&amp; GetSMARTS </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the SMARTS string which is currently used </dd></dl>

</div>
</div>
<a class="anchor" id="a6fcfd4a80bfd7dc324f815cd351bfbdf"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Empty" ref="a6fcfd4a80bfd7dc324f815cd351bfbdf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>If the SMARTS pattern is an empty expression (e.g., invalid) </dd></dl>

</div>
</div>
<a class="anchor" id="afa8720abaf6972d6dac22a8cd1a67225"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::IsValid" ref="afa8720abaf6972d6dac22a8cd1a67225" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>If the SMARTS pattern is a valid expression </dd></dl>

</div>
</div>
<a class="anchor" id="a0c317a10161689c407f29a6fcacdb852"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumAtoms" ref="a0c317a10161689c407f29a6fcacdb852" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of atoms in the SMARTS pattern </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>.</p>

</div>
</div>
<a class="anchor" id="a115132ab8bd21607d00d61bc1ba5cc16"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumBonds" ref="a115132ab8bd21607d00d61bc1ba5cc16" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bonds in the SMARTS pattern </dd></dl>

</div>
</div>
<a class="anchor" id="a6b86ace2bf7866c375372ff338fe0889"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetBond" ref="a6b86ace2bf7866c375372ff338fe0889" args="(int &amp;src, int &amp;dst, int &amp;ord, int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetBond </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Access the bond <code>idx</code> in the internal pattern </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">src</td><td>The index of the beginning atom </td></tr>
    <tr><td class="paramname">dst</td><td>The index of the end atom </td></tr>
    <tr><td class="paramname">ord</td><td>The bond order of this bond </td></tr>
    <tr><td class="paramname">idx</td><td>The index of the bond in the SMARTS pattern </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac924c0155e56518eeca1d013126eb51a"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetAtomicNum" ref="ac924c0155e56518eeca1d013126eb51a" args="(int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetAtomicNum </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the atomic number of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a class="anchor" id="af2676c751682747829be9ccc966bda59"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetCharge" ref="af2676c751682747829be9ccc966bda59" args="(int idx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetCharge </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the formal charge of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a class="anchor" id="abb64da8f114045c4b41dec13919bed9f"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetVectorBinding" ref="abb64da8f114045c4b41dec13919bed9f" args="(int idx) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetVectorBinding </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector binding of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a class="anchor" id="adda681cbeb3f22e43d35105ad4608b91"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Match" ref="adda681cbeb3f22e43d35105ad4608b91" args="(OBMol &amp;mol, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Match </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform SMARTS matching for the pattern specified using <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init()</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
    <tr><td class="paramname">single</td><td>Whether only a single match is required (faster). Default is false. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether matches occurred </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a11be59e45293ecb49945b0a3b6f6a84b"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Match" ref="a11be59e45293ecb49945b0a3b6f6a84b" args="(OBMol &amp;mol, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, MatchType mtype=All) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Match </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>mlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a>&#160;</td>
          <td class="paramname"><em>mtype</em> = <code>All</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform SMARTS matching for the pattern specified using <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init()</a>. This version is (more) thread safe. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
    <tr><td class="paramname">mlist</td><td>The resulting match list </td></tr>
    <tr><td class="paramname">mtype</td><td>The match type to use. Default is All. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether matches occurred </dd></dl>

</div>
</div>
<a class="anchor" id="afaa1fd8e8e32a6dfda6fb2d0ecd4e6f5"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::HasMatch" ref="afaa1fd8e8e32a6dfda6fb2d0ecd4e6f5" args="(OBMol &amp;mol) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Thread safe check for any SMARTS match </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether there exists any match </dd></dl>

</div>
</div>
<a class="anchor" id="aafeef4d5a61d7d6b3c5b6120267359a0"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::RestrictedMatch" ref="aafeef4d5a61d7d6b3c5b6120267359a0" args="(OBMol &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>pairs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>.</p>

</div>
</div>
<a class="anchor" id="a1626ba77086e16c8ddcdee647937d905"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::RestrictedMatch" ref="a1626ba77086e16c8ddcdee647937d905" args="(OBMol &amp;mol, OBBitVec &amp;bv, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a299d4f22a95890bf259cb12b4664a0ea"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumMatches" ref="a299d4f22a95890bf259cb12b4664a0ea" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumMatches </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of non-unique SMARTS matches To get the number of unique SMARTS matches, query <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a>-&gt;size() </dd></dl>

</div>
</div>
<a class="anchor" id="a5633f1fa229ec0ff8fd3991e09d791c2"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetMapList" ref="a5633f1fa229ec0ff8fd3991e09d791c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;&amp; GetMapList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the entire list of non-unique matches for this pattern </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>.</p>

</div>
</div>
<a class="anchor" id="a548b220ea8c00d0297e81ebc7b31c6d7"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::BeginMList" ref="a548b220ea8c00d0297e81ebc7b31c6d7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator BeginMList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator over the (non-unique) match list, starting at the beginning </dd></dl>

</div>
</div>
<a class="anchor" id="a7db4777fec63048db41fb890ac0a22ac"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::EndMList" ref="a7db4777fec63048db41fb890ac0a22ac" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator EndMList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator over the non-unique match list, set to the end </dd></dl>

</div>
</div>
<a class="anchor" id="ade3dbfa0989e51224e19b38932b05c1b"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetUMapList" ref="ade3dbfa0989e51224e19b38932b05c1b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; int &gt; &gt; &amp; GetUMapList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the entire list of unique matches for this pattern A unique match is defined as one which does not cover the identical atoms that a previous match has covered.</dd></dl>
<p>For instance, the pattern [OD1]~C~[OD1] describes a carboxylate group. This pattern will match both atom number permutations of the carboxylate, and if <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> is called, both matches will be returned. If <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> is called only unique matches of the pattern will be returned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>.</p>

</div>
</div>
<a class="anchor" id="a6891bcec2059a979cff31cd7970a76a3"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::WriteMapList" ref="a6891bcec2059a979cff31cd7970a76a3" args="(std::ostream &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteMapList </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Debugging -- write a list of matches to the output stream. </p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a36fb3feb1132393275cf6164d3ccf2a9"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_d" ref="a36fb3feb1132393275cf6164d3ccf2a9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBSmartsPrivate* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">_d</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Internal data storage for future expansion. </p>

</div>
</div>
<a class="anchor" id="a9aa91437a607c7d33353f38857add180"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_growbond" ref="a9aa91437a607c7d33353f38857add180" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;bool&gt; <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">_growbond</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000064">Deprecated:</a></b></dt><dd>(Not used) </dd></dl>

</div>
</div>
<a class="anchor" id="ab4d28e672d513c538ae9ff92e409bece"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_mlist" ref="ab4d28e672d513c538ae9ff92e409bece" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt; <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">_mlist</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The list of matches. </p>

</div>
</div>
<a class="anchor" id="ad43f81cd2cc637e810b38c7686d9917d"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_pat" ref="ad43f81cd2cc637e810b38c7686d9917d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">_pat</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The parsed SMARTS pattern. </p>

</div>
</div>
<a class="anchor" id="a433559ab344e4266e3d109bce29ee417"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_str" ref="a433559ab344e4266e3d109bce29ee417" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">_str</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The string of the SMARTS expression. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">OBSmartsPattern::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="af076ed3307ccc419f46ed857bb321a2f"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_buffer" ref="af076ed3307ccc419f46ed857bb321a2f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">_buffer</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a24f5f7e6d2d4aeccecabdbbf89719bc5"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::LexPtr" ref="a24f5f7e6d2d4aeccecabdbbf89719bc5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2860b525fbfe4f29b416c37f8b13f561"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::MainPtr" ref="a2860b525fbfe4f29b416c37f8b13f561" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">MainPtr</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="parsmart_8h_source.shtml">parsmart.h</a></li>
<li><a class="el" href="parsmart_8cpp.shtml">parsmart.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
