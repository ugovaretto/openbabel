<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBSquarePlanarStereo Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBSquarePlanarStereo Class Reference<div class="ingroups"><a class="el" href="group__stereo.shtml">Stereochemistry</a></div></div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBSquarePlanarStereo" --><!-- doxytag: inherits="OpenBabel::OBTetraPlanarStereo" -->
<p><code>#include &lt;<a class="el" href="squareplanar_8h_source.shtml">openbabel/stereo/squareplanar.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBSquarePlanarStereo:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBSquarePlanarStereo__inherit__graph.png" border="0" usemap="#OBSquarePlanarStereo_inherit__map" alt="Inheritance graph"/></div>
<map name="OBSquarePlanarStereo_inherit__map" id="OBSquarePlanarStereo_inherit__map">
<area shape="rect" id="node2" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml" title="Base class for handling and storing planar stereochemistry with 4 reference atoms." alt="" coords="11,83,176,112"/><area shape="rect" id="node4" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes." alt="" coords="32,5,155,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBSquarePlanarStereo-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stereochemical configuration for square planar stereocenters.  <a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#af4b70a85fab1f7bf645e897c8bcb2532">OBSquarePlanarStereo</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#aeb6c711521f7a16d819df0d4b6da1999">~OBSquarePlanarStereo</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a74dbdaf4c0f5f8532781027653d3de2b">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *mol) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#aae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac72c28db8b5bb8911845ada56220a1e0">GetAttribute</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac20b99b31895c99422fb1244def6e213">GetDataType</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac9527475c246fadbbab63a35376fd5fe">GetValue</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ad080c58f230c474935ed3e27cb2ba906">GetOrigin</a> () const </td></tr>
<tr><td colspan="2"><div class="groupHeader">SquarePlanar stereochemistry</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a25d3547525ae04f2769c976552a55b34">GetType</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#afa8720abaf6972d6dac22a8cd1a67225">IsValid</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ad3a3a7b99c061bc1e1523aef57c8cf35">SetConfig</a> (const <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> &amp;config)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a7fdbb2f323900cb0fdeb1d1cbcb0a3fe">GetConfig</a> (<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> shape=OBStereo::ShapeU) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a09aa07aa424e8bd97a7f82f4a4febbe4">GetConfig</a> (unsigned long start, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> shape=OBStereo::ShapeU) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a0264ff990b026468309041810d7c43cc">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ac0773f2ca467c400db0a32bf809dbd9f">operator!=</a> (const <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;other) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Query methods to compare stereochemistry.</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ab22bff18bdd19866c40258e1c6956186">IsTrans</a> (unsigned long id1, unsigned long id2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ae7a5da51c72f6c85ed7d32de403ee11e">IsCis</a> (unsigned long id1, unsigned long id2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a092a8f4dfd75b55616825922f4bdc2ad">GetTransRef</a> (unsigned long id) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; unsigned long &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a8ce8344301c0f105778522147c26c675">GetCisRefs</a> (unsigned long id) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Geniric (for all OBStereo::Type) stereochemistry</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#acd313cc12ec2b66926e4d0102042732a">GetMolecule</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">SetSpecified</a> (bool specified)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#a1a34764224cb3e3c4f1f84a4a3366617">IsSpecified</a> () const </td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename ConfigType &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">static ConfigType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml#a2feb933d2ed497f473d610552e77d529">ToConfig</a> (const ConfigType &amp;cfg, unsigned long start, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> shape=OBStereo::ShapeU)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Class for handling and storing square planar stereochemistry. </p>
<div class="image">
<img src="squareplanar.png" alt="squareplanar.png"/>
</div>
<p>The <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml" title="Class for handling and storing square planar stereochemistry.">OBSquarePlanarStereo</a> class is used to represent square planar stereochemistry. Like all <a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml" title="Base class for handling and storing planar stereochemistry with 4 reference atoms.">OBTetraPlanarStereo</a> subclasses, it uses the <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> parameters to set/get the reference ids.</p>
<p>This class works with reference ids only, it never uses the molecule to get more information. Like all stereo classes, errors, warnings or info is reported using <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a>. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af4b70a85fab1f7bf645e897c8bcb2532"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::OBSquarePlanarStereo" ref="af4b70a85fab1f7bf645e897c8bcb2532" args="(OBMol *mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="aeb6c711521f7a16d819df0d4b6da1999"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::~OBSquarePlanarStereo" ref="aeb6c711521f7a16d819df0d4b6da1999" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a25d3547525ae04f2769c976552a55b34"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetType" ref="a25d3547525ae04f2769c976552a55b34" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> GetType </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> for this object. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3" title="Square-planar stereochemistry.">OBStereo::SquarePlanar</a> </dd></dl>

<p>Implements <a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#a6cf9ac8023da9840e4cb56d138431e45">OBStereoBase</a>.</p>

</div>
</div>
<a class="anchor" id="afa8720abaf6972d6dac22a8cd1a67225"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::IsValid" ref="afa8720abaf6972d6dac22a8cd1a67225" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if this object is valid. This object is valid if all (center and and 4 reference) atom ids are set. </dd></dl>

</div>
</div>
<a class="anchor" id="ad3a3a7b99c061bc1e1523aef57c8cf35"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::SetConfig" ref="ad3a3a7b99c061bc1e1523aef57c8cf35" args="(const Config &amp;config)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConfig </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> &amp;&#160;</td>
          <td class="paramname"><em>config</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set the configuration using a <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct. </p>

</div>
</div>
<a class="anchor" id="a7fdbb2f323900cb0fdeb1d1cbcb0a3fe"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetConfig" ref="a7fdbb2f323900cb0fdeb1d1cbcb0a3fe" args="(OBStereo::Shape shape=OBStereo::ShapeU) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> GetConfig </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a>&#160;</td>
          <td class="paramname"><em>shape</em> = <code>OBStereo::ShapeU</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the configuration as <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct. </p>

</div>
</div>
<a class="anchor" id="a09aa07aa424e8bd97a7f82f4a4febbe4"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetConfig" ref="a09aa07aa424e8bd97a7f82f4a4febbe4" args="(unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> GetConfig </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a>&#160;</td>
          <td class="paramname"><em>shape</em> = <code>OBStereo::ShapeU</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the configuration as <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct and ensure refs[0] is equal to <code>start</code>. </p>

</div>
</div>
<a class="anchor" id="a0264ff990b026468309041810d7c43cc"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::operator==" ref="a0264ff990b026468309041810d7c43cc" args="(const OBSquarePlanarStereo &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compare the stereochemistry stored in the <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct with the stereochemistry specified in the <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct from <code>other</code>.</p>
<p>Equal to operator. Comparing <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">OBSquarePlanarStereo::Config</a> structs is done using the information stored in the struct's data members (i.e. center, refs and shape).</p>
<p>There are a number of cases resuling in false being returned:</p>
<ul>
<li><code>center</code> atom ids don't match</li>
<li>One of the Refs lists does not contain 4 elements.</li>
<li>2 or more <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a> values in a single <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct</li>
<li>(The two <code>refs</code> don't share a single common element)</li>
</ul>
<p>In the simplest case where both <code>refs</code> contain exactly the same elements (<a class="el" href="structOpenBabel_1_1OBStereo.shtml#abb14ec41d65b0dc4d49707a713da483f">OBStereo::ContainsSameRefs()</a>), coould include <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a>), both <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct are normalized to <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OBStereo::ShapeU</a> starting with the same element. After this normalization, there are two possible orientations to overlay the shape on the double bond. From the illustration below, it can be seen only <code>refs</code>[2] has to be checked in order to conclude both <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> structs have the same stereochemistry.</p>
<div class="fragment"><pre class="fragment">
         1   4    1      4    1------4
          \ /     |      |           |
           C      |      |           |
          / \     |      |           |
         2   3    2------3    2------3

                  1 2 3 4     1 2 3 4
                  |   |       |   |      &lt;- in any case, refs[0] &amp; refs[2] remain unchanged
                  1 2 3 4     1 4 3 2
        </pre></div><p>When comparing a <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> struct with explicit hydrogen(s) to one with implicit hydrogen(s), both <code>refs</code> are also normalized to <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OBStereo::ShapeU</a> starting with the same common element. This shared element cannot be <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a>. Depending on the position of the <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a> element(s) in the <code>refs</code>, 3 cases are possible:</p>
<div class="fragment"><pre class="fragment">

         refs[2] != OBStereo::ImplicitId:

           (analog to the case above where they contained the same elements )

           1 2 3 4
           |   |      &lt;- refs[0] &amp; refs[2] remain unchanged
           1 H 3 H

         else:

           1 2 3 4
           |     |    &lt;- refs[0] &amp; refs[3] remain unchanged
           1 H H 4

           1 2 3 4
           | |        &lt;- refs[0] &amp; refs[1] remain unchanged
           1 2 H H
        </pre></div><p>In each case, the orientation of the U shape is also defined since there can be only one <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a> for each side of the double bond.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if both <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> structs represent the stereochemistry. </dd></dl>
 
</div>
</div>
<a class="anchor" id="ac0773f2ca467c400db0a32bf809dbd9f"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::operator!=" ref="ac0773f2ca467c400db0a32bf809dbd9f" args="(const OBSquarePlanarStereo &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Not equal to operator. This is the inverse of the Equal to operator==.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the two <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml" title="Stereochemical configuration for square planar stereocenters.">Config</a> structs represent a different stereochemistry. </dd></dl>

</div>
</div>
<a class="anchor" id="a74dbdaf4c0f5f8532781027653d3de2b"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::Clone" ref="a74dbdaf4c0f5f8532781027653d3de2b" args="(OBBase *mol) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">OBGenericData</a>.</p>

</div>
</div>
<a class="anchor" id="ab22bff18bdd19866c40258e1c6956186"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::IsTrans" ref="ab22bff18bdd19866c40258e1c6956186" args="(unsigned long id1, unsigned long id2) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTrans </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the two reference ids are placed trans configuration. </dd></dl>

</div>
</div>
<a class="anchor" id="ae7a5da51c72f6c85ed7d32de403ee11e"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::IsCis" ref="ae7a5da51c72f6c85ed7d32de403ee11e" args="(unsigned long id1, unsigned long id2) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCis </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the two reference ids are placed in a cis configuration. </dd></dl>

</div>
</div>
<a class="anchor" id="a092a8f4dfd75b55616825922f4bdc2ad"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetTransRef" ref="a092a8f4dfd75b55616825922f4bdc2ad" args="(unsigned long id) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long GetTransRef </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="image">
<img src="gettransref.png" alt="gettransref.png"/>
</div>
<p> Get the reference id trans from reference <code>id</code>. </p>

</div>
</div>
<a class="anchor" id="a8ce8344301c0f105778522147c26c675"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetCisRefs" ref="a8ce8344301c0f105778522147c26c675" args="(unsigned long id) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned long&gt; GetCisRefs </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the reference id cis from reference <code>id</code>. </p>

</div>
</div>
<a class="anchor" id="a2feb933d2ed497f473d610552e77d529"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::ToConfig" ref="a2feb933d2ed497f473d610552e77d529" args="(const ConfigType &amp;cfg, unsigned long start, OBStereo::Shape shape=OBStereo::ShapeU)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static ConfigType ToConfig </td>
          <td>(</td>
          <td class="paramtype">const ConfigType &amp;&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a>&#160;</td>
          <td class="paramname"><em>shape</em> = <code>OBStereo::ShapeU</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acd313cc12ec2b66926e4d0102042732a"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetMolecule" ref="acd313cc12ec2b66926e4d0102042732a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* GetMolecule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the molecule. This can be used by subclasses when more information is needed (e.g. <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a407cfffec2530eb5bae418830e8e5f6c">OBCisTransStereo::GetCisRef</a>, ...). </p>

</div>
</div>
<a class="anchor" id="aa03f9b7e07be400ad77ba2306a2f1619"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::SetSpecified" ref="aa03f9b7e07be400ad77ba2306a2f1619" args="(bool specified)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSpecified </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>specified</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set whether the stereochemistry is specified. Comparing a specified <a class="el" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a> derived class (or it's Config struct) with an unspecified one, always returns true. </p>

</div>
</div>
<a class="anchor" id="a1a34764224cb3e3c4f1f84a4a3366617"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::IsSpecified" ref="a1a34764224cb3e3c4f1f84a4a3366617" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpecified </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the stereochemistry is specified. </dd></dl>

</div>
</div>
<a class="anchor" id="aae3d15983201a2a115701b2c538fef77"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::SetAttribute" ref="aae3d15983201a2a115701b2c538fef77" args="(const std::string &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the attribute (key), which can be used to retrieve this data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="a45613e34598a9584fb0120ef3fdab9e0"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::SetOrigin" ref="a45613e34598a9584fb0120ef3fdab9e0" args="(const DataOrigin s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the origin of this data, which can be used to filter the data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">OBMol::FindAngles()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="ac72c28db8b5bb8911845ada56220a1e0"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetAttribute" ref="ac72c28db8b5bb8911845ada56220a1e0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="ac20b99b31895c99422fb1244def6e213"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetDataType" ref="ac20b99b31895c99422fb1244def6e213" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac9527475c246fadbbab63a35376fd5fe"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetValue" ref="ac9527475c246fadbbab63a35376fd5fe" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Base class returns a default value (the attribute type) but should never be called. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBPairData.shtml#ac9527475c246fadbbab63a35376fd5fe">OBPairData</a>, and <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#ac9527475c246fadbbab63a35376fd5fe">OBCommentData</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>.</p>

</div>
</div>
<a class="anchor" id="ad080c58f230c474935ed3e27cb2ba906"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::GetOrigin" ref="ad080c58f230c474935ed3e27cb2ba906" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="adceb77134f15418a66cf1124dcef1b51"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::_attr" ref="adceb77134f15418a66cf1124dcef1b51" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>attribute tag (e.g., "UnitCell", "Comment" or "Author") </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a5361d45ced4133323de80d61ae5ecf05">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a class="anchor" id="a31291823d487a4a47f24aae5870505ef"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::_type" ref="a31291823d487a4a47f24aae5870505ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>attribute type -- declared for each subclass </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a5361d45ced4133323de80d61ae5ecf05">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a class="anchor" id="a239606b62a534e4df7626ea0cfdfb856"></a><!-- doxytag: member="OpenBabel::OBSquarePlanarStereo::_source" ref="a239606b62a534e4df7626ea0cfdfb856" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>source of data for accounting </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#a7c2db1828edcca7ff07c8591744ec3a4">OBConformerData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#ae1e415e9a406f4965be7352a3c66fa3a">OBSymmetryData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#ab526e7eddb908b711e19aa355d133241">OBTorsionData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#af0af03b552fac05db59787be08a443eb">OBAngleData::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a2d8a571296610389b9427aef139b1d8d">OBChiralData::operator=()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="squareplanar_8h_source.shtml">squareplanar.h</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
