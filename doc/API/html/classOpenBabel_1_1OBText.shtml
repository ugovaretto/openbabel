<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBText Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1OBText.shtml">OBText</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">OBText Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBText" --><!-- doxytag: inherits="OpenBabel::OBBase" -->
<p><code>#include &lt;<a class="el" href="text_8h_source.shtml">openbabel/text.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBText:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1OBText__inherit__graph.png" border="0" usemap="#OBText_inherit__map" alt="Inheritance graph"/></div>
<map name="OBText_inherit__map" id="OBText_inherit__map">
<area shape="rect" id="node2" href="classOpenBabel_1_1OBBase.shtml" title="Base Class." alt="" coords="5,5,83,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1OBText-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml#a97a5fa01d30a0d991fea41e2478acc54">OBText</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml#a9d3a901e509f984a752f7d978214e437">OBText</a> (const std::string &amp;text)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml#a1af3f7fd8b95cc66e7599caca454f8ef">GetText</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml#ab143590b7787d3410e15294b771bf37e">GetText</a> (std::string::size_type &amp;pos, bool ToInsertOnly=false) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml#a8008c108280948ebd79830f222068455">SetText</a> (const std::string &amp;text)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab2f0cea1c162bbe8dd603528a3da5c87">CastAndClear</a> (bool clear=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6726eb1601555e8e7d712c43416e6af7">GetTitle</a> (bool replaceNewlines=true) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a366c8a142b8c16554597e82320dfd0e0">SetTitle</a> (const char *)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aaf61a3ecb8f2926aaf117299388d43c2">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#adb6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a69c3286ed127949ba747afcc5b9a514a">DataSize</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#afb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">ClassDescription</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>An object containing just text. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a97a5fa01d30a0d991fea41e2478acc54"></a><!-- doxytag: member="OpenBabel::OBText::OBText" ref="a97a5fa01d30a0d991fea41e2478acc54" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBText.shtml">OBText</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a9d3a901e509f984a752f7d978214e437"></a><!-- doxytag: member="OpenBabel::OBText::OBText" ref="a9d3a901e509f984a752f7d978214e437" args="(const std::string &amp;text)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBText.shtml">OBText</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a1af3f7fd8b95cc66e7599caca454f8ef"></a><!-- doxytag: member="OpenBabel::OBText::GetText" ref="a1af3f7fd8b95cc66e7599caca454f8ef" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetText </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all the text </dd></dl>

</div>
</div>
<a class="anchor" id="ab143590b7787d3410e15294b771bf37e"></a><!-- doxytag: member="OpenBabel::OBText::GetText" ref="ab143590b7787d3410e15294b771bf37e" args="(std::string::size_type &amp;pos, bool ToInsertOnly=false) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetText </td>
          <td>(</td>
          <td class="paramtype">std::string::size_type &amp;&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ToInsertOnly</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>text from position </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>up to, but not including, the line containing the next occurrence of "OPENBABEL_INSERT". </td></tr>
    <tr><td class="paramname">pos</td><td>is updated to the start of the next line. If "OPENBABEL_INSERT" is not found, and </td></tr>
    <tr><td class="paramname">ToInsertOnly</td><td>is false the text up to the end of the file is returned and </td></tr>
    <tr><td class="paramname">pos</td><td>is set to 0. If "OPENBABEL_INSERT" is not found, and </td></tr>
    <tr><td class="paramname">ToInsertOnly</td><td>is true an empty string is return and </td></tr>
    <tr><td class="paramname">pos</td><td>is unchaged.</td></tr>
  </table>
  </dd>
</dl>
<p>Inserting <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> output into boilerplate text. Suppose you wanted to insert XML output from OB into into a template XML document using the babel interface babel template.text inputfile.xxx outputfile.yyy The template file could contain a line:</p>
<p>and still be well-formed XML. The template file would be read by TextFormat and passed to the output as an <a class="el" href="classOpenBabel_1_1OBText.shtml" title="An object containing just text.">OBText</a> object. This could be processed in the output format's WriteChemObject() or WriteMolecule() in the following way (see cmlreactformat.cpp) <code> OBText* ptext = dynamic_cast&lt;OBText*&gt;(pOb); if(ptext) { string::size_type pos = 0; pConv-&gt;GetOutStream() &lt;&lt; ptext-&gt;GetText(pos); //Output text up to insertion point _text = ptext-&gt;GetText(pos); //Save text after insertion point to be output at the end } </code> </p>

</div>
</div>
<a class="anchor" id="a8008c108280948ebd79830f222068455"></a><!-- doxytag: member="OpenBabel::OBText::SetText" ref="a8008c108280948ebd79830f222068455" args="(const std::string &amp;text)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetText </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad12fd937da5f4b0c4562888252fe214b"></a><!-- doxytag: member="OpenBabel::OBText::Clear" ref="ad12fd937da5f4b0c4562888252fe214b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear any and all data associated with this object. </p>
<p>This method can be called by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">OBConversion::Read()</a> before reading data. Derived classes should be sure to call <a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b" title="Clear any and all data associated with this object.">OBBase::Clear()</a> to remove inherited generic data.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the call was successful. </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.1. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">OBMol</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad12fd937da5f4b0c4562888252fe214b">OBAtom</a>, <a class="el" href="classOpenBabel_1_1OBReaction.shtml#ad12fd937da5f4b0c4562888252fe214b">OBReaction</a>, and <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue::Clear()</a>.</p>

</div>
</div>
<a class="anchor" id="abdc8ffeb0749b563e1108a9ceaa0b394"></a><!-- doxytag: member="OpenBabel::OBText::DoTransformations" ref="abdc8ffeb0749b563e1108a9ceaa0b394" args="(const std::map&lt; std::string, std::string &gt; *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* DoTransformations </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Perform a set of transformations specified by the user</p>
<p>Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> Base type does nothing </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol</a>.</p>

</div>
</div>
<a class="anchor" id="a6bb6ed5c064e3957d8dd03aba51e61f7"></a><!-- doxytag: member="OpenBabel::OBText::ClassDescription" ref="a6bb6ed5c064e3957d8dd03aba51e61f7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const char* ClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A list of descriptions of command-line options for <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations()</a> </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol</a>, and <a class="el" href="classOpenBabel_1_1OBReaction.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">OBReaction</a>.</p>

</div>
</div>
<a class="anchor" id="ab2f0cea1c162bbe8dd603528a3da5c87"></a><!-- doxytag: member="OpenBabel::OBText::CastAndClear" ref="ab2f0cea1c162bbe8dd603528a3da5c87" args="(bool clear=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clear</em> = <code>true</code></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>By default clears the object. Called from ReadMolecule of most format classes. </p>

</div>
</div>
<a class="anchor" id="a6726eb1601555e8e7d712c43416e6af7"></a><!-- doxytag: member="OpenBabel::OBText::GetTitle" ref="a6726eb1601555e8e7d712c43416e6af7" args="(bool replaceNewlines=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetTitle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replaceNewlines</em> = <code>true</code></td><td>)</td>
          <td> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Base type does nothing Made virtual around r3535 to simplify code which passes around OBBase*. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6f656d9b9241846d93d6bfbe2ee89818">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a class="anchor" id="a366c8a142b8c16554597e82320dfd0e0"></a><!-- doxytag: member="OpenBabel::OBText::SetTitle" ref="a366c8a142b8c16554597e82320dfd0e0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a class="anchor" id="a86dd58fc1da5652d70e823fa77cc1637"></a><!-- doxytag: member="OpenBabel::OBText::HasData" ref="a86dd58fc1da5652d70e823fa77cc1637" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">OBDescriptor::MatchPairData()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="a01b429ffcaf47cf265acd439ed2faca0"></a><!-- doxytag: member="OpenBabel::OBText::HasData" ref="a01b429ffcaf47cf265acd439ed2faca0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div>
<a class="anchor" id="a6cb103f12f49d86132ece200000da830"></a><!-- doxytag: member="OpenBabel::OBText::HasData" ref="a6cb103f12f49d86132ece200000da830" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a797e5b4d20b6233062d2fdba78a08e06"></a><!-- doxytag: member="OpenBabel::OBText::DeleteData" ref="a797e5b4d20b6233062d2fdba78a08e06" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a class="anchor" id="ab586df65e3f115b69510820b34098ce9"></a><!-- doxytag: member="OpenBabel::OBText::DeleteData" ref="ab586df65e3f115b69510820b34098ce9" args="(OBGenericData *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>gd</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aaf61a3ecb8f2926aaf117299388d43c2"></a><!-- doxytag: member="OpenBabel::OBText::DeleteData" ref="aaf61a3ecb8f2926aaf117299388d43c2" args="(std::vector&lt; OBGenericData * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vg</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete all of the given generic data from this object. </p>

</div>
</div>
<a class="anchor" id="aa068a2a7b64d2ee73aedb8c6e3cf0c4c"></a><!-- doxytag: member="OpenBabel::OBText::DeleteData" ref="aa068a2a7b64d2ee73aedb8c6e3cf0c4c" args="(const std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Deletes the generic data with the specified attribute, returning false if not found. </p>

</div>
</div>
<a class="anchor" id="adb6b0ec89bfea783825b3b466e4dbc00"></a><!-- doxytag: member="OpenBabel::OBText::SetData" ref="adb6b0ec89bfea783825b3b466e4dbc00" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Adds a data object; does nothing if d==NULL. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa6f692332837387535e337413d0100de"></a><!-- doxytag: member="OpenBabel::OBText::CloneData" ref="aa6f692332837387535e337413d0100de" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Adds a copy of a data object; does nothing if d == NULL </p>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a class="anchor" id="a69c3286ed127949ba747afcc5b9a514a"></a><!-- doxytag: member="OpenBabel::OBText::DataSize" ref="a69c3286ed127949ba747afcc5b9a514a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t DataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div>
<a class="anchor" id="aee672d91b694547fb072fdaa8e03cfe9"></a><!-- doxytag: member="OpenBabel::OBText::GetData" ref="aee672d91b694547fb072fdaa8e03cfe9" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">OpenBabel::CorrectChirality()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">OpenBabel::GetAtomSymClass()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div>
<a class="anchor" id="a22f0eade8b5924eec28ad50f0ce2031f"></a><!-- doxytag: member="OpenBabel::OBText::GetData" ref="a22f0eade8b5924eec28ad50f0ce2031f" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a483b277678a8ca48998742c80985fd0b"></a><!-- doxytag: member="OpenBabel::OBText::GetData" ref="a483b277678a8ca48998742c80985fd0b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a class="anchor" id="a90a551ff0a0ed3fa58745dff0ecacdaa"></a><!-- doxytag: member="OpenBabel::OBText::GetData" ref="a90a551ff0a0ed3fa58745dff0ecacdaa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a class="anchor" id="aa959146c3f7b458009dc04f61b5a2e7f"></a><!-- doxytag: member="OpenBabel::OBText::GetData" ref="aa959146c3f7b458009dc04f61b5a2e7f" args="(DataOrigin source)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div>
<a class="anchor" id="afb56decc1b824c9fad980fc22e1d778c"></a><!-- doxytag: member="OpenBabel::OBText::GetAllData" ref="afb56decc1b824c9fad980fc22e1d778c" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a6898b04c792072e4ace54885e9ff7b10">OBBuilder::CorrectStereoBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a15b47c65393d46fde62d1f0a19bcf9fa"></a><!-- doxytag: member="OpenBabel::OBText::BeginData" ref="a15b47c65393d46fde62d1f0a19bcf9fa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a117c836710dd3aaa8748509262a5c280"></a><!-- doxytag: member="OpenBabel::OBText::EndData" ref="a117c836710dd3aaa8748509262a5c280" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="af7811cf8aadbf3b3477c560b0ef2f797"></a><!-- doxytag: member="OpenBabel::OBText::_vdata" ref="af7811cf8aadbf3b3477c560b0ef2f797" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; <a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Custom data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="text_8h_source.shtml">text.h</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
