<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>XMLBaseFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">XMLBaseFormat Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::XMLBaseFormat" --><!-- doxytag: inherits="OpenBabel::OBFormat" -->
<p><code>#include &lt;<a class="el" href="xml_8h_source.shtml">openbabel/xml.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for XMLBaseFormat:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1XMLBaseFormat__inherit__graph.png" border="0" usemap="#XMLBaseFormat_inherit__map" alt="Inheritance graph"/></div>
<map name="XMLBaseFormat_inherit__map" id="XMLBaseFormat_inherit__map">
<area shape="rect" id="node7" href="classOpenBabel_1_1XMLMoleculeFormat.shtml" title="Abstract class for XML formats which represent molecules." alt="" coords="5,237,165,267"/><area shape="rect" id="node2" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats." alt="" coords="40,83,131,112"/><area shape="rect" id="node4" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="44,5,127,35"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1XMLBaseFormat-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char <br class="typebreak"/>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <br class="typebreak"/>
PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">~XMLBaseFormat</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab3d80dde715e0505ef1818a621ecd888">NamespaceURI</a> () const =0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">DoElement</a> (const std::string &amp;ElName)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a> (const std::string &amp;ElName)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">EndTag</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ab87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::type_info &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a73f632a573cbbfecf9e00f04c5ce73e9">GetType</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a47a434f63a789f142966304e35aa6952">RegisterFormat</a> (const char *ID, const char *MIME=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#aca0c09ee719aba9da34cb281aa0db6a5">FormatFromMIME</a> (const char *MIME)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">xmlTextReaderPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9d9e2a08b0659f0bc93d3eb7eaf8f05d">reader</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">xmlTextWriterPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9569f81d2916200422a7927572913336">writer</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a> (int n, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr><td colspan="2"><h2><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">ind</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">nsdecl</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Abstract class containing common functionality for XML formats. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a429ba96990b23caaca913a23345f3793"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::~XMLBaseFormat" ref="a429ba96990b23caaca913a23345f3793" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab3d80dde715e0505ef1818a621ecd888"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::NamespaceURI" ref="ab3d80dde715e0505ef1818a621ecd888" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* NamespaceURI </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6b007f43192f527944eef5136e4b2703"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::DoElement" ref="a6b007f43192f527944eef5136e4b2703" args="(const std::string &amp;ElName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool DoElement </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ElName</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0e59feda5d3eb85765b53cf4b42f77ef"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::EndElement" ref="a0e59feda5d3eb85765b53cf4b42f77ef" args="(const std::string &amp;ElName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool EndElement </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ElName</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad2f75af8aac19e5c3c48dc26c1fa319c"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::EndTag" ref="ad2f75af8aac19e5c3c48dc26c1fa319c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* EndTag </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The tag at the end of the chemical object e.g. "/molecule&gt;". </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat::SkipObjects()</a>.</p>

</div>
</div>
<a class="anchor" id="a9d9e2a08b0659f0bc93d3eb7eaf8f05d"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::reader" ref="a9d9e2a08b0659f0bc93d3eb7eaf8f05d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextReaderPtr reader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a9569f81d2916200422a7927572913336"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::writer" ref="a9569f81d2916200422a7927572913336" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextWriterPtr writer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4964d8defcb0f638a51963d436188f12"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::OutputToStream" ref="a4964d8defcb0f638a51963d436188f12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OutputToStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adfcd8e84805c262d8cbca79a83f9d4cc"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::SkipObjects" ref="adfcd8e84805c262d8cbca79a83f9d4cc" args="(int n, OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pConv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Skip past first n objects in input stream (or current one with n=0) Returns 1 on success, -1 on error and 0 if not implemented </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">OBFormat</a>.</p>

</div>
</div>
<a class="anchor" id="a45db88b29eb37e9dd105bf4032e421d2"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::TypeID" ref="a45db88b29eb37e9dd105bf4032e421d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Redefined by each plugin type: "formats", "fingerprints", etc. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">OBPlugin</a>.</p>

</div>
</div>
<a class="anchor" id="a1e309febfaef70cc3c8d98afc1540931"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::ReadMolecule" ref="a1e309febfaef70cc3c8d98afc1540931" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The "API" interface Read function. </p>
<p>Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="a6044ced825a2a83b7cfe7c45eea63c99"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::ReadChemObject" ref="a6044ced825a2a83b7cfe7c45eea63c99" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The "Convert" interface Read function. </p>
<p>Possibly reads multiple new objects on the heap and subjects them to its DoTransformations() function, which may delete them again. Sends result to pConv-&gt;AddChemObject() </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">XMLMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">OBMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>.</p>

</div>
</div>
<a class="anchor" id="a663171ec9788e2d1621d374848b3888b"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::WriteMolecule" ref="a663171ec9788e2d1621d374848b3888b" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The "API" interface Write function. </p>
<p>Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>false on error. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="a5ea5d9623cd9594549a52e116caecaa2"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::WriteChemObject" ref="a5ea5d9623cd9594549a52e116caecaa2" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The "Convert" interface Write function. </p>
<p>Writes a single object Deletes the object after writing </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>false on error </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">XMLMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">OBMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>.</p>

</div>
</div>
<a class="anchor" id="ab87525f269e7819d8462f450d30d56a7"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::Description" ref="ab87525f269e7819d8462f450d30d56a7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. </p>
<p>Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">OBConversion::RegisterOptionParam()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a class="anchor" id="a1870e0d80a223ef4e1661be80029dbec"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::TargetClassDescription" ref="a1870e0d80a223ef4e1661be80029dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A decription of the chemical object converted by this format. </p>
<p>If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1717ba1ed3f8131d7a0f3b0d6031f5af">OBConversion::ReportNumberConverted()</a>.</p>

</div>
</div>
<a class="anchor" id="a73f632a573cbbfecf9e00f04c5ce73e9"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::GetType" ref="a73f632a573cbbfecf9e00f04c5ce73e9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const type_info &amp; GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the type of chemical object used by the format. Defaults to that used by the default format. Useful for checking that a format can handle a particular object. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">XMLMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">OBMoleculeFormat</a>.</p>

</div>
</div>
<a class="anchor" id="a1d3a8785a0ad0c85b98fa3406a64d50f"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::SpecificationURL" ref="a1d3a8785a0ad0c85b98fa3406a64d50f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Web address where the format is defined. </p>

</div>
</div>
<a class="anchor" id="a0e10219d8aedefa78ef16fc7fded85ec"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::GetMIMEType" ref="a0e10219d8aedefa78ef16fc7fded85ec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetMIMEType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Chemical MIME type associated with this file type (if any) </p>

</div>
</div>
<a class="anchor" id="a94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::Flags" ref="a94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Decribes the capabilities of the format (Read only etc.) </p>
<p>Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3222302075fbfcfe842ebd0b984a4406">OBConversion::InstallStreamFilter()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a507df3dbfec4b9201387e70ef71fe8de">OBConversion::SetInFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae5b218e7427f7806d69356986e296160">OBConversion::SetOutFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>.</p>

</div>
</div>
<a class="anchor" id="a0924b1a442d147fa036bff23a4cf04ef"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::MakeNewInstance" ref="a0924b1a442d147fa036bff23a4cf04ef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>a pointer to a new instance of the format, or NULL if fails. Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. </dd></dl>

</div>
</div>
<a class="anchor" id="a47a434f63a789f142966304e35aa6952"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::RegisterFormat" ref="a47a434f63a789f142966304e35aa6952" args="(const char *ID, const char *MIME=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int RegisterFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20a0d20f46d3b003d99d1f5822c2037d">OBConversion::RegisterFormat()</a>.</p>

</div>
</div>
<a class="anchor" id="ae0859fdbf134af95a8231eb32c73b7db"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::Display" ref="ae0859fdbf134af95a8231eb32c73b7db" args="(std::string &amp;txt, const char *param, const char *ID=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Display </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Provides a description in txt of the format specified by itr. If param starts with "in", "read", "out" or "write" only the appropriate formats are output. The others return false. If param contains "verbose", the whole description is output. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">OBPlugin</a>.</p>

</div>
</div>
<a class="anchor" id="aca0c09ee719aba9da34cb281aa0db6a5"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::FormatFromMIME" ref="aca0c09ee719aba9da34cb281aa0db6a5" args="(const char *MIME)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromMIME </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em></td><td>)</td>
          <td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ab50420582d1794a71702ae17e176dc07"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::_pxmlConv" ref="ab50420582d1794a71702ae17e176dc07" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">XMLBaseFormat::OutputToStream()</a>, <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9d9e2a08b0659f0bc93d3eb7eaf8f05d">XMLBaseFormat::reader()</a>, <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat::ReadMolecule()</a>, <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat::SkipObjects()</a>, and <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9569f81d2916200422a7927572913336">XMLBaseFormat::writer()</a>.</p>

</div>
</div>
<a class="anchor" id="a5fd9fbe1a6ecd9798543ec2a55c472a8"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::_prefix" ref="a5fd9fbe1a6ecd9798543ec2a55c472a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5e2c3ec36cd04bac7ecad43b9f5501a2"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::baseindent" ref="a5e2c3ec36cd04bac7ecad43b9f5501a2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4b00721003b8d35559a55c9098ff36c5"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::ind" ref="a4b00721003b8d35559a55c9098ff36c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">ind</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8000c477c493f1dc954e8a538ae6fda8"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::nsdecl" ref="a8000c477c493f1dc954e8a538ae6fda8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">nsdecl</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac0224265e7d214b7ed98e091fe559c88"></a><!-- doxytag: member="OpenBabel::XMLBaseFormat::_embedlevel" ref="ac0224265e7d214b7ed98e091fe559c88" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat::ReadMolecule()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="xml_8h_source.shtml">xml.h</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
