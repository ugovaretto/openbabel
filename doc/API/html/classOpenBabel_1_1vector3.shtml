<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>vector3 Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">vector3 Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::vector3" -->
<p><code>#include &lt;<a class="el" href="vector3_8h_source.shtml">openbabel/math/vector3.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for vector3:</div>
<div class="dyncontent">
<div class="center"><img src="classOpenBabel_1_1vector3__inherit__graph.png" border="0" usemap="#vector3_inherit__map" alt="Inheritance graph"/></div>
<map name="vector3_inherit__map" id="vector3_inherit__map">
<area shape="rect" id="node3" href="classOpenBabel_1_1transform3d.shtml" title="Handle 3D transformations, such as space group definitions." alt="" coords="5,83,109,112"/></map>
<center><span class="legend">[<a href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classOpenBabel_1_1vector3-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">vector3</a> (const double inX=0.0, const double inY=0.0, const double inZ=0.0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a8b2f7f06d9fa0554248321887d4fcfc4">vector3</a> (double inV[3])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#abe84fe9749e73b1027baddb505fa189a">vector3</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a059160a3da371ed0cfd1563a1e8cd2fb">~vector3</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a685349dbc9e2d99a19616763811cbfba">Set</a> (const double inX, const double inY, const double inZ)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#abfcb3c965a12bd0385f1fe1db3f7d3ac">Set</a> (const double *c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab7cbeb9d9ec3d0d2714733d8bb4596eb">SetX</a> (const double inX)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a385f2320a91b6c182ecb45d16ffc6332">SetY</a> (const double inY)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad1ac74f918d5ac48cb47426ca9ba2c09">SetZ</a> (const double inZ)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a140fe887c529e7b90eae3de197e8ceb6">GetX</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a7e0e3acd8a6e4016522b9cdbc8f5aeb5">GetY</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a885f0eb530803b77acf8ac2055c59ee8">GetZ</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a9345053a16ce83e130dc098fddf9af7a">Get</a> (double *c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a4803abb2beda3b528c9db7046fa96141">operator[]</a> (unsigned int i) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad2eee719d3706b71968f894c1179f4bb">operator=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a72b1c0a136ecdb28fdfa1ec382ccdc41">AsArray</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ae0541be714a6305dd3295655eea746d9">operator+=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ac4b4980ccea5aa5184928ce40cf1acee">operator-=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a506884b50b92a33e92029b43f9b75bc9">operator+=</a> (const double *f)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a322635480250ba0c08aa47a125eda3dd">operator-=</a> (const double *f)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a849fa346bb458a37710cdb8a4f5c085f">operator*=</a> (const double &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab5a7b18eeff279e5d850a9075d09f8a5">operator/=</a> (const double &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">operator*=</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#af2f4c0b08630beda575c1c8697b8fece">randomUnitVector</a> (<a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand=NULL)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a8d0a82a515f8373ee3f174a22f775397">normalize</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a42a186aba6d262b1ce632ee90fb25e60">CanBeNormalized</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a560382b2b84516f70ca2d406aaee8baa">length_2</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad207cb443e371f73f07e874c504f60c1">length</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#abef0821fe31ac502f2d11718aef50ae3">x</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a60e843e6f8ec7cf8709da2954bd2c202">y</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ac6512d9d5bc60ad02143f34ba62e010a">z</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3b195b867437acf8de45f48c83e81932">x</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad927d9808ded1fc49c05ae9e1a3ed2a6">y</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">z</a> ()</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a49ed80cbaa997a8f5b5e25ac3610db6f">operator==</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a54bc009d3ca567251114c2a86c7753ff">operator!=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a4eb9ee503a7d695dfac88a993256add0">IsApprox</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;other, const double &amp;precision) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#af0bb15d3c00f3ab71314513fa41fa548">distSq</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;vv) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab7ad19aad80b487369bcafe789fd8c04">createOrthoVector</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v) const </td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Represents a vector in 3-dimensional real space. </p>
<p>The <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> class was designed to simplify operations with floating point coordinates. To this end many of the common operations have been overloaded for simplicity. Vector addition, subtraction, scalar multiplication, dot product, cross product, magnitude and a number of other utility functions are built in to the vector class. For a full description of the class member functions please consult the documentation. The following code demonstrates several of the functions of the vector class: </p>
<div class="fragment"><pre class="fragment">    <a class="code" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2" title="Constructor.">vector3</a> v1,v2,v3;
    v1 = <a class="code" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd" title="The x unit vector: &lt;1.0, 0.0, 0.0&gt;">VX</a>;
    v2 = <a class="code" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee" title="The y unit vector: &lt;0.0, 1.0, 0.0&gt;">VY</a>;
    v3 = <a class="code" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f" title="Cross product of two vectors.">cross</a>(v1,v2);
    v3 *= 2.5;
    v3.normalize();
</pre></div> </div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a28d983d20c9b3b395da7854fafae20f2"></a><!-- doxytag: member="OpenBabel::vector3::vector3" ref="a28d983d20c9b3b395da7854fafae20f2" args="(const double inX=0.0, const double inY=0.0, const double inZ=0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a class="anchor" id="a8b2f7f06d9fa0554248321887d4fcfc4"></a><!-- doxytag: member="OpenBabel::vector3::vector3" ref="a8b2f7f06d9fa0554248321887d4fcfc4" args="(double inV[3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inV</em>[3]</td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abe84fe9749e73b1027baddb505fa189a"></a><!-- doxytag: member="OpenBabel::vector3::vector3" ref="abe84fe9749e73b1027baddb505fa189a" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy Constructor. </p>

</div>
</div>
<a class="anchor" id="a059160a3da371ed0cfd1563a1e8cd2fb"></a><!-- doxytag: member="OpenBabel::vector3::~vector3" ref="a059160a3da371ed0cfd1563a1e8cd2fb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a685349dbc9e2d99a19616763811cbfba"></a><!-- doxytag: member="OpenBabel::vector3::Set" ref="a685349dbc9e2d99a19616763811cbfba" args="(const double inX, const double inY, const double inZ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set x,y and z-component of a vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#accffd942b323dd88aebc6fb6c20e1e18">OBFloatGrid::GetMidpointVector()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad15ec0c7f87cea35b02269fd53be159c">OBAtom::GetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>.</p>

</div>
</div>
<a class="anchor" id="abfcb3c965a12bd0385f1fe1db3f7d3ac"></a><!-- doxytag: member="OpenBabel::vector3::Set" ref="abfcb3c965a12bd0385f1fe1db3f7d3ac" args="(const double *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set x,y and z-component of a vector from c[0]..c[2]. </p>

</div>
</div>
<a class="anchor" id="ab7cbeb9d9ec3d0d2714733d8bb4596eb"></a><!-- doxytag: member="OpenBabel::vector3::SetX" ref="ab7cbeb9d9ec3d0d2714733d8bb4596eb" args="(const double inX)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetX </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the x-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="a385f2320a91b6c182ecb45d16ffc6332"></a><!-- doxytag: member="OpenBabel::vector3::SetY" ref="a385f2320a91b6c182ecb45d16ffc6332" args="(const double inY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetY </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the y-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="ad1ac74f918d5ac48cb47426ca9ba2c09"></a><!-- doxytag: member="OpenBabel::vector3::SetZ" ref="ad1ac74f918d5ac48cb47426ca9ba2c09" args="(const double inZ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetZ </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the z-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="a140fe887c529e7b90eae3de197e8ceb6"></a><!-- doxytag: member="OpenBabel::vector3::GetX" ref="a140fe887c529e7b90eae3de197e8ceb6" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetX </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the x-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="a7e0e3acd8a6e4016522b9cdbc8f5aeb5"></a><!-- doxytag: member="OpenBabel::vector3::GetY" ref="a7e0e3acd8a6e4016522b9cdbc8f5aeb5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the y-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="a885f0eb530803b77acf8ac2055c59ee8"></a><!-- doxytag: member="OpenBabel::vector3::GetZ" ref="a885f0eb530803b77acf8ac2055c59ee8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetZ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the z-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="a9345053a16ce83e130dc098fddf9af7a"></a><!-- doxytag: member="OpenBabel::vector3::Get" ref="a9345053a16ce83e130dc098fddf9af7a" args="(double *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Get </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set c[0]..c[2] to the components of the vector. </p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>No error checking is performed </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4c518f64fa1e22d82ed6da82d14e4e3">OBForceField::VectorBondDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a4803abb2beda3b528c9db7046fa96141"></a><!-- doxytag: member="OpenBabel::vector3::operator[]" ref="a4803abb2beda3b528c9db7046fa96141" args="(unsigned int i) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to x: [0], y: [1], and z[2]. </p>
<p>This (slow) method allows to access the elements of the vector as if it were an array of doubles. If the index is &gt; 2, then a warning is printed and 0.0 is returned. Otherwise, if i is 0, 1 or 2, then a reference to x, y or z is returned, respectively.</p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>This method is primarily designed to facilitate the integration ('Open Babelization') of code that uses arrays of doubles rather than the vector class. Due to the error checks the method is of course very slow and should therefore be avoided in production code. </dd></dl>

</div>
</div>
<a class="anchor" id="ad2eee719d3706b71968f894c1179f4bb"></a><!-- doxytag: member="OpenBabel::vector3::operator=" ref="ad2eee719d3706b71968f894c1179f4bb" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment. </p>

</div>
</div>
<a class="anchor" id="a72b1c0a136ecdb28fdfa1ec382ccdc41"></a><!-- doxytag: member="OpenBabel::vector3::AsArray" ref="a72b1c0a136ecdb28fdfa1ec382ccdc41" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double* AsArray </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the vector as a const double * </dd></dl>

</div>
</div>
<a class="anchor" id="ae0541be714a6305dd3295655eea746d9"></a><!-- doxytag: member="OpenBabel::vector3::operator+=" ref="ae0541be714a6305dd3295655eea746d9" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector addition (add <code>v</code> to *this) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this + v </dd></dl>

</div>
</div>
<a class="anchor" id="ac4b4980ccea5aa5184928ce40cf1acee"></a><!-- doxytag: member="OpenBabel::vector3::operator&#45;=" ref="ac4b4980ccea5aa5184928ce40cf1acee" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector subtraction (subtract <code>v</code> from *this) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this - v </dd></dl>

</div>
</div>
<a class="anchor" id="a506884b50b92a33e92029b43f9b75bc9"></a><!-- doxytag: member="OpenBabel::vector3::operator+=" ref="a506884b50b92a33e92029b43f9b75bc9" args="(const double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar addition (add <code>f</code> to *this) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this + f </dd></dl>

</div>
</div>
<a class="anchor" id="a322635480250ba0c08aa47a125eda3dd"></a><!-- doxytag: member="OpenBabel::vector3::operator&#45;=" ref="a322635480250ba0c08aa47a125eda3dd" args="(const double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar subtraction (subtract <code>f</code> from *this) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this - f </dd></dl>

</div>
</div>
<a class="anchor" id="a849fa346bb458a37710cdb8a4f5c085f"></a><!-- doxytag: member="OpenBabel::vector3::operator*=" ref="a849fa346bb458a37710cdb8a4f5c085f" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar multiplication (multiply *this by <code>c</code>) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this * c </dd></dl>

</div>
</div>
<a class="anchor" id="ab5a7b18eeff279e5d850a9075d09f8a5"></a><!-- doxytag: member="OpenBabel::vector3::operator/=" ref="ab5a7b18eeff279e5d850a9075d09f8a5" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar division (divide *this by <code>c</code>) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>*this divided by c </dd></dl>

</div>
</div>
<a class="anchor" id="ab879d8d94111c53fd9b9013fb9345734"></a><!-- doxytag: member="OpenBabel::vector3::operator*=" ref="ab879d8d94111c53fd9b9013fb9345734" args="(const matrix3x3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Multiplication of matrix and vector </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the result (i.e., the updated vector) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000006">Todo:</a></b></dt><dd>Currently unimplemented </dd></dl>
<p>calculates the product m*(*this) of the matrix m and the column vector represented by *this </p>

</div>
</div>
<a class="anchor" id="af2f4c0b08630beda575c1c8697b8fece"></a><!-- doxytag: member="OpenBabel::vector3::randomUnitVector" ref="af2f4c0b08630beda575c1c8697b8fece" args="(OBRandom *oeRand=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void randomUnitVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *&#160;</td>
          <td class="paramname"><em>obRandP</em> = <code>NULL</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a random unit vector. </p>
<p>Replaces *this with a random unit vector, which is (supposed to be) uniformly distributed over the unit sphere. Uses the random number generator obRand, or uses the system number generator with a time seed if obRand == NULL.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">obRandP</td><td>random number generator to use, or NULL, if the system random number generator (with time seed) should be used </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#aff25b8b63c0aec5f2c83d0cb70ae55cb">matrix3x3::randomRotation()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4c518f64fa1e22d82ed6da82d14e4e3">OBForceField::VectorBondDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab451a524c7a4f04bb987b3fac9288eed">OBForceField::VectorLengthDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a8d0a82a515f8373ee3f174a22f775397"></a><!-- doxytag: member="OpenBabel::vector3::normalize" ref="a8d0a82a515f8373ee3f174a22f775397" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; normalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Scales a vector to give it length one. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the result (i.e., the normalized vector)</dd></dl>
<p>This method normalizes *this. In other words, it divides the x,y,z coords of *this by this-&gt;<a class="el" href="classOpenBabel_1_1vector3.shtml#ad207cb443e371f73f07e874c504f60c1">length()</a>. If *this can't be safely normalized, it remains unchanged. See <a class="el" href="classOpenBabel_1_1vector3.shtml#a42a186aba6d262b1ce632ee90fb25e60">CanBeNormalized()</a>.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>a reference to *this </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac6e66726b2becbbccf39e6d4ecf6ae2e">OBForceField::ValidateLineSearch()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a42a186aba6d262b1ce632ee90fb25e60"></a><!-- doxytag: member="OpenBabel::vector3::CanBeNormalized" ref="a42a186aba6d262b1ce632ee90fb25e60" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CanBeNormalized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether a vector can be normalized</dd></dl>
<p>This method returns true if *this can be safely normalized. Vectors that can't be safely normalized are:</p>
<ul>
<li>the zero vector (0,0,0)</li>
<li>vectors having coords that can't be squared without triggering an overflow or underflow. This means doubles having absolute value greater than 1e150 or smaller than 1e-150. </li>
</ul>

</div>
</div>
<a class="anchor" id="a560382b2b84516f70ca2d406aaee8baa"></a><!-- doxytag: member="OpenBabel::vector3::length_2" ref="a560382b2b84516f70ca2d406aaee8baa" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double length_2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The length of the vector squared </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#a4eb9ee503a7d695dfac88a993256add0">vector3::IsApprox()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>.</p>

</div>
</div>
<a class="anchor" id="ad207cb443e371f73f07e874c504f60c1"></a><!-- doxytag: member="OpenBabel::vector3::length" ref="ad207cb443e371f73f07e874c504f60c1" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The vector length </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">OpenBabel::CalcTorsionAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a3bacc0010fd34814039b26758da67dae">OBUnitCell::GetA()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ac0f9682b3743c4ec91dd9fd16bb5bd82">OBUnitCell::GetB()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a229a18fdc499aafe149c55011f9fb2fb">OBUnitCell::GetC()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">OpenBabel::Point2Line()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">OpenBabel::Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aa087a37fcd1c8b08d5d58277caefbc9a">OBUnitCell::SetData()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>, <a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">OpenBabel::vectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab451a524c7a4f04bb987b3fac9288eed">OBForceField::VectorLengthDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="abef0821fe31ac502f2d11718aef50ae3"></a><!-- doxytag: member="OpenBabel::vector3::x" ref="abef0821fe31ac502f2d11718aef50ae3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the x-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#acf566ebca6ac366d1a218dce31a67ab3">transform3d::DescribeAsValues()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#af0bb15d3c00f3ab71314513fa41fa548">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a8f99a95e113289b791979a0949ebff51">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">OpenBabel::GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#ada9d79c923a5ed1b0edd0571f80c7537">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#a49ed80cbaa997a8f5b5e25ac3610db6f">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a80fb04724ecd70b729587ee43c1abcdb">SpaceGroup::Transform()</a>, <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, and <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a17fa7c484e6c603aad0a1dd1e53d21ed">OBUnitCell::WrapFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="a60e843e6f8ec7cf8709da2954bd2c202"></a><!-- doxytag: member="OpenBabel::vector3::y" ref="a60e843e6f8ec7cf8709da2954bd2c202" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the y-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#af0bb15d3c00f3ab71314513fa41fa548">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a8f99a95e113289b791979a0949ebff51">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">OpenBabel::GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#ada9d79c923a5ed1b0edd0571f80c7537">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#a49ed80cbaa997a8f5b5e25ac3610db6f">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a80fb04724ecd70b729587ee43c1abcdb">SpaceGroup::Transform()</a>, <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, and <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a17fa7c484e6c603aad0a1dd1e53d21ed">OBUnitCell::WrapFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6512d9d5bc60ad02143f34ba62e010a"></a><!-- doxytag: member="OpenBabel::vector3::z" ref="ac6512d9d5bc60ad02143f34ba62e010a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to get the z-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#af0bb15d3c00f3ab71314513fa41fa548">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a8f99a95e113289b791979a0949ebff51">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#ada9d79c923a5ed1b0edd0571f80c7537">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#a49ed80cbaa997a8f5b5e25ac3610db6f">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a80fb04724ecd70b729587ee43c1abcdb">SpaceGroup::Transform()</a>, <a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">OpenBabel::transformedFractionalCoordinate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, and <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a17fa7c484e6c603aad0a1dd1e53d21ed">OBUnitCell::WrapFractionalCoordinate()</a>.</p>

</div>
</div>
<a class="anchor" id="a3b195b867437acf8de45f48c83e81932"></a><!-- doxytag: member="OpenBabel::vector3::x" ref="a3b195b867437acf8de45f48c83e81932" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the x-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="ad927d9808ded1fc49c05ae9e1a3ed2a6"></a><!-- doxytag: member="OpenBabel::vector3::y" ref="ad927d9808ded1fc49c05ae9e1a3ed2a6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the y-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="a2134ad02d68f29e9c7cd87e4cd4c75b8"></a><!-- doxytag: member="OpenBabel::vector3::z" ref="a2134ad02d68f29e9c7cd87e4cd4c75b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Access function to set the z-coordinate of the vector. </p>

</div>
</div>
<a class="anchor" id="a49ed80cbaa997a8f5b5e25ac3610db6f"></a><!-- doxytag: member="OpenBabel::vector3::operator==" ref="a49ed80cbaa997a8f5b5e25ac3610db6f" args="(const vector3 &amp;) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Comparison Methods. </p>
<p>Equivalence of vectors </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000081">Deprecated:</a></b></dt><dd>This method uses unreliable floating point == comparisons Use <a class="el" href="classOpenBabel_1_1vector3.shtml#a4eb9ee503a7d695dfac88a993256add0" title="Safe comparison for floating-point vector3.">vector3::IsApprox()</a> instead. </dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if every component is equal </dd></dl>

</div>
</div>
<a class="anchor" id="a54bc009d3ca567251114c2a86c7753ff"></a><!-- doxytag: member="OpenBabel::vector3::operator!=" ref="a54bc009d3ca567251114c2a86c7753ff" args="(const vector3 &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000082">Deprecated:</a></b></dt><dd>This method uses unreliable floating point == comparisons Use <a class="el" href="classOpenBabel_1_1vector3.shtml#a4eb9ee503a7d695dfac88a993256add0" title="Safe comparison for floating-point vector3.">vector3::IsApprox()</a> instead. </dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if at least one component of the two vectors is != </dd></dl>

</div>
</div>
<a class="anchor" id="a4eb9ee503a7d695dfac88a993256add0"></a><!-- doxytag: member="OpenBabel::vector3::IsApprox" ref="a4eb9ee503a7d695dfac88a993256add0" args="(const vector3 &amp;other, const double &amp;precision) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsApprox </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>precision</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Safe comparison for floating-point <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the vector *this is approximately equal to the vector <code>other</code>, to the precision <code>precision</code>. More specifically, this method works exactly like the <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox()</a> function, replacing the absolute value for doubles by the norm for vectors. </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>The vector for comparison </td></tr>
    <tr><td class="paramname">precision</td><td>This parameter plays the same role as in <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af0bb15d3c00f3ab71314513fa41fa548"></a><!-- doxytag: member="OpenBabel::vector3::distSq" ref="af0bb15d3c00f3ab71314513fa41fa548" args="(const vector3 &amp;vv) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double distSq </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>vv</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>}@ </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>square of the distance between *this and vv</dd></dl>
<p>equivalent to length_2(*this-vv) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>.</p>

</div>
</div>
<a class="anchor" id="ab7ad19aad80b487369bcafe789fd8c04"></a><!-- doxytag: member="OpenBabel::vector3::createOrthoVector" ref="ab7ad19aad80b487369bcafe789fd8c04" args="(vector3 &amp;v) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool createOrthoVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a unit vector orthogonal to *this. </p>
<p>Creates a vector of length one, orthogonal to *this. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether the method was successful</dd></dl>
<p>It requires that *this is normalizable; otherwise it just returns false. See <a class="el" href="classOpenBabel_1_1vector3.shtml#a42a186aba6d262b1ce632ee90fb25e60">CanBeNormalized()</a></p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">res</td><td>reference by which to pass the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>always true. (Return value kept for compatibility, as old versions of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> used to check for normalizability). </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="vector3_8h_source.shtml">vector3.h</a></li>
<li><a class="el" href="matrix3x3_8cpp.shtml">matrix3x3.cpp</a></li>
<li><a class="el" href="vector3_8cpp.shtml">vector3.cpp</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
