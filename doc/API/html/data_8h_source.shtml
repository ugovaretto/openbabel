<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>data.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">data.h</div>  </div>
</div>
<div class="contents">
<a href="data_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">data.h - Global data and resource file parsers.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_DATA_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_DATA_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBMol;
<a name="l00037"></a>00037   <span class="keyword">class </span>OBBitVec;
<a name="l00038"></a>00038 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml">00049</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml" title="Base data table class, handles reading data files.">OBGlobalDataBase</a>
<a name="l00050"></a>00050     {
<a name="l00051"></a>00051     <span class="keyword">protected</span>:
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a40756214f69d1c40ad70b64ae9fdc08d">00052</a>       <span class="keywordtype">bool</span>         <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a40756214f69d1c40ad70b64ae9fdc08d" title="Whether the data been read already.">_init</a>;               
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a45a08560f2b4885250c586c550f2d7af">00053</a>       <span class="keyword">const</span> <span class="keywordtype">char</span>  *<a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a45a08560f2b4885250c586c550f2d7af" title="Default data table if file is unreadable.">_dataptr</a>;
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a895aefe990ffe9af66bb5cd4e37d3579">00054</a>       std::string  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a895aefe990ffe9af66bb5cd4e37d3579" title="File to search for.">_filename</a>;
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a2c2f62a9907553e5feb1ecef65c6c386">00055</a>       std::string  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a2c2f62a9907553e5feb1ecef65c6c386" title="Data directory for file if _envvar fails.">_dir</a>;                
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a5d93159b6eee0cb302451621106f61c7">00056</a>       std::string  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a5d93159b6eee0cb302451621106f61c7" title="Subdirectory (if using environment variable)">_subdir</a>;     
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a87d06c3aed77fb9e118b337bed557928">00057</a>       std::string  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a87d06c3aed77fb9e118b337bed557928" title="Environment variable to check first.">_envvar</a>;     
<a name="l00058"></a>00058 
<a name="l00059"></a>00059     <span class="keyword">public</span>:
<a name="l00061"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a36b81861b36e935bf0a39dee7745c3ed">00061</a>       <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a36b81861b36e935bf0a39dee7745c3ed" title="Constructor.">OBGlobalDataBase</a>(): _init(false), _dataptr(NULL) { }
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a8556118660d5608e1c18a8e67a93df4c">00063</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a8556118660d5608e1c18a8e67a93df4c" title="Destructor.">~OBGlobalDataBase</a>()                  {}
<a name="l00065"></a>00065       <span class="keywordtype">void</span>  Init();
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a5ebfe2dd02a8ba2b7e84f1f6d55c74cd">00067</a>       <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a5ebfe2dd02a8ba2b7e84f1f6d55c74cd">GetSize</a>()                 { <span class="keywordflow">return</span> 0;}
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a49002f92ad6a1c71d7f9148271770b7a">00069</a>       <span class="keywordtype">void</span>  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a49002f92ad6a1c71d7f9148271770b7a" title="Set the directory before calling Init()">SetReadDirectory</a>(<span class="keywordtype">char</span> *dir)            { _dir = dir;    }
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a2bd0630d27e20f38de4c753ca68e2282">00071</a>       <span class="keywordtype">void</span>  <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a2bd0630d27e20f38de4c753ca68e2282" title="Set the environment variable to use before calling Init()">SetEnvironmentVariable</a>(<span class="keywordtype">char</span> *var)      { _envvar = var; }
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a9a84dbfb089769dec48cd6f6eca1057b">00073</a>       <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a9a84dbfb089769dec48cd6f6eca1057b" title="Specified by particular table classes (parses an individual data line)">ParseLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>*)          {}
<a name="l00074"></a>00074     };
<a name="l00075"></a>00075 
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml">00082</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBElement.shtml" title="Individual element data type.">OBElement</a>
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084       <span class="keywordtype">int</span> _num;
<a name="l00085"></a>00085       <span class="keywordtype">char</span> _symbol[4];
<a name="l00086"></a>00086       std::string _name;
<a name="l00087"></a>00087       <span class="keywordtype">double</span> _Rcov,_Rvdw,_mass,_elNeg,_ARENeg,_ionize,_elAffinity;
<a name="l00088"></a>00088       <span class="keywordtype">double</span> _red, _green, _blue;
<a name="l00089"></a>00089       <span class="keywordtype">int</span> _maxbonds;
<a name="l00090"></a>00090     <span class="keyword">public</span>:
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#adc9911e43430fd65726f393308db7e6e">00092</a>       <a class="code" href="classOpenBabel_1_1OBElement.shtml#adc9911e43430fd65726f393308db7e6e">OBElement</a>()    {}
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#aade9292237f46323dd52c6822919a791">00109</a>       <a class="code" href="classOpenBabel_1_1OBElement.shtml" title="Individual element data type.">OBElement</a>(<span class="keywordtype">int</span> num, <span class="keyword">const</span> <span class="keywordtype">char</span> *sym, <span class="keywordtype">double</span> ARENeg, <span class="keywordtype">double</span> rcov,
<a name="l00110"></a>00110                 <span class="keywordtype">double</span> rvdw, <span class="keywordtype">int</span> maxbo, <span class="keywordtype">double</span> mass, <span class="keywordtype">double</span> elNeg, <span class="keywordtype">double</span> ionize,
<a name="l00111"></a>00111                 <span class="keywordtype">double</span> elAffin, <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a>, <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a>, <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a>,
<a name="l00112"></a>00112                 std::string name) :
<a name="l00113"></a>00113         _num(num), _name(name), _Rcov(rcov), _Rvdw(rvdw), _mass(mass),
<a name="l00114"></a>00114         _elNeg(elNeg), _ARENeg(ARENeg), _ionize(ionize), _elAffinity(elAffin),
<a name="l00115"></a>00115         _red(red), _green(green), _blue(blue),
<a name="l00116"></a>00116         _maxbonds(maxbo)
<a name="l00117"></a>00117         {
<a name="l00118"></a>00118           strncpy(_symbol, sym, 4);
<a name="l00119"></a>00119         }
<a name="l00120"></a>00120 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a8f31c44517534e1f574a8863b62a3393">00122</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a8f31c44517534e1f574a8863b62a3393">GetAtomicNum</a>()         {       <span class="keywordflow">return</span>(_num);    }
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a084678724fe2a604272869011725a54f">00124</a>       <span class="keywordtype">char</span> *<a class="code" href="classOpenBabel_1_1OBElement.shtml#a084678724fe2a604272869011725a54f">GetSymbol</a>()          {       <span class="keywordflow">return</span>(_symbol); }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a75c2e30ac7073faf1846c1d95f10477e">00126</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a75c2e30ac7073faf1846c1d95f10477e">GetCovalentRad</a>()    {       <span class="keywordflow">return</span>(_Rcov);   }
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a7efca557d66da627333df398980c6126">00128</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a7efca557d66da627333df398980c6126">GetVdwRad</a>()         {       <span class="keywordflow">return</span>(_Rvdw);   }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#ae10e5ef3968d6e55522d0480cea9c660">00130</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#ae10e5ef3968d6e55522d0480cea9c660">GetMass</a>()           {       <span class="keywordflow">return</span>(_mass);   }
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a40026d51ab0e4e95dff002676ccac3b1">00132</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a40026d51ab0e4e95dff002676ccac3b1">GetMaxBonds</a>()          {       <span class="keywordflow">return</span>(_maxbonds);}
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a79b6be626237d9dba8525e2ed748dd43">00134</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a79b6be626237d9dba8525e2ed748dd43">GetElectroNeg</a>()     {       <span class="keywordflow">return</span>(_elNeg);  }
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a1c07be5f389f4e10159862452c3bba68">00136</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a1c07be5f389f4e10159862452c3bba68">GetAllredRochowElectroNeg</a>() { <span class="keywordflow">return</span>(_ARENeg); }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a440bfda6981c965bd3064ab806f6e8d2">00138</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a440bfda6981c965bd3064ab806f6e8d2">GetIonization</a>()     {       <span class="keywordflow">return</span>(_ionize);  }
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#aaa8e88b8910a30ae9de3ef9b3aab921c">00140</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#aaa8e88b8910a30ae9de3ef9b3aab921c">GetElectronAffinity</a>(){      <span class="keywordflow">return</span>(_elAffinity);  }
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a8facce7acc5e95194c232b9bbd1363d5">00142</a>       std::string <a class="code" href="classOpenBabel_1_1OBElement.shtml#a8facce7acc5e95194c232b9bbd1363d5">GetName</a>()      {       <span class="keywordflow">return</span>(_name);    }
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a7b09cecd8e93a824444dd769ac756c0f">00144</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a7b09cecd8e93a824444dd769ac756c0f">GetRed</a>()            {       <span class="keywordflow">return</span>(_red);     }
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#ad75a0aa975fc5c2b3228306e590ef399">00146</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#ad75a0aa975fc5c2b3228306e590ef399">GetGreen</a>()          {       <span class="keywordflow">return</span>(_green);   }
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#a9108d11a6d6f06fb9788b2fd10f2e9d0">00148</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBElement.shtml#a9108d11a6d6f06fb9788b2fd10f2e9d0">GetBlue</a>()           {       <span class="keywordflow">return</span>(_blue);    }
<a name="l00149"></a>00149     };
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="comment">// class introduction in data.cpp</span>
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBElementTable.shtml">00152</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml" title="Base data table class, handles reading data files.">OBGlobalDataBase</a>
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154       std::vector&lt;OBElement*&gt; _element;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     <span class="keyword">public</span>:
<a name="l00157"></a>00157 
<a name="l00158"></a>00158       <a class="code" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a>(<span class="keywordtype">void</span>);
<a name="l00159"></a>00159       ~<a class="code" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a>();
<a name="l00160"></a>00160 
<a name="l00161"></a>00161       <span class="keywordtype">void</span>  ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00162"></a>00162 
<a name="l00164"></a>00164       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>              GetNumberOfElements();
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBElementTable.shtml#aab7c531e5ffc5174e57a85e853931534">00166</a>       <span class="keywordtype">size_t</span>    <a class="code" href="classOpenBabel_1_1OBElementTable.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>() { <span class="keywordflow">return</span> GetNumberOfElements(); }
<a name="l00167"></a>00167 
<a name="l00169"></a>00169       <span class="keywordtype">int</span>   GetAtomicNum(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00173"></a>00173       <span class="keywordtype">int</span>   GetAtomicNum(<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keywordtype">int</span> &amp;iso);
<a name="l00175"></a>00175       <span class="keywordtype">int</span>   GetAtomicNum(std::string name, <span class="keywordtype">int</span> &amp;iso);
<a name="l00177"></a>00177       <span class="keyword">const</span> <span class="keywordtype">char</span> *GetSymbol(<span class="keywordtype">int</span>);
<a name="l00179"></a>00179       <span class="keywordtype">double</span> GetVdwRad(<span class="keywordtype">int</span>);
<a name="l00181"></a>00181       <span class="keywordtype">double</span> GetCovalentRad(<span class="keywordtype">int</span>);
<a name="l00184"></a>00184       <span class="keywordtype">double</span> GetMass(<span class="keywordtype">int</span>);
<a name="l00187"></a>00187       <span class="keywordtype">double</span> CorrectedBondRad(<span class="keywordtype">int</span>,<span class="keywordtype">int</span> = 3); <span class="comment">// atomic #, hybridization</span>
<a name="l00190"></a>00190 <span class="comment"></span>      <span class="keywordtype">double</span> CorrectedVdwRad(<span class="keywordtype">int</span>,<span class="keywordtype">int</span> = 3); <span class="comment">// atomic #, hybridization</span>
<a name="l00192"></a>00192 <span class="comment"></span>      <span class="keywordtype">int</span>       GetMaxBonds(<span class="keywordtype">int</span>);
<a name="l00194"></a>00194       <span class="keywordtype">double</span> GetElectroNeg(<span class="keywordtype">int</span>);
<a name="l00196"></a>00196       <span class="keywordtype">double</span> GetAllredRochowElectroNeg(<span class="keywordtype">int</span>);
<a name="l00198"></a>00198       <span class="keywordtype">double</span> GetIonization(<span class="keywordtype">int</span>);
<a name="l00200"></a>00200       <span class="keywordtype">double</span> GetElectronAffinity(<span class="keywordtype">int</span>);
<a name="l00202"></a>00202       std::vector&lt;double&gt; GetRGB(<span class="keywordtype">int</span>);
<a name="l00204"></a>00204       std::string GetName(<span class="keywordtype">int</span>);
<a name="l00205"></a>00205     };
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="comment">// class introduction in data.cpp</span>
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml">00208</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses.">OBIsotopeTable</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml" title="Base data table class, handles reading data files.">OBGlobalDataBase</a>
<a name="l00209"></a>00209     {
<a name="l00210"></a>00210       std::vector&lt;std::vector&lt;std::pair &lt;unsigned int, double&gt; &gt; &gt; _isotopes;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="keyword">public</span>:
<a name="l00213"></a>00213 
<a name="l00214"></a>00214       <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses.">OBIsotopeTable</a>(<span class="keywordtype">void</span>);
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#a509d31ff06b39b2db2a538be6eef77a1">00215</a>       <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#a509d31ff06b39b2db2a538be6eef77a1">~OBIsotopeTable</a>()    {}
<a name="l00216"></a>00216 
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#aab7c531e5ffc5174e57a85e853931534">00218</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>() { <span class="keywordflow">return</span> _isotopes.size(); }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220       <span class="keywordtype">void</span>      ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00223"></a>00223       <span class="keywordtype">double</span>    GetExactMass(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomicNum,
<a name="l00224"></a>00224                            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> isotope = 0);
<a name="l00225"></a>00225     };
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <span class="comment">// class introduction in data.cpp</span>
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml">00228</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table.">OBTypeTable</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml" title="Base data table class, handles reading data files.">OBGlobalDataBase</a>
<a name="l00229"></a>00229     {
<a name="l00230"></a>00230       <span class="keywordtype">int</span>             _linecount;
<a name="l00231"></a>00231       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    _ncols,_nrows;
<a name="l00232"></a>00232       <span class="keywordtype">int</span>             _from,_to;
<a name="l00233"></a>00233       std::vector&lt;std::string&gt; _colnames;
<a name="l00234"></a>00234       std::vector&lt;std::vector&lt;std::string&gt; &gt; _table;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     <span class="keyword">public</span>:
<a name="l00237"></a>00237 
<a name="l00238"></a>00238       <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table.">OBTypeTable</a>(<span class="keywordtype">void</span>);
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#a72cd4a33759982430a7db60c3d392fee">00239</a>       <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#a72cd4a33759982430a7db60c3d392fee">~OBTypeTable</a>() {}
<a name="l00240"></a>00240 
<a name="l00241"></a>00241       <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00242"></a>00242 
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#aab7c531e5ffc5174e57a85e853931534">00244</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>() { <span class="keywordflow">return</span> _table.size(); }
<a name="l00245"></a>00245 
<a name="l00247"></a>00247       <span class="keywordtype">bool</span> SetFromType(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00249"></a>00249       <span class="keywordtype">bool</span> SetToType(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00251"></a>00251       <span class="keywordtype">bool</span> Translate(<span class="keywordtype">char</span> *to, <span class="keyword">const</span> <span class="keywordtype">char</span> *from); <span class="comment">// to, from</span>
<a name="l00254"></a>00254 <span class="comment"></span>      <span class="keywordtype">bool</span> Translate(std::string &amp;to, <span class="keyword">const</span> std::string &amp;from); <span class="comment">// to, from</span>
<a name="l00257"></a>00257 <span class="comment"></span>      std::string Translate(<span class="keyword">const</span> std::string &amp;from);
<a name="l00258"></a>00258 
<a name="l00260"></a>00260       std::string GetFromType();
<a name="l00262"></a>00262       std::string GetToType();
<a name="l00263"></a>00263     };
<a name="l00264"></a>00264 
<a name="l00270"></a><a class="code" href="classOpenBabel_1_1OBResidueData.shtml">00270</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files).">OBResidueData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml" title="Base data table class, handles reading data files.">OBGlobalDataBase</a>
<a name="l00271"></a>00271     {
<a name="l00272"></a>00272       <span class="keywordtype">int</span>                                               _resnum;
<a name="l00273"></a>00273       std::vector&lt;std::string&gt;                          _resname;
<a name="l00274"></a>00274       std::vector&lt;std::vector&lt;std::string&gt; &gt;            _resatoms;
<a name="l00275"></a>00275       std::vector&lt;std::vector&lt;std::pair&lt;std::string,int&gt; &gt; &gt; _resbonds;
<a name="l00276"></a>00276 
<a name="l00277"></a>00277       <span class="comment">//variables used only temporarily for parsing resdata.txt</span>
<a name="l00278"></a>00278       std::vector&lt;std::string&gt;                          _vatmtmp;
<a name="l00279"></a>00279       std::vector&lt;std::pair&lt;std::string,int&gt; &gt;          _vtmp;
<a name="l00280"></a>00280     <span class="keyword">public</span>:
<a name="l00281"></a>00281 
<a name="l00282"></a>00282       <a class="code" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files).">OBResidueData</a>();
<a name="l00283"></a>00283       <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00284"></a>00284 
<a name="l00286"></a><a class="code" href="classOpenBabel_1_1OBResidueData.shtml#aab7c531e5ffc5174e57a85e853931534">00286</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBResidueData.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>() { <span class="keywordflow">return</span> _resname.size(); }
<a name="l00287"></a>00287 
<a name="l00291"></a>00291       <span class="keywordtype">bool</span> SetResName(<span class="keyword">const</span> std::string &amp;);
<a name="l00294"></a>00294       <span class="keywordtype">int</span>  LookupBO(<span class="keyword">const</span> std::string &amp;);
<a name="l00297"></a>00297       <span class="keywordtype">int</span>  LookupBO(<span class="keyword">const</span> std::string &amp;, <span class="keyword">const</span> std::string&amp;);
<a name="l00301"></a>00301       <span class="keywordtype">bool</span> LookupType(<span class="keyword">const</span> std::string &amp;,std::string&amp;,<span class="keywordtype">int</span>&amp;);
<a name="l00305"></a>00305       <span class="keywordtype">bool</span> AssignBonds(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;);
<a name="l00306"></a>00306     };
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 <span class="preprocessor">#endif //DATA_H</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:06 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
