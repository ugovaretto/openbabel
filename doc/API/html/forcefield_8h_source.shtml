<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>forcefield.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">forcefield.h</div>  </div>
</div>
<div class="contents">
<a href="forcefield_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">forcefield.h - Handle OBForceField class.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2006-2007 by Tim Vandermeersch &lt;tim.vandermeersch@gmail.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FORCEFIELD_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FORCEFIELD_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &#39;plugin&#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="grid_8h.shtml" title="Handle grids of values.">openbabel/grid.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="griddata_8h.shtml" title="OBGenericData class to connect numeric grids (e.g., orbitals, electrostatic potential) to molecules...">openbabel/griddata.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>OpenBabel
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038   <span class="comment">// log levels</span>
<a name="l00039"></a><a class="code" href="forcefield_8h.shtml#ae0c831fc1fdad7188e79f0d94ffb0c87">00039</a> <span class="preprocessor">#define OBFF_LOGLVL_NONE        0   //!&lt; no output</span>
<a name="l00040"></a><a class="code" href="forcefield_8h.shtml#aaf7ca13d2b94e79693c47c10ea3c1def">00040</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_LOGLVL_LOW         1   //!&lt; SteepestDescent progress... (no output from Energy())</span>
<a name="l00041"></a><a class="code" href="forcefield_8h.shtml#aefda3ec45e427a38ac62a99a50cf93af">00041</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_LOGLVL_MEDIUM      2   //!&lt; individual energy terms</span>
<a name="l00042"></a><a class="code" href="forcefield_8h.shtml#a09f7b02a472bb953e5b2e0641ba45e3e">00042</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_LOGLVL_HIGH        3   //!&lt; individual calculations and parameters</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044   <span class="comment">// terms</span>
<a name="l00045"></a><a class="code" href="forcefield_8h.shtml#a586a185b0aed9265f6812ed4338cd8bd">00045</a> <span class="preprocessor">#define OBFF_ENERGY             (1 &lt;&lt; 0)   //!&lt; all terms</span>
<a name="l00046"></a><a class="code" href="forcefield_8h.shtml#a326285b39a02acf24b5b73d340129086">00046</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_EBOND              (1 &lt;&lt; 1)   //!&lt; bond term</span>
<a name="l00047"></a><a class="code" href="forcefield_8h.shtml#af9110b0ba91b61dfb6d4a01263b22b02">00047</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_EANGLE             (1 &lt;&lt; 2)   //!&lt; angle term</span>
<a name="l00048"></a><a class="code" href="forcefield_8h.shtml#a005da6f6cb4c5568b1c203cc702f5ce7">00048</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_ESTRBND            (1 &lt;&lt; 3)   //!&lt; strbnd term</span>
<a name="l00049"></a><a class="code" href="forcefield_8h.shtml#a0f54562816bbf69d6bf037a0adc8bb39">00049</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_ETORSION           (1 &lt;&lt; 4)   //!&lt; torsion term</span>
<a name="l00050"></a><a class="code" href="forcefield_8h.shtml#a4b88f20fe0968d703e3c08d0b66bf056">00050</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_EOOP               (1 &lt;&lt; 5)   //!&lt; oop term</span>
<a name="l00051"></a><a class="code" href="forcefield_8h.shtml#ae95a975f8a0274950f0f89b3f7bf9a64">00051</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_EVDW               (1 &lt;&lt; 6)   //!&lt; vdw term</span>
<a name="l00052"></a><a class="code" href="forcefield_8h.shtml#a3dd361374bf490af6c1f35d60a05949e">00052</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_EELECTROSTATIC     (1 &lt;&lt; 7)   //!&lt; electrostatic term</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054   <span class="comment">// constraint types</span>
<a name="l00055"></a><a class="code" href="forcefield_8h.shtml#a03569dcf56c412db6be9df64438ee5dc">00055</a> <span class="preprocessor">#define OBFF_CONST_IGNORE       (1 &lt;&lt; 0)   //!&lt; ignore the atom while setting up calculations</span>
<a name="l00056"></a><a class="code" href="forcefield_8h.shtml#a13a0a0dd0787deeea38b9868a8c2146a">00056</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_ATOM         (1 &lt;&lt; 1)   //!&lt; fix the atom position</span>
<a name="l00057"></a><a class="code" href="forcefield_8h.shtml#a4e16c27a931fcb46dba17dc074bf51cd">00057</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_ATOM_X       (1 &lt;&lt; 2)   //!&lt; fix the x coordinate of the atom position</span>
<a name="l00058"></a><a class="code" href="forcefield_8h.shtml#abd1cd31afc9ddb108d4cb07911d3926d">00058</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_ATOM_Y       (1 &lt;&lt; 3)   //!&lt; fix the y coordinate of the atom position</span>
<a name="l00059"></a><a class="code" href="forcefield_8h.shtml#a1399f6dcc2aec4237ded22e3c87e2d5a">00059</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_ATOM_Z       (1 &lt;&lt; 4)   //!&lt; fix the z coordinate of the atom position</span>
<a name="l00060"></a><a class="code" href="forcefield_8h.shtml#ac27b2fddf951a53d68fc05c49fb98f13">00060</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_DISTANCE     (1 &lt;&lt; 5)   //!&lt; constrain distance length</span>
<a name="l00061"></a><a class="code" href="forcefield_8h.shtml#afc7b8c9d75d67d0bdff47947f8e75512">00061</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_ANGLE        (1 &lt;&lt; 6)   //!&lt; constrain angle</span>
<a name="l00062"></a><a class="code" href="forcefield_8h.shtml#a3d65dc3fe55820d8270c1215394a57be">00062</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_TORSION      (1 &lt;&lt; 7)   //!&lt; constrain torsion</span>
<a name="l00063"></a><a class="code" href="forcefield_8h.shtml#a5d6180c08a450f3b9278fb782c3aedba">00063</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_CONST_CHIRAL       (1 &lt;&lt; 8)   //!&lt; constrain chiral volume</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>
<a name="l00065"></a>00065   <span class="comment">// mode arguments for SteepestDescent, ConjugateGradients, ...</span>
<a name="l00066"></a><a class="code" href="forcefield_8h.shtml#a76a7ae4b96bf74f5d6f690b908e57bb6">00066</a> <span class="preprocessor">#define OBFF_NUMERICAL_GRADIENT         (1 &lt;&lt; 0)  //!&lt; use numerical gradients</span>
<a name="l00067"></a><a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e">00067</a> <span class="preprocessor"></span><span class="preprocessor">#define OBFF_ANALYTICAL_GRADIENT        (1 &lt;&lt; 1)  //!&lt; use analytical gradients</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a><a class="code" href="forcefield_8h.shtml#a26434409c375f3b38709afdcccec596c">00069</a> <span class="preprocessor">#define KCAL_TO_KJ      4.1868</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>
<a name="l00071"></a>00071   <span class="comment">// inline if statements for logging.</span>
<a name="l00072"></a><a class="code" href="forcefield_8h.shtml#a62a639c8c4176b63a2697aff40f4338a">00072</a> <span class="preprocessor">#define IF_OBFF_LOGLVL_LOW    if(_loglvl &gt;= OBFF_LOGLVL_LOW)</span>
<a name="l00073"></a><a class="code" href="forcefield_8h.shtml#a6f31cf89cddb30bac3d187474f8defed">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_MEDIUM if(_loglvl &gt;= OBFF_LOGLVL_MEDIUM)</span>
<a name="l00074"></a><a class="code" href="forcefield_8h.shtml#af9a87deee4328f76736a05bf6e6709ea">00074</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_HIGH   if(_loglvl &gt;= OBFF_LOGLVL_HIGH)</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>
<a name="l00077"></a><a class="code" href="structOpenBabel_1_1LineSearchType.shtml">00077</a>   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1LineSearchType.shtml" title="The type of line search to be used for optimization -- simple or Newton numeric.">LineSearchType</a>
<a name="l00078"></a>00078   {
<a name="l00079"></a>00079     <span class="keyword">enum</span> {
<a name="l00080"></a><a class="code" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7aebfbf7dc5cde0772efb1aa49712bd76b">00080</a>       <a class="code" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7aebfbf7dc5cde0772efb1aa49712bd76b">Simple</a>, <a class="code" href="structOpenBabel_1_1LineSearchType.shtml#adf764cbdea00d65edcd07bb9953ad2b7a38e70ed84d1b5d7404464b69c8e5093a">Newton2Num</a>
<a name="l00081"></a>00081     };
<a name="l00082"></a>00082   };
<a name="l00083"></a>00083   <span class="comment">/*</span>
<a name="l00084"></a>00084 <span class="comment">  struct ConstraintType</span>
<a name="l00085"></a>00085 <span class="comment">  {</span>
<a name="l00086"></a>00086 <span class="comment">    enum {</span>
<a name="l00087"></a>00087 <span class="comment">      Ignore, Atom, AtomX, AtomY, AtomZ, Distance, Angle, Torsion, Chiral</span>
<a name="l00088"></a>00088 <span class="comment">    };</span>
<a name="l00089"></a>00089 <span class="comment">  };</span>
<a name="l00090"></a>00090 <span class="comment">  */</span>
<a name="l00091"></a>00091 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml">00094</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> {
<a name="l00095"></a>00095   <span class="keyword">public</span>:
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a6f364afbe132c4ecfea48bde1b0618ba">00097</a>     <span class="keywordtype">int</span>         a, b, c, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a6f364afbe132c4ecfea48bde1b0618ba">d</a>;
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a436665a0d94c49fd61354af10a56e33d">00099</a>     std::string _a, _b, _c, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a436665a0d94c49fd61354af10a56e33d">_d</a>;
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a34493373e0f4d6c8c596512041153e69">00102</a>     std::vector&lt;int&gt;    <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a34493373e0f4d6c8c596512041153e69" title="Used to store integer type parameters (bondtypes, multiplicity, ...)">_ipar</a>;
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a1c0d7fbb96a8e7c4dd0fec6ced77c5b0">00104</a>     std::vector&lt;double&gt; <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a1c0d7fbb96a8e7c4dd0fec6ced77c5b0" title="Used to store double type parameters (force constants, bond lengths, angles, ...)">_dpar</a>;
<a name="l00105"></a>00105 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a31c588c926e46d76ea0b6ea45e6f98a8">00107</a>     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> &amp;ai)
<a name="l00108"></a>00108       {
<a name="l00109"></a>00109         <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;ai) {
<a name="l00110"></a>00110           a = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#aa4c2a5552e9bc49b1816ff532f558c74" title="Used to store integer atom types.">a</a>;
<a name="l00111"></a>00111           b = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a148e3876077787926724625411d6e7a9">b</a>;
<a name="l00112"></a>00112           c = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a4e1e0e72dd773439e333c84dd762a9c3">c</a>;
<a name="l00113"></a>00113           d = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a6f364afbe132c4ecfea48bde1b0618ba">d</a>;
<a name="l00114"></a>00114           _a = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a86e4c325d35090aeb11ec1be9d2c4b92" title="used to store string atom types">_a</a>;
<a name="l00115"></a>00115           _b = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#aef54f9555eb83d9adc8bfe4c51a41048">_b</a>;
<a name="l00116"></a>00116           _c = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a612751a856867453e2cf240a13b1c69a">_c</a>;
<a name="l00117"></a>00117           _d = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a436665a0d94c49fd61354af10a56e33d">_d</a>;
<a name="l00118"></a>00118           _ipar = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a34493373e0f4d6c8c596512041153e69" title="Used to store integer type parameters (bondtypes, multiplicity, ...)">_ipar</a>;
<a name="l00119"></a>00119           _dpar = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a1c0d7fbb96a8e7c4dd0fec6ced77c5b0" title="Used to store double type parameters (force constants, bond lengths, angles, ...)">_dpar</a>;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00123"></a>00123       }
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#ac8bb3912a3ce86b15842e79d0b421204">00126</a>     <span class="keywordtype">void</span> clear ()
<a name="l00127"></a>00127     {
<a name="l00128"></a>00128       a = b = c = d = 0;
<a name="l00129"></a>00129       _ipar.clear();
<a name="l00130"></a>00130       _dpar.clear();
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132   }; <span class="comment">// class OBFFParameter</span>
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">// specific class introductions in forcefieldYYYY.cpp (for YYYY calculations)</span>
<a name="l00135"></a>00135 
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml">00138</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation2</a>
<a name="l00139"></a>00139   {
<a name="l00140"></a>00140   <span class="keyword">public</span>:
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a1d26cc49e49afe96406210d6beaf418a">00142</a>     <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a1d26cc49e49afe96406210d6beaf418a" title="Used to store the energy for this OBFFCalculation.">energy</a>;
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a3b7f67e0c88d3405346c2aa592d75faf">00144</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, *<a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a3b7f67e0c88d3405346c2aa592d75faf">b</a>;
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a086acc8d6f926ab15c5c385455810445">00146</a>     <span class="keywordtype">int</span> idx_a, <a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a086acc8d6f926ab15c5c385455810445">idx_b</a>;
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#aadfcce040172c26d6082c4834a1c1469">00148</a>     <span class="keywordtype">double</span> *pos_a, *<a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#aadfcce040172c26d6082c4834a1c1469">pos_b</a>;
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a8185562751b948f890ffc0d869341fae">00150</a>     <span class="keywordtype">double</span> force_a[3], force_b[3];
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#a04b016790fa35bca53ad7e92809e5c76">00152</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation2</a>()
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154     }
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#aa063f21c51ee71ca470bce2e7042b815">00157</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetupPointers()
<a name="l00158"></a>00158     {
<a name="l00159"></a>00159       <span class="keywordflow">if</span> (!a || !b) <span class="keywordflow">return</span>;
<a name="l00160"></a>00160       pos_a = a-&gt;GetCoordinate();
<a name="l00161"></a>00161       idx_a = a-&gt;GetIdx();
<a name="l00162"></a>00162       pos_b = b-&gt;GetCoordinate();
<a name="l00163"></a>00163       idx_b = b-&gt;GetIdx();
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165   };
<a name="l00166"></a>00166 
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml">00169</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation3</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation2</a>
<a name="l00170"></a>00170   {
<a name="l00171"></a>00171   <span class="keyword">public</span>:
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#af305879d7db682f069904a4532e57ff2">00173</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#af305879d7db682f069904a4532e57ff2" title="Used to store the atoms for this OBFFCalculation.">c</a>;
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a9face146941b40a8f35a2d459a06f41a">00175</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a9face146941b40a8f35a2d459a06f41a" title="Used to store the index of atoms for this OBFFCalculation.">idx_c</a>;
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a6ddb04505fbda255d73c3e5d09571b04">00177</a>     <span class="keywordtype">double</span> *<a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a6ddb04505fbda255d73c3e5d09571b04" title="Pointer to atom coordinates as double[3].">pos_c</a>;
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a8c8a61abf052a7ad6ce5f0f074ac351d">00179</a>     <span class="keywordtype">double</span> force_c[3];
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#a1adda0196551047b1256f060572007a5">00181</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation3</a>()
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183     }
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#aa063f21c51ee71ca470bce2e7042b815">00186</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetupPointers()
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       <span class="keywordflow">if</span> (!a || !b || !c) <span class="keywordflow">return</span>;
<a name="l00189"></a>00189       pos_a = a-&gt;GetCoordinate();
<a name="l00190"></a>00190       idx_a = a-&gt;GetIdx();
<a name="l00191"></a>00191       pos_b = b-&gt;GetCoordinate();
<a name="l00192"></a>00192       idx_b = b-&gt;GetIdx();
<a name="l00193"></a>00193       pos_c = c-&gt;GetCoordinate();
<a name="l00194"></a>00194       idx_c = c-&gt;GetIdx();
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196   };
<a name="l00197"></a>00197 
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml">00200</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation4</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation3</a>
<a name="l00201"></a>00201   {
<a name="l00202"></a>00202   <span class="keyword">public</span>:
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a457c0f77c032f8f7de69fabdd1a669a4">00204</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a457c0f77c032f8f7de69fabdd1a669a4" title="Used to store the atoms for this OBFFCalculation.">d</a>;
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a815ecadb16b028e5ca95121791128c4f">00206</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a815ecadb16b028e5ca95121791128c4f" title="Used to store the index of atoms for this OBFFCalculation.">idx_d</a>;
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#ae06bd6c1d1e4d2b8e2fe5ddb797b2164">00208</a>     <span class="keywordtype">double</span> *<a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#ae06bd6c1d1e4d2b8e2fe5ddb797b2164" title="Pointer to atom coordinates as double[3].">pos_d</a>;
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a20a8d079b2a45b324c0b8c142510ee00">00210</a>     <span class="keywordtype">double</span> force_d[3];
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#acbada7180292de7f7c8cafc3c65ba802">00212</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific force fields...">OBFFCalculation4</a>()
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214     }
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#a23b6e1e5e28cdcd7afc3113b7a3bdbea">00217</a>     <span class="keywordtype">void</span> SetupPointers()
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219       <span class="keywordflow">if</span> (!a || !b || !c || !d) <span class="keywordflow">return</span>;
<a name="l00220"></a>00220       pos_a = a-&gt;GetCoordinate();
<a name="l00221"></a>00221       idx_a = a-&gt;GetIdx();
<a name="l00222"></a>00222       pos_b = b-&gt;GetCoordinate();
<a name="l00223"></a>00223       idx_b = b-&gt;GetIdx();
<a name="l00224"></a>00224       pos_c = c-&gt;GetCoordinate();
<a name="l00225"></a>00225       idx_c = c-&gt;GetIdx();
<a name="l00226"></a>00226       pos_d = d-&gt;GetCoordinate();
<a name="l00227"></a>00227       idx_d = d-&gt;GetIdx();
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229   };
<a name="l00230"></a>00230 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml">00234</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml" title="Internal class for OBForceField to hold constraints.">OBFFConstraint</a>
<a name="l00235"></a>00235   {
<a name="l00236"></a>00236   <span class="keyword">public</span>:
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a2d7e5dd7a479c4c7aef6e6133a1441c5">00238</a>     <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a2d7e5dd7a479c4c7aef6e6133a1441c5" title="Used to store the contraint energy for this OBFFConstraint.">factor</a>, constraint_value;
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a30de1b49893da89052152acbac377988">00239</a>     <span class="keywordtype">double</span> rab0, <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a30de1b49893da89052152acbac377988">rbc0</a>;
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#ac765329451135abec74c45e1897abf26">00241</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#ac765329451135abec74c45e1897abf26" title="Used to store the contraint type for this OBFFConstraint.">type</a>, ia, ib, ic, id;
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#abc62ecd7a79c7d1cd07ef8aee2ec0bb6">00243</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, *b, *c, *<a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#abc62ecd7a79c7d1cd07ef8aee2ec0bb6">d</a>;
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a360127e447a0f25cfd633cba0c784db7">00245</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> grada, gradb, gradc, <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a360127e447a0f25cfd633cba0c784db7">gradd</a>;
<a name="l00246"></a>00246 
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#aaec19a6806233001c0fb9173903e5372">00248</a>     <a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml" title="Internal class for OBForceField to hold constraints.">OBFFConstraint</a>()
<a name="l00249"></a>00249       {
<a name="l00250"></a>00250         a = b = c = d = NULL;
<a name="l00251"></a>00251         ia = ib = ic = <span class="keywordtype">id</span> = 0;
<a name="l00252"></a>00252         constraint_value = 0.0;
<a name="l00253"></a>00253         factor = 0.0;
<a name="l00254"></a>00254       }
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#a42a5eb0558a3777f22ab404b02a5fd1b">00256</a>     ~<a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml" title="Internal class for OBForceField to hold constraints.">OBFFConstraint</a>()
<a name="l00257"></a>00257       {
<a name="l00258"></a>00258       }
<a name="l00259"></a>00259 
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#aa72374f7ad0c140529a3b010e7daf8af">00260</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetGradient(<span class="keywordtype">int</span> a)
<a name="l00261"></a>00261     {
<a name="l00262"></a>00262       <span class="keywordflow">if</span> (a == ia)
<a name="l00263"></a>00263         <span class="keywordflow">return</span> grada;
<a name="l00264"></a>00264       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == ib)
<a name="l00265"></a>00265         <span class="keywordflow">return</span> gradb;
<a name="l00266"></a>00266       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == ic)
<a name="l00267"></a>00267         <span class="keywordflow">return</span> gradc;
<a name="l00268"></a>00268       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == <span class="keywordtype">id</span>)
<a name="l00269"></a>00269         <span class="keywordflow">return</span> gradd;
<a name="l00270"></a>00270       <span class="keywordflow">else</span>
<a name="l00271"></a>00271         <span class="keywordflow">return</span>  <a class="code" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;">VZero</a>;
<a name="l00272"></a>00272     }
<a name="l00273"></a>00273   };
<a name="l00274"></a>00274 
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml">00278</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>
<a name="l00279"></a>00279   {
<a name="l00280"></a>00280   <span class="keyword">public</span>:
<a name="l00282"></a>00282     <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>();
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#aabbe8ba0bb89a9324a43f54468bd6f11">00284</a>     ~<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>()
<a name="l00285"></a>00285       {
<a name="l00286"></a>00286         _constraints.clear();
<a name="l00287"></a>00287         _ignored.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#aa71d36872f416feaa853788a7a7a7ef8" title="Clear all constraints.">Clear</a>();
<a name="l00288"></a>00288         _fixed.Clear();
<a name="l00289"></a>00289         _Xfixed.Clear();
<a name="l00290"></a>00290         _Yfixed.Clear();
<a name="l00291"></a>00291         _Zfixed.Clear();
<a name="l00292"></a>00292       }
<a name="l00294"></a>00294     <span class="keywordtype">void</span> Clear();
<a name="l00296"></a>00296     <span class="keywordtype">double</span> GetConstraintEnergy();
<a name="l00298"></a>00298     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetGradient(<span class="keywordtype">int</span> a);
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#a23c4410bafb1dd9a449e8710e290fc64">00300</a>     <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a> &amp;ai)
<a name="l00301"></a>00301       {
<a name="l00302"></a>00302         <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;ai) {
<a name="l00303"></a>00303           _constraints = ai._constraints;
<a name="l00304"></a>00304           _ignored = ai._ignored;
<a name="l00305"></a>00305           _fixed = ai._fixed;
<a name="l00306"></a>00306           _Xfixed = ai._Xfixed;
<a name="l00307"></a>00307           _Yfixed = ai._Yfixed;
<a name="l00308"></a>00308           _Zfixed = ai._Zfixed;
<a name="l00309"></a>00309         }
<a name="l00310"></a>00310         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00311"></a>00311       }
<a name="l00312"></a>00312 
<a name="l00316"></a>00316     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00317"></a>00317 
<a name="l00319"></a>00319     <span class="comment">// Set Constraints                                                     //</span>
<a name="l00322"></a>00322 <span class="comment"></span>
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     <span class="keywordtype">void</span> SetFactor(<span class="keywordtype">double</span> factor);
<a name="l00326"></a>00326     <span class="keywordtype">void</span> AddIgnore(<span class="keywordtype">int</span> a);
<a name="l00328"></a>00328     <span class="keywordtype">void</span> AddAtomConstraint(<span class="keywordtype">int</span> a);
<a name="l00330"></a>00330     <span class="keywordtype">void</span> AddAtomXConstraint(<span class="keywordtype">int</span> a);
<a name="l00332"></a>00332     <span class="keywordtype">void</span> AddAtomYConstraint(<span class="keywordtype">int</span> a);
<a name="l00334"></a>00334     <span class="keywordtype">void</span> AddAtomZConstraint(<span class="keywordtype">int</span> a);
<a name="l00336"></a>00336     <span class="keywordtype">void</span> AddDistanceConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">double</span> length);
<a name="l00338"></a>00338     <span class="keywordtype">void</span> AddAngleConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">double</span> angle);
<a name="l00340"></a>00340     <span class="keywordtype">void</span> AddTorsionConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, <span class="keywordtype">double</span> torsion);
<a name="l00343"></a>00343     <span class="keywordtype">void</span> DeleteConstraint(<span class="keywordtype">int</span> index);
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     <span class="comment">// Get Constraints                                                     //</span>
<a name="l00349"></a>00349 <span class="comment"></span>
<a name="l00350"></a>00350 
<a name="l00351"></a>00351     <span class="keywordtype">double</span> GetFactor();
<a name="l00353"></a>00353     <span class="keywordtype">int</span> Size() <span class="keyword">const</span>;
<a name="l00363"></a>00363     <span class="keywordtype">int</span> GetConstraintType(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00367"></a>00367     <span class="keywordtype">double</span> GetConstraintValue(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00370"></a>00370     <span class="keywordtype">int</span> GetConstraintAtomA(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00373"></a>00373     <span class="keywordtype">int</span> GetConstraintAtomB(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00376"></a>00376     <span class="keywordtype">int</span> GetConstraintAtomC(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00379"></a>00379     <span class="keywordtype">int</span> GetConstraintAtomD(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00382"></a>00382     <span class="keywordtype">bool</span> IsIgnored(<span class="keywordtype">int</span> a);
<a name="l00385"></a>00385     <span class="keywordtype">bool</span> IsFixed(<span class="keywordtype">int</span> a);
<a name="l00388"></a>00388     <span class="keywordtype">bool</span> IsXFixed(<span class="keywordtype">int</span> a);
<a name="l00391"></a>00391     <span class="keywordtype">bool</span> IsYFixed(<span class="keywordtype">int</span> a);
<a name="l00394"></a>00394     <span class="keywordtype">bool</span> IsZFixed(<span class="keywordtype">int</span> a);
<a name="l00398"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#aa32799d67f2aeece7ee1a0d0ce78d488">00398</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#aa32799d67f2aeece7ee1a0d0ce78d488">GetIgnoredBitVec</a>() { <span class="keywordflow">return</span> _ignored; }
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#a770eb922e5625b67a4e40b83b8fdc8cc">00401</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#a770eb922e5625b67a4e40b83b8fdc8cc">GetFixedBitVec</a>() { <span class="keywordflow">return</span> _fixed; }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404   <span class="keyword">private</span>:
<a name="l00405"></a>00405     std::vector&lt;OBFFConstraint&gt; _constraints;
<a name="l00406"></a>00406     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    _ignored;
<a name="l00407"></a>00407     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    _fixed;
<a name="l00408"></a>00408     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    _Xfixed;
<a name="l00409"></a>00409     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    _Yfixed;
<a name="l00410"></a>00410     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    _Zfixed;
<a name="l00411"></a>00411     <span class="keywordtype">double</span> _factor;
<a name="l00412"></a>00412   };
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <span class="comment">// Class OBForceField</span>
<a name="l00415"></a>00415   <span class="comment">// class introduction in forcefield.cpp</span>
<a name="l00416"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml">00416</a>   <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00417"></a>00417   {
<a name="l00418"></a>00418     <a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a>)
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <span class="keyword">protected</span>:
<a name="l00421"></a>00421 
<a name="l00463"></a>00463     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>* GetParameter(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00465"></a>00465     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>* GetParameter(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b, <span class="keyword">const</span> <span class="keywordtype">char</span>* c, <span class="keyword">const</span> <span class="keywordtype">char</span>* d,
<a name="l00466"></a>00466         std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00468"></a>00468     <span class="keywordtype">int</span> GetParameterIdx(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00469"></a>00469 
<a name="l00478"></a>00478     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> NumericalDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#a586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>);
<a name="l00480"></a>00480     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> NumericalSecondDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#a586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>);
<a name="l00481"></a>00481 
<a name="l00482"></a>00482     <span class="comment">/*</span>
<a name="l00483"></a>00483 <span class="comment">     *   NEW gradients functions</span>
<a name="l00484"></a>00484 <span class="comment">     */</span>
<a name="l00485"></a>00485 
<a name="l00488"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab2ac199e3ef0f47fbdc0365ededfeced">00488</a>     <span class="keywordtype">void</span> SetGradient(<span class="keywordtype">double</span> *grad, <span class="keywordtype">int</span> idx)
<a name="l00489"></a>00489     {
<a name="l00490"></a>00490       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (idx - 1) * 3;
<a name="l00491"></a>00491       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) {
<a name="l00492"></a>00492         _gradientPtr[coordIdx + i] = grad[i];
<a name="l00493"></a>00493       }
<a name="l00494"></a>00494     }
<a name="l00495"></a>00495 
<a name="l00498"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab0b5fe1f004e97857de0cf641b5e3789">00498</a>     <span class="keywordtype">void</span> AddGradient(<span class="keywordtype">double</span> *grad, <span class="keywordtype">int</span> idx)
<a name="l00499"></a>00499     {
<a name="l00500"></a>00500       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (idx - 1) * 3;
<a name="l00501"></a>00501       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) {
<a name="l00502"></a>00502         _gradientPtr[coordIdx + i] += grad[i];
<a name="l00503"></a>00503       }
<a name="l00504"></a>00504     }
<a name="l00505"></a>00505 
<a name="l00508"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad0da17ffd83c1041f1d0657404b4724d">00508</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetGradient(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> <span class="comment">/*terms*/</span> = <a class="code" href="forcefield_8h.shtml#a586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>)
<a name="l00509"></a>00509     {
<a name="l00510"></a>00510       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (a-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>() - 1) * 3;
<a name="l00511"></a>00511       <span class="keywordflow">return</span> _gradientPtr + coordIdx;
<a name="l00512"></a>00512     }
<a name="l00513"></a>00513 
<a name="l00516"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab1736c0602ea4313ff7602aa948ece82">00516</a>     <span class="keywordtype">double</span>* GetGradientPtr()
<a name="l00517"></a>00517     {
<a name="l00518"></a>00518       <span class="keywordflow">return</span> _gradientPtr;
<a name="l00519"></a>00519     }
<a name="l00520"></a>00520 
<a name="l00523"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#afeabf5a9fd6207144ed24a80c39714a2">00523</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ClearGradients()
<a name="l00524"></a>00524     {
<a name="l00525"></a>00525       <span class="comment">// We cannot use memset because IEEE floating point representations</span>
<a name="l00526"></a>00526       <span class="comment">// are not guaranteed by C/C++ standard, but this loop can be</span>
<a name="l00527"></a>00527       <span class="comment">// unrolled or vectorized by compilers</span>
<a name="l00528"></a>00528       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _ncoords; ++i)
<a name="l00529"></a>00529         _gradientPtr[i] = 0.0;
<a name="l00530"></a>00530       <span class="comment">//      memset(_gradientPtr, &#39;\0&#39;, sizeof(double)*_ncoords);</span>
<a name="l00531"></a>00531     }
<a name="l00532"></a>00532 
<a name="l00540"></a>00540     <span class="keywordtype">bool</span> IsInSameRing(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b);
<a name="l00541"></a>00541 
<a name="l00542"></a>00542     <span class="comment">// general variables</span>
<a name="l00543"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a">00543</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>       <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5ae66d31df78d115efc8282c8c695c1a" title="Molecule to be evaluated or minimized.">_mol</a>; 
<a name="l00544"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a40756214f69d1c40ad70b64ae9fdc08d">00544</a>     <span class="keywordtype">bool</span>        <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a40756214f69d1c40ad70b64ae9fdc08d" title="Used to make sure we only parse the parameter file once, when needed.">_init</a>; 
<a name="l00545"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a0ad96c121eb2ab3291c9f348f3e66eb4">00545</a>     std::string <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a0ad96c121eb2ab3291c9f348f3e66eb4">_parFile</a>; 
<a name="l00546"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a2d0a817f871831bed3e700ff65bd32ab">00546</a>     <span class="keywordtype">bool</span>        <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a2d0a817f871831bed3e700ff65bd32ab" title="&lt; parameter file name">_validSetup</a>; 
<a name="l00547"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa1d49201f58bfcceb6d47593bf360bcd">00547</a>     <span class="keywordtype">double</span>      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa1d49201f58bfcceb6d47593bf360bcd" title="pointer to the gradients (used by AddGradient(), minimization functions, ...)">_gradientPtr</a>; 
<a name="l00548"></a>00548     <span class="comment">// logging variables</span>
<a name="l00549"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa5950d373df53720595c030d3db04397">00549</a>     std::ostream* <a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa5950d373df53720595c030d3db04397" title="Output for logfile.">_logos</a>; 
<a name="l00550"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a158daac1f91a0b0efd242be1bd7c30e4">00550</a>     <span class="keywordtype">char</span>        _logbuf[<a class="code" href="mol_8h.shtml#a6c7cd32e1bac137f05e4a752b4ad10af">BUFF_SIZE</a>+1]; 
<a name="l00551"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4e929e2f2b2aeb818341fff4bc1d73d0">00551</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4e929e2f2b2aeb818341fff4bc1d73d0" title="Log level for output.">_loglvl</a>; 
<a name="l00552"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a122d15094b107a94e4359e67e0e1f539">00552</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a122d15094b107a94e4359e67e0e1f539">_origLogLevel</a>;
<a name="l00553"></a>00553     <span class="comment">// conformer genereation (rotor search) variables</span>
<a name="l00554"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab95ae5a13edb24f5d32b01e2098f26df">00554</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab95ae5a13edb24f5d32b01e2098f26df" title="used to hold i for current conformer (needed by UpdateConformers)">_current_conformer</a>; 
<a name="l00555"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7b2ba72f54b74909a53a0548cdf44ce2">00555</a>     std::vector&lt;double&gt; <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7b2ba72f54b74909a53a0548cdf44ce2" title="used to hold the energies for all conformers">_energies</a>; 
<a name="l00556"></a>00556     <span class="comment">// minimization variables</span>
<a name="l00557"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a47292a5e3cad98d5a169bd2c54103d66">00557</a>     <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a47292a5e3cad98d5a169bd2c54103d66">_econv</a>, _e_n1; 
<a name="l00558"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#afe138e40e061c04494421e5513829b37">00558</a>     <span class="keywordtype">int</span>         _cstep, <a class="code" href="classOpenBabel_1_1OBForceField.shtml#afe138e40e061c04494421e5513829b37" title="Used for conjugate gradients and steepest descent(Initialize and TakeNSteps)">_nsteps</a>; 
<a name="l00559"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1c24fef8a19cd43ec17f25b026570ad4">00559</a>     <span class="keywordtype">double</span>      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1c24fef8a19cd43ec17f25b026570ad4" title="Used for conjugate gradients and steepest descent(Initialize and TakeNSteps)">_grad1</a>; 
<a name="l00560"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab39c453046b3d76a24615c0f4ddb5dc4">00560</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab39c453046b3d76a24615c0f4ddb5dc4" title="Number of coordinates for conjugate gradients.">_ncoords</a>; 
<a name="l00561"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#afb076d7d251019d009f919e41161d004">00561</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBForceField.shtml#afb076d7d251019d009f919e41161d004" title="LineSearch type.">_linesearch</a>; 
<a name="l00562"></a>00562     <span class="comment">// molecular dynamics variables</span>
<a name="l00563"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a74c5643406e1d2fc9a8ec5a64a746d6f">00563</a>     <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a74c5643406e1d2fc9a8ec5a64a746d6f" title="Molecular dynamics time step in picoseconds.">_timestep</a>; 
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a21c5ecf3204a9907236f7596268a76a1">00564</a>     <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a21c5ecf3204a9907236f7596268a76a1" title="Molecular dynamics temperature in Kelvin.">_temp</a>; 
<a name="l00565"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a60c161177d9d80020f3a42d8f5ad2a97">00565</a>     <span class="keywordtype">double</span>      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#a60c161177d9d80020f3a42d8f5ad2a97" title="pointer to the velocities">_velocityPtr</a>; 
<a name="l00566"></a>00566     <span class="comment">// contraint varibles</span>
<a name="l00567"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a22f844c60684776be9d47109855e16de">00567</a>     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a22f844c60684776be9d47109855e16de" title="Constraints.">_constraints</a>; 
<a name="l00568"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad7d6ee4569e450185c8e229aa405e138">00568</a>     <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad7d6ee4569e450185c8e229aa405e138" title="SetFixAtom()/UnsetFixAtom()">_fixAtom</a>; 
<a name="l00569"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1a201141d98a5e271d02d2a083bc3a0f">00569</a>     <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1a201141d98a5e271d02d2a083bc3a0f" title="SetIgnoreAtom()/UnsetIgnoreAtom()">_ignoreAtom</a>; 
<a name="l00570"></a>00570     <span class="comment">// cut-off variables</span>
<a name="l00571"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6664339ecef04e70cd97a0a5738b99c3">00571</a>     <span class="keywordtype">bool</span>        <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6664339ecef04e70cd97a0a5738b99c3" title="true = cut-off enabled">_cutoff</a>; 
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1eab6cf4abedfa50bd898b5d8394586a">00572</a>     <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1eab6cf4abedfa50bd898b5d8394586a" title="VDW cut-off distance.">_rvdw</a>; 
<a name="l00573"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1cb4961672fc9fdbbcc6f77f10328124">00573</a>     <span class="keywordtype">double</span>      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1cb4961672fc9fdbbcc6f77f10328124" title="Electrostatic cut-off distance.">_rele</a>; 
<a name="l00574"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#acf019f5fea50c00abe4a8eceb1ebefd0">00574</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    <a class="code" href="classOpenBabel_1_1OBForceField.shtml#acf019f5fea50c00abe4a8eceb1ebefd0" title="VDW pairs that should be calculated.">_vdwpairs</a>; 
<a name="l00575"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a304e7d6e8b9b55195148d8ce241c4231">00575</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>    <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a304e7d6e8b9b55195148d8ce241c4231" title="Electrostatic pairs that should be calculated.">_elepairs</a>; 
<a name="l00576"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6daefdab547529f4ddee1b729085df82">00576</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6daefdab547529f4ddee1b729085df82" title="The frequence to update non-bonded pairs.">_pairfreq</a>; 
<a name="l00577"></a>00577     <span class="comment">// group variables</span>
<a name="l00578"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad73a3ddc8c65a31256666ba5cd10fcf3">00578</a>     std::vector&lt;OBBitVec&gt; <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad73a3ddc8c65a31256666ba5cd10fcf3" title="groups for which intra-molecular interactions should be calculated">_intraGroup</a>; 
<a name="l00579"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6212b1ca8ff39273ec120c20524deba4">00579</a>     std::vector&lt;OBBitVec&gt; <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6212b1ca8ff39273ec120c20524deba4" title="groups for which intra-molecular interactions should be calculated">_interGroup</a>; 
<a name="l00580"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab3487cbb18bbd78d58a4afa84d65beb4">00580</a>     std::vector&lt;std::pair&lt;OBBitVec, OBBitVec&gt; &gt; _interGroups; 
<a name="l00581"></a>00581 
<a name="l00582"></a>00582   <span class="keyword">public</span>:
<a name="l00586"></a>00586     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a>* MakeNewInstance()=0;
<a name="l00587"></a>00587 
<a name="l00589"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab49558e469015d76e7c27ee0cfdf4a75">00589</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a>()
<a name="l00590"></a>00590     {
<a name="l00591"></a>00591       <span class="keywordflow">if</span> (_grad1 != NULL) {
<a name="l00592"></a>00592         <span class="keyword">delete</span> [] _grad1;
<a name="l00593"></a>00593         _grad1 = NULL;
<a name="l00594"></a>00594       }
<a name="l00595"></a>00595       <span class="keywordflow">if</span> (_gradientPtr != NULL) {
<a name="l00596"></a>00596         <span class="keyword">delete</span> [] _gradientPtr;
<a name="l00597"></a>00597         _gradientPtr = NULL;
<a name="l00598"></a>00598       }
<a name="l00599"></a>00599     }
<a name="l00600"></a>00600 
<a name="l00602"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a45db88b29eb37e9dd105bf4032e421d2">00602</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID()
<a name="l00603"></a>00603     {
<a name="l00604"></a>00604       <span class="keywordflow">return</span> <span class="stringliteral">&quot;forcefields&quot;</span>;
<a name="l00605"></a>00605     }
<a name="l00606"></a>00606 
<a name="l00610"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4d625c122a1c2ed931851331b0243950">00610</a>     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a>* FindForceField(<span class="keyword">const</span> std::string&amp; ID)
<a name="l00611"></a>00611     {
<a name="l00612"></a>00612       <span class="keywordflow">return</span> FindType(ID.c_str());
<a name="l00613"></a>00613     }
<a name="l00617"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a8af11ddb5650f7733164c81da3aacbd8">00617</a>     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a>* FindForceField(<span class="keyword">const</span> <span class="keywordtype">char</span> *ID)
<a name="l00618"></a>00618     {
<a name="l00619"></a>00619       <span class="keywordflow">return</span> FindType(ID);
<a name="l00620"></a>00620     }
<a name="l00621"></a>00621     <span class="comment">/*</span>
<a name="l00622"></a>00622 <span class="comment">     *</span>
<a name="l00623"></a>00623 <span class="comment">     */</span>
<a name="l00624"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#af264a32549daf4185196ac9d9c074833">00624</a>     <span class="keywordtype">void</span> SetParameterFile(<span class="keyword">const</span> std::string &amp;filename)
<a name="l00625"></a>00625     {
<a name="l00626"></a>00626       _parFile = filename;
<a name="l00627"></a>00627       _init = <span class="keyword">false</span>;
<a name="l00628"></a>00628     }
<a name="l00631"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1107abae4af40cd96faa7385b4de79c2">00631</a>     <span class="keyword">virtual</span> std::string <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1107abae4af40cd96faa7385b4de79c2">GetUnit</a>() { <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;au&quot;</span>); }
<a name="l00632"></a>00632     <span class="comment">/* Does this force field have analytical gradients defined for all</span>
<a name="l00633"></a>00633 <span class="comment">     * calculation components (bonds, angles, non-bonded, etc.)</span>
<a name="l00634"></a>00634 <span class="comment">     * If this is true, code should default to using OBFF_ANALYTICAL_GRADIENT</span>
<a name="l00635"></a>00635 <span class="comment">     * for SteepestDescent() or ConjugateGradients().</span>
<a name="l00636"></a>00636 <span class="comment">     * \return True if all analytical gradients are implemented.</span>
<a name="l00637"></a>00637 <span class="comment">     */</span>
<a name="l00638"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">00638</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a6bdadd446f41751086aff8c6a4fde5cf">HasAnalyticalGradients</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00643"></a>00643     <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00649"></a>00649     <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a> &amp;constraints);
<a name="l00653"></a>00653     <span class="comment">// move to protected in future version</span>
<a name="l00654"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4832732ca896c32a5c7cab59513f2190">00654</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4832732ca896c32a5c7cab59513f2190">ParseParamFile</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00658"></a>00658     <span class="comment">// move to protected in future version</span>
<a name="l00659"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5e025d2eb5240ce5776e5cd4ad54f557">00659</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5e025d2eb5240ce5776e5cd4ad54f557">SetTypes</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00663"></a>00663     <span class="comment">// move to protected in future version</span>
<a name="l00664"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a0d8cc6c6af6a74b49c13ef35750910c0">00664</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a0d8cc6c6af6a74b49c13ef35750910c0">SetFormalCharges</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00668"></a>00668     <span class="comment">// move to protected in future version</span>
<a name="l00669"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab6922ea591809c44c1c0d89be3f8b691">00669</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab6922ea591809c44c1c0d89be3f8b691">SetPartialCharges</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00673"></a>00673     <span class="comment">// move to protected in future version</span>
<a name="l00674"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#af2662d702c1eb43cc58c30d274712e3f">00674</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#af2662d702c1eb43cc58c30d274712e3f">SetupCalculations</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00679"></a>00679     <span class="comment">// move to protected in future version</span>
<a name="l00680"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7cf46e58ec76819b7ae31983cfdee9f2">00680</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7cf46e58ec76819b7ae31983cfdee9f2">SetupPointers</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00686"></a>00686     <span class="keywordtype">bool</span> IsSetupNeeded(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00702"></a>00702     <span class="keywordtype">bool</span> GetAtomTypes(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00718"></a>00718     <span class="keywordtype">bool</span> GetPartialCharges(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00719"></a>00719 
<a name="l00720"></a>00720 
<a name="l00721"></a>00721 
<a name="l00726"></a>00726     <span class="keywordtype">bool</span> GetCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00728"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab9bff2ca9aad359da6491fa4c3f46577">00728</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab9bff2ca9aad359da6491fa4c3f46577">UpdateCoordinates</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol) {<span class="keywordflow">return</span> GetCoordinates(mol); }
<a name="l00733"></a>00733     <span class="keywordtype">bool</span> GetConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00735"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5c29065ad6e1322ade9087657bc576ec">00735</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5c29065ad6e1322ade9087657bc576ec">UpdateConformers</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol) { <span class="keywordflow">return</span> GetConformers(mol); }
<a name="l00740"></a>00740     <span class="keywordtype">bool</span> SetCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00745"></a>00745     <span class="keywordtype">bool</span> SetConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00755"></a>00755     <a class="code" href="classOpenBabel_1_1OBGridData.shtml" title="Store values for numeric grids such as orbitals or electrostatic potential.">OBGridData</a> *GetGrid(<span class="keywordtype">double</span> step, <span class="keywordtype">double</span> padding, <span class="keyword">const</span> <span class="keywordtype">char</span> *type, <span class="keywordtype">double</span> pchg);
<a name="l00756"></a>00756 
<a name="l00758"></a>00758     <span class="comment">// Interacting groups                                                  //</span>
<a name="l00760"></a>00760 <span class="comment"></span>
<a name="l00762"></a>00762 
<a name="l00763"></a>00763 
<a name="l00767"></a>00767     <span class="keywordtype">void</span> AddIntraGroup(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;group);
<a name="l00772"></a>00772     <span class="keywordtype">void</span> AddInterGroup(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;group);
<a name="l00780"></a>00780     <span class="keywordtype">void</span> AddInterGroups(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;group1, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;group2);
<a name="l00783"></a>00783     <span class="keywordtype">void</span> ClearGroups();
<a name="l00786"></a>00786     <span class="keywordtype">bool</span> HasGroups();
<a name="l00788"></a>00788 
<a name="l00790"></a>00790     <span class="comment">// Cut-off                                                             //</span>
<a name="l00792"></a>00792 <span class="comment"></span>
<a name="l00794"></a>00794 
<a name="l00795"></a>00795 
<a name="l00798"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#acfbc43a75be62083cb454b62fb7c24fc">00798</a>     <span class="keywordtype">void</span> EnableCutOff(<span class="keywordtype">bool</span> enable)
<a name="l00799"></a>00799     {
<a name="l00800"></a>00800       _cutoff = enable;
<a name="l00801"></a>00801     }
<a name="l00804"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a395ba2797e3bc2f4ad4a401b074d0b48">00804</a>     <span class="keywordtype">bool</span> IsCutOffEnabled()
<a name="l00805"></a>00805     {
<a name="l00806"></a>00806       <span class="keywordflow">return</span> _cutoff;
<a name="l00807"></a>00807     }
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a82b6dd2103b4751237474bb3671a4d24">00811</a>     <span class="keywordtype">void</span> SetVDWCutOff(<span class="keywordtype">double</span> r)
<a name="l00812"></a>00812     {
<a name="l00813"></a>00813       _rvdw = r;
<a name="l00814"></a>00814     }
<a name="l00818"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a4109e7005a5eb4c91f10bd68958bfbf7">00818</a>     <span class="keywordtype">double</span> GetVDWCutOff()
<a name="l00819"></a>00819     {
<a name="l00820"></a>00820       <span class="keywordflow">return</span> _rvdw;
<a name="l00821"></a>00821     }
<a name="l00826"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a8cd8ec1bf4c4405aa94f3b6b3a86e45e">00826</a>     <span class="keywordtype">void</span> SetElectrostaticCutOff(<span class="keywordtype">double</span> r)
<a name="l00827"></a>00827     {
<a name="l00828"></a>00828       _rele = r;
<a name="l00829"></a>00829     }
<a name="l00833"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a15a2329a93fec0c5864c6229daf4254f">00833</a>     <span class="keywordtype">double</span> GetElectrostaticCutOff()
<a name="l00834"></a>00834     {
<a name="l00835"></a>00835       <span class="keywordflow">return</span> _rele;
<a name="l00836"></a>00836     }
<a name="l00842"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#af02e18f8a525f1e682b58654656f5d12">00842</a>     <span class="keywordtype">void</span> SetUpdateFrequency(<span class="keywordtype">int</span> f)
<a name="l00843"></a>00843     {
<a name="l00844"></a>00844       _pairfreq = f;
<a name="l00845"></a>00845     }
<a name="l00849"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a80a6e534a8f9a7ba20d4fc25b75c6891">00849</a>     <span class="keywordtype">int</span> GetUpdateFrequency()
<a name="l00850"></a>00850     {
<a name="l00851"></a>00851       <span class="keywordflow">return</span> _pairfreq;
<a name="l00852"></a>00852     }
<a name="l00857"></a>00857     <span class="keywordtype">void</span> UpdatePairsSimple();
<a name="l00858"></a>00858 
<a name="l00859"></a>00859     <span class="comment">//void UpdatePairsGroup(); TODO</span>
<a name="l00860"></a>00860 
<a name="l00864"></a>00864     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumPairs();
<a name="l00868"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a3545e8d4699a3cd7beba90de2fa7bedc">00868</a>     <span class="keywordtype">void</span> EnableAllPairs()
<a name="l00869"></a>00869     {
<a name="l00870"></a>00870       <span class="comment">// TODO: OBBitVec doesn&#39;t seem to be allocating it&#39;s memory correctly</span>
<a name="l00871"></a>00871       <span class="comment">//_vdwpairs.SetRangeOn(0, _numpairs-1);</span>
<a name="l00872"></a>00872       <span class="comment">//_elepairs.SetRangeOn(0, _numpairs-1);</span>
<a name="l00873"></a>00873     }
<a name="l00875"></a>00875 
<a name="l00877"></a>00877     <span class="comment">// Energy Evaluation                                                   //</span>
<a name="l00879"></a>00879 <span class="comment"></span>
<a name="l00881"></a>00881 
<a name="l00882"></a>00882 
<a name="l00891"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">00891</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad9242de2f838fb94efcd85f7182a6f83">Energy</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00898"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ada5914c7c0927cc9157d404ac175bcce">00898</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ada5914c7c0927cc9157d404ac175bcce">E_Bond</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00905"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab071cd3395d95bfa4c90cbdc3426c95a">00905</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab071cd3395d95bfa4c90cbdc3426c95a">E_Angle</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00912"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a180eb032b11995b3140d54b1fd1ec991">00912</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a180eb032b11995b3140d54b1fd1ec991">E_StrBnd</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00919"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#abcf664aaa0bbb807a4f6e3d441d3147a">00919</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#abcf664aaa0bbb807a4f6e3d441d3147a">E_Torsion</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00926"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a83d00f6965c92799d4d4a6e488a737e3">00926</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a83d00f6965c92799d4d4a6e488a737e3">E_OOP</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00933"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a9a27f6899e6a57b234cfe79022ca0d1c">00933</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a9a27f6899e6a57b234cfe79022ca0d1c">E_VDW</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00940"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7ed5b3a5502abbe3a9931165475905e0">00940</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a7ed5b3a5502abbe3a9931165475905e0">E_Electrostatic</a>(<span class="keywordtype">bool</span> UNUSED(gradients) = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00942"></a>00942 
<a name="l00944"></a>00944     <span class="comment">// Logging                                                             //</span>
<a name="l00946"></a>00946 <span class="comment"></span>
<a name="l00948"></a>00948 
<a name="l00949"></a>00949 
<a name="l00951"></a>00951     <span class="keywordtype">void</span> PrintTypes();
<a name="l00955"></a>00955     <span class="keywordtype">void</span> PrintFormalCharges();
<a name="l00958"></a>00958     <span class="keywordtype">void</span> PrintPartialCharges();
<a name="l00961"></a>00961     <span class="keywordtype">void</span> PrintVelocities();
<a name="l00966"></a>00966     <span class="keywordtype">bool</span> SetLogFile(std::ostream *pos);
<a name="l00991"></a>00991     <span class="keywordtype">bool</span> SetLogLevel(<span class="keywordtype">int</span> level);
<a name="l00994"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa9927fd2efb61460c8e879f83c0d387e">00994</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa9927fd2efb61460c8e879f83c0d387e">GetLogLevel</a>() { <span class="keywordflow">return</span> _loglvl; }
<a name="l00998"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a06249fabc93686f6fa389173bcd2e300">00998</a>     <span class="keywordtype">void</span> OBFFLog(std::string msg)
<a name="l00999"></a>00999     {
<a name="l01000"></a>01000       <span class="keywordflow">if</span> (!_logos)
<a name="l01001"></a>01001         <span class="keywordflow">return</span>;
<a name="l01002"></a>01002 
<a name="l01003"></a>01003       *_logos &lt;&lt; msg;
<a name="l01004"></a>01004     }
<a name="l01008"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a232f01774986e74179b56eb961728a54">01008</a>     <span class="keywordtype">void</span> OBFFLog(<span class="keyword">const</span> <span class="keywordtype">char</span> *msg)
<a name="l01009"></a>01009     {
<a name="l01010"></a>01010       <span class="keywordflow">if</span> (!_logos)
<a name="l01011"></a>01011         <span class="keywordflow">return</span>;
<a name="l01012"></a>01012 
<a name="l01013"></a>01013       *_logos &lt;&lt; msg;
<a name="l01014"></a>01014     }
<a name="l01016"></a>01016 
<a name="l01018"></a>01018     <span class="comment">// Structure Generation                                                //</span>
<a name="l01020"></a>01020 <span class="comment"></span>
<a name="l01022"></a>01022 
<a name="l01023"></a>01023 
<a name="l01024"></a>01024     <span class="keywordtype">void</span> DistanceGeometry();
<a name="l01044"></a>01044     <span class="keywordtype">void</span> SystematicRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01062"></a>01062     <span class="keywordtype">int</span> SystematicRotorSearchInitialize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01067"></a>01067     <span class="keywordtype">bool</span> SystematicRotorSearchNextConformer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01088"></a>01088     <span class="keywordtype">void</span> RandomRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01106"></a>01106     <span class="keywordtype">void</span> RandomRotorSearchInitialize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01111"></a>01111     <span class="keywordtype">bool</span> RandomRotorSearchNextConformer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01133"></a>01133     <span class="keywordtype">void</span> WeightedRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps);
<a name="l01134"></a>01134 
<a name="l01136"></a>01136     <span class="comment">// Energy Minimization                                                 //</span>
<a name="l01138"></a>01138 <span class="comment"></span>
<a name="l01140"></a>01140 
<a name="l01141"></a>01141 
<a name="l01144"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a303afe5059c4c70d029d160d6369fca7">01144</a>     <span class="keywordtype">void</span> SetLineSearchType(<span class="keywordtype">int</span> type)
<a name="l01145"></a>01145     {
<a name="l01146"></a>01146       _linesearch = type;
<a name="l01147"></a>01147     }
<a name="l01151"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#aa0635968faae8eae39c1157f34f1f186">01151</a>     <span class="keywordtype">int</span> GetLineSearchType()
<a name="l01152"></a>01152     {
<a name="l01153"></a>01153       <span class="keywordflow">return</span> _linesearch;
<a name="l01154"></a>01154     }
<a name="l01158"></a>01158     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> LineSearch(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;direction);
<a name="l01172"></a>01172     <span class="keywordtype">double</span> LineSearch(<span class="keywordtype">double</span> *currentCoords, <span class="keywordtype">double</span> *direction);
<a name="l01185"></a>01185     <span class="keywordtype">double</span> Newton2NumLineSearch(<span class="keywordtype">double</span> *direction);
<a name="l01191"></a>01191     <span class="keywordtype">void</span>   LineSearchTakeStep(<span class="keywordtype">double</span> *origCoords, <span class="keywordtype">double</span> *direction, <span class="keywordtype">double</span> step);
<a name="l01207"></a>01207     <span class="keywordtype">void</span> SteepestDescent(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01234"></a>01234     <span class="keywordtype">void</span> SteepestDescentInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01249"></a>01249     <span class="keywordtype">bool</span> SteepestDescentTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l01265"></a>01265     <span class="keywordtype">void</span> ConjugateGradients(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01293"></a>01293     <span class="keywordtype">void</span> ConjugateGradientsInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01309"></a>01309     <span class="keywordtype">bool</span> ConjugateGradientsTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l01311"></a>01311 
<a name="l01313"></a>01313     <span class="comment">// Molecular Dynamics                                                  //</span>
<a name="l01315"></a>01315 <span class="comment"></span>
<a name="l01317"></a>01317 
<a name="l01318"></a>01318 
<a name="l01320"></a>01320     <span class="keywordtype">void</span> GenerateVelocities();
<a name="l01340"></a>01340     <span class="keywordtype">void</span> CorrectVelocities();
<a name="l01356"></a>01356     <span class="keywordtype">void</span> MolecularDynamicsTakeNSteps(<span class="keywordtype">int</span> n, <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a>, <span class="keywordtype">double</span> timestep = 0.001, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#aa79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01358"></a>01358 
<a name="l01360"></a>01360     <span class="comment">// Constraints                                                         //</span>
<a name="l01362"></a>01362 <span class="comment"></span>
<a name="l01364"></a>01364 
<a name="l01365"></a>01365 
<a name="l01368"></a>01368     <a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>&amp; GetConstraints();
<a name="l01372"></a>01372     <span class="keywordtype">void</span> SetConstraints(<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml" title="Internal class for OBForceField to handle constraints.">OBFFConstraints</a>&amp; constraints);
<a name="l01380"></a>01380     <span class="keywordtype">void</span> SetFixAtom(<span class="keywordtype">int</span> index);
<a name="l01384"></a>01384     <span class="keywordtype">void</span> UnsetFixAtom();
<a name="l01393"></a>01393     <span class="keywordtype">void</span> SetIgnoreAtom(<span class="keywordtype">int</span> index);
<a name="l01397"></a>01397     <span class="keywordtype">void</span> UnsetIgnoreAtom();
<a name="l01398"></a>01398 
<a name="l01400"></a>01400     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b);
<a name="l01402"></a>01402     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l01404"></a>01404     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d);
<a name="l01406"></a>01406 
<a name="l01407"></a>01407 
<a name="l01409"></a>01409     <span class="comment">// Validation                                                          //</span>
<a name="l01411"></a>01411 <span class="comment"></span>
<a name="l01413"></a>01413 
<a name="l01414"></a>01414 
<a name="l01415"></a>01415     <span class="keywordtype">bool</span> DetectExplosion();
<a name="l01417"></a>01417     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> ValidateLineSearch(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;direction);
<a name="l01419"></a>01419     <span class="keywordtype">void</span> ValidateSteepestDescent(<span class="keywordtype">int</span> steps);
<a name="l01421"></a>01421     <span class="keywordtype">void</span> ValidateConjugateGradients(<span class="keywordtype">int</span> steps);
<a name="l01423"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a591a6c018926edaa3f398ca7134e26c9">01423</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a591a6c018926edaa3f398ca7134e26c9" title="Validate the force field implementation (debugging)">Validate</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01428"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5bd73ca104b0fd34659d77a7f9d3a0a4">01428</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#a5bd73ca104b0fd34659d77a7f9d3a0a4">ValidateGradients</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01433"></a>01433     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> ValidateGradientError(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;numgrad, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;anagrad);
<a name="l01435"></a>01435 
<a name="l01437"></a>01437     <span class="comment">// Vector Analysis                                                     //</span>
<a name="l01439"></a>01439 <span class="comment"></span>
<a name="l01441"></a>01441 
<a name="l01442"></a>01442 
<a name="l01450"></a>01450     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorBondDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b,
<a name="l01451"></a>01451                                        <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b);
<a name="l01455"></a>01455     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDistanceDerivative(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> pos_i, <span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> pos_j,
<a name="l01456"></a>01456                                            <span class="keywordtype">double</span> *force_i, <span class="keywordtype">double</span> *force_j);
<a name="l01458"></a>01458     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorLengthDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b);
<a name="l01459"></a>01459 
<a name="l01470"></a>01470     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngleDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c,
<a name="l01471"></a>01471                                         <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c);
<a name="l01473"></a>01473     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngleDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;c);
<a name="l01486"></a>01486     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOPDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c, <span class="keywordtype">double</span> *pos_d,
<a name="l01487"></a>01487                                       <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c, <span class="keywordtype">double</span> *force_d);
<a name="l01489"></a>01489     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOPDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;c, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;d);
<a name="l01501"></a>01501     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsionDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c, <span class="keywordtype">double</span> *pos_d,
<a name="l01502"></a>01502                                           <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c, <span class="keywordtype">double</span> *force_d);
<a name="l01504"></a>01504     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsionDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;c, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;d);
<a name="l01505"></a>01505 
<a name="l01511"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad88b7a26afc5f8b478e299a96d555f14">01511</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSubtract(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01512"></a>01512     {
<a name="l01513"></a>01513       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01514"></a>01514         result[c] = i[c] - j[c];
<a name="l01515"></a>01515     }
<a name="l01516"></a>01516 
<a name="l01517"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a19395cf2512e5b3af33f4ea603c18436">01517</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSubtract(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> i, <span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> j, <span class="keywordtype">double</span> *result)
<a name="l01518"></a>01518     {
<a name="l01519"></a>01519       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01520"></a>01520         result[c] = i[c] - j[c];
<a name="l01521"></a>01521     }
<a name="l01522"></a>01522 
<a name="l01528"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a34e901932f48c16a06929d7da9308b98">01528</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorAdd(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01529"></a>01529     {
<a name="l01530"></a>01530       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01531"></a>01531         result[c] = i[c] + j[c];
<a name="l01532"></a>01532     }
<a name="l01533"></a>01533 
<a name="l01539"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ac9d079c742232c33bc668f09135ab1a5">01539</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorDivide(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01540"></a>01540     {
<a name="l01541"></a>01541       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01542"></a>01542         result[c] = i[c] / n;
<a name="l01543"></a>01543     }
<a name="l01544"></a>01544 
<a name="l01550"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad3db6d00549c9448579509d878735ec0">01550</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorMultiply(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01551"></a>01551     {
<a name="l01552"></a>01552       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01553"></a>01553         result[c] = i[c] * n;
<a name="l01554"></a>01554     }
<a name="l01555"></a>01555 
<a name="l01556"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a33ebd98d01af8308d5b4f0cf0ef3b151">01556</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorMultiply(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> i, <span class="keyword">const</span> <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01557"></a>01557     {
<a name="l01558"></a>01558       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01559"></a>01559         result[c] = i[c] * n;
<a name="l01560"></a>01560     }
<a name="l01561"></a>01561 
<a name="l01566"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a2bd8889c439dd81f3492d409f27e80d4">01566</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSelfMultiply(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n)
<a name="l01567"></a>01567     {
<a name="l01568"></a>01568       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01569"></a>01569         i[c] *= n;
<a name="l01570"></a>01570     }
<a name="l01571"></a>01571 
<a name="l01575"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a09521bcec46ef53d75215305755a911d">01575</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorNormalize(<span class="keywordtype">double</span> *i)
<a name="l01576"></a>01576     {
<a name="l01577"></a>01577       <span class="keywordtype">double</span> length = VectorLength(i);
<a name="l01578"></a>01578       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01579"></a>01579         i[c] /= length;
<a name="l01580"></a>01580     }
<a name="l01581"></a>01581 
<a name="l01586"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a12db497d1100ca5a0620ba2076581a63">01586</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorCopy(<span class="keywordtype">double</span> *from, <span class="keywordtype">double</span> *to)
<a name="l01587"></a>01587     {
<a name="l01588"></a>01588       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01589"></a>01589         to[c] = from[c];
<a name="l01590"></a>01590     }
<a name="l01591"></a>01591 
<a name="l01596"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#afa91d516c7ab5c44d0443c15deb62910">01596</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorLength(<span class="keywordtype">double</span> *i)
<a name="l01597"></a>01597     {
<a name="l01598"></a>01598       <span class="keywordflow">return</span> sqrt( i[0]*i[0] + i[1]*i[1] + i[2]*i[2] );
<a name="l01599"></a>01599     }
<a name="l01600"></a>01600 
<a name="l01601"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a655c6950fb947600a4ffcbbf5f53fc18">01601</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDistance(<span class="keywordtype">double</span> *pos_i, <span class="keywordtype">double</span> *pos_j)
<a name="l01602"></a>01602     {
<a name="l01603"></a>01603       <span class="keywordtype">double</span> ij[3];
<a name="l01604"></a>01604       VectorSubtract(pos_i, pos_j, ij);
<a name="l01605"></a>01605       <span class="keyword">const</span> <span class="keywordtype">double</span> rij = VectorLength(ij);
<a name="l01606"></a>01606       <span class="keywordflow">return</span> rij;
<a name="l01607"></a>01607     }
<a name="l01608"></a>01608 
<a name="l01615"></a>01615     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngle(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k);
<a name="l01616"></a>01616 
<a name="l01624"></a>01624     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsion(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k, <span class="keywordtype">double</span> *l);
<a name="l01625"></a>01625 
<a name="l01633"></a>01633     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOP(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k, <span class="keywordtype">double</span> *l);
<a name="l01634"></a>01634 
<a name="l01638"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ae9651eef486a9afd00ef38c972df90f8">01638</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorClear(<span class="keywordtype">double</span> *i)
<a name="l01639"></a>01639     {
<a name="l01640"></a>01640       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01641"></a>01641         i[c] = 0.0;
<a name="l01642"></a>01642     }
<a name="l01643"></a>01643 
<a name="l01649"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a847a262329a92da08c099830a8431a48">01649</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDot(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j)
<a name="l01650"></a>01650     {
<a name="l01651"></a>01651       <span class="keywordtype">double</span> result = 0.0;
<a name="l01652"></a>01652       <span class="comment">// Written as a loop for vectorization</span>
<a name="l01653"></a>01653       <span class="comment">// Loop will be unrolled by compiler otherwise</span>
<a name="l01654"></a>01654       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01655"></a>01655         result += i[c]*j[c];
<a name="l01656"></a>01656       <span class="keywordflow">return</span> result;
<a name="l01657"></a>01657     }
<a name="l01658"></a>01658 
<a name="l01664"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a814fd94395b7e2dfe95d78c11eb2a004">01664</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorCross(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01665"></a>01665     {
<a name="l01666"></a>01666       result[0] =   i[1]*j[2] - i[2]*j[1];
<a name="l01667"></a>01667       result[1] = - i[0]*j[2] + i[2]*j[0];
<a name="l01668"></a>01668       result[2] =   i[0]*j[1] - i[1]*j[0];
<a name="l01669"></a>01669     }
<a name="l01670"></a>01670 
<a name="l01671"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a336e29059a710e30d98a0d9898a10c63">01671</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> PrintVector(<span class="keywordtype">double</span> *i)
<a name="l01672"></a>01672     {
<a name="l01673"></a>01673       std::cout &lt;&lt; <span class="stringliteral">&quot;&lt;&quot;</span> &lt;&lt; i[0] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; i[1] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; i[2] &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span> &lt;&lt; std::endl;
<a name="l01674"></a>01674     }
<a name="l01676"></a>01676 
<a name="l01677"></a>01677   }; <span class="comment">// class OBForceField</span>
<a name="l01678"></a>01678 
<a name="l01679"></a>01679 }<span class="comment">// namespace OpenBabel</span>
<a name="l01680"></a>01680 
<a name="l01681"></a>01681 <span class="preprocessor">#endif   // OB_FORCEFIELD_H</span>
<a name="l01682"></a>01682 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:06 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
