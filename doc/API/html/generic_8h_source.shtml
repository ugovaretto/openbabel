<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>generic.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">generic.h</div>  </div>
</div>
<div class="contents">
<a href="generic_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">generic.h - Handle generic data classes. Custom data for atoms, bonds, etc.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2010 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GENERIC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GENERIC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="spacegroup_8h.shtml" title="Handle Crystallographic Space Groups.">openbabel/math/spacegroup.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="obutil_8h.shtml" title="Various utility methods.">openbabel/obutil.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">// Forward declarations</span>
<a name="l00037"></a>00037   <span class="keyword">class </span>OBBase;
<a name="l00038"></a>00038   <span class="keyword">class </span>OBAtom;
<a name="l00039"></a>00039   <span class="keyword">class </span>OBBond;
<a name="l00040"></a>00040   <span class="keyword">class </span>OBMol;
<a name="l00041"></a>00041   <span class="keyword">class </span>OBRing;
<a name="l00042"></a>00042 
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml">00045</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00046"></a>00046   {
<a name="l00047"></a>00047   <span class="keyword">protected</span>:
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#abfcfad17c10b3bb5b39412d927518e43">00048</a>     std::string <a class="code" href="classOpenBabel_1_1OBCommentData.shtml#abfcfad17c10b3bb5b39412d927518e43">_data</a>;
<a name="l00049"></a>00049   <span class="keyword">public</span>:
<a name="l00050"></a>00050     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a>();
<a name="l00051"></a>00051     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a>&amp;);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#a67bda850335747e7ac5d66629bda0a67">00052</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBCommentData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a>(*<span class="keyword">this</span>);}
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)">OBCommentData</a> &amp;src);
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#a71ec30c014852fe90aed06daa76e378b">00056</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> std::string &amp;data)
<a name="l00057"></a>00057     { _data = data; <a class="code" href="namespaceOpenBabel.shtml#ae8d9d7dd615b5fa7b533c075fe744d8f" title="Remove leading and trailing whitespace from a string (docs in tokenst.cpp)">Trim</a>(_data); }
<a name="l00058"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#a0f90c3ff45f5d9a13c71f46dba0770e5">00058</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *d)
<a name="l00059"></a>00059     {_data = d; <a class="code" href="namespaceOpenBabel.shtml#ae8d9d7dd615b5fa7b533c075fe744d8f" title="Remove leading and trailing whitespace from a string (docs in tokenst.cpp)">Trim</a>(_data);     }
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#afb46b1b77157b78eba83c094204f96b2">00060</a>     <span class="keyword">const</span> std::string &amp;GetData()<span class="keyword">              const</span>
<a name="l00061"></a>00061 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#ac9527475c246fadbbab63a35376fd5fe">00062</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">              const</span>
<a name="l00063"></a>00063 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00064"></a>00064   };
<a name="l00065"></a>00065 
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml">00069</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments)">OBExternalBond</a>
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     <span class="keywordtype">int</span>     _idx;
<a name="l00072"></a>00072     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_atom;
<a name="l00073"></a>00073     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_bond;
<a name="l00074"></a>00074   <span class="keyword">public</span>:
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#aa3e2d107afd3e69aee9bf52b47d1444c">00075</a>   <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#aa3e2d107afd3e69aee9bf52b47d1444c">OBExternalBond</a>(): _idx(0), _atom(NULL), _bond(NULL) {}
<a name="l00076"></a>00076     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments)">OBExternalBond</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *,<span class="keywordtype">int</span>);
<a name="l00077"></a>00077     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments)">OBExternalBond</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments)">OBExternalBond</a> &amp;);
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a359543c25a72cf7a9ab33ab75b9b5f1e">00078</a>     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a359543c25a72cf7a9ab33ab75b9b5f1e">~OBExternalBond</a>()   {}
<a name="l00079"></a>00079 
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#ac8451eabbc164153f5030ae9723cf48b">00080</a>     <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#ac8451eabbc164153f5030ae9723cf48b">GetIdx</a>()<span class="keyword">  const    </span>{        <span class="keywordflow">return</span>(_idx);    }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a6bbee7efbeae405ba88ccb87b2f4c792">00081</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a6bbee7efbeae405ba88ccb87b2f4c792">GetAtom</a>()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_atom);   }
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a074123f2f8a5e90b5ce359af557e1805">00082</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *<a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a074123f2f8a5e90b5ce359af557e1805">GetBond</a>()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_bond);   }
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#ab994a975e39f5c62288f4f972b6f90c9">00083</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a>(<span class="keywordtype">int</span> idx)       {        _idx = idx;      }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a84cdb57aaf88aa0a94f4f4a1dd0f0252">00084</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a84cdb57aaf88aa0a94f4f4a1dd0f0252">SetAtom</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom) {        _atom = atom;    }
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a75c73979e73fb44e48424150fa0208c7">00085</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a75c73979e73fb44e48424150fa0208c7">SetBond</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) {        _bond = bond;    }
<a name="l00086"></a>00086   };
<a name="l00087"></a>00087 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml">00090</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml" title="Used to store information on external bonds (e.g., in SMILES fragments)">OBExternalBondData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00091"></a>00091   {
<a name="l00092"></a>00092   <span class="keyword">protected</span>:
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#a8b0c5550b7332d65d1c285004891cff2">00093</a>     std::vector&lt;OBExternalBond&gt; <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#a8b0c5550b7332d65d1c285004891cff2">_vexbnd</a>;
<a name="l00094"></a>00094   <span class="keyword">public</span>:
<a name="l00095"></a>00095     <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml" title="Used to store information on external bonds (e.g., in SMILES fragments)">OBExternalBondData</a>();
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="comment">//Copying is not used and too much work to set up</span>
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#a67bda850335747e7ac5d66629bda0a67">00098</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> NULL;}
<a name="l00099"></a>00099 
<a name="l00100"></a>00100     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*,<span class="keywordtype">int</span>);
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#a11f9065de21b2a826607337504954584">00101</a>     std::vector&lt;OBExternalBond&gt; *GetData()
<a name="l00102"></a>00102       {
<a name="l00103"></a>00103         <span class="keywordflow">return</span>(&amp;_vexbnd);
<a name="l00104"></a>00104       }
<a name="l00105"></a>00105   };
<a name="l00106"></a>00106 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml">00112</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00113"></a>00113   {
<a name="l00114"></a>00114   <span class="keyword">protected</span>:
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#a366a2531a9485fdfb2f6abbe528d99e1">00115</a>     std::string <a class="code" href="classOpenBabel_1_1OBPairData.shtml#a366a2531a9485fdfb2f6abbe528d99e1" title="The data for this key/value pair.">_value</a>; 
<a name="l00116"></a>00116   <span class="keyword">public</span>:
<a name="l00117"></a>00117     <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>();
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#a67bda850335747e7ac5d66629bda0a67">00118</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00119"></a>00119 <span class="keyword">      </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>(*<span class="keyword">this</span>);}
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#aef706f61b8b25bb7de414f46bbe317b3">00120</a>     <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBPairData.shtml#aef706f61b8b25bb7de414f46bbe317b3">SetValue</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *v)        {      _value = v;    }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#a36b6ff14e0bae8e56e4637ab727fc8cb">00121</a>     <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBPairData.shtml#a36b6ff14e0bae8e56e4637ab727fc8cb">SetValue</a>(<span class="keyword">const</span> std::string &amp;v) {      _value = v;    }
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#ac9527475c246fadbbab63a35376fd5fe">00122</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword"> const</span>
<a name="l00123"></a>00123 <span class="keyword">    </span>{      <span class="keywordflow">return</span>(_value);    }
<a name="l00124"></a>00124   };
<a name="l00125"></a>00125 
<a name="l00128"></a>00128   <span class="comment">// More detailed description in generic.cpp</span>
<a name="l00129"></a>00129   <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueT&gt;
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">00130</a>     <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00131"></a>00131   {
<a name="l00132"></a>00132   <span class="keyword">protected</span>:
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#a8e244c63178d867c1294ea6011dc73ff">00133</a>     ValueT <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#a8e244c63178d867c1294ea6011dc73ff" title="The data for this key/value pair.">_value</a>; 
<a name="l00134"></a>00134   <span class="keyword">public</span>:
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#abbe664b8fa3b004481772438aa0c1e8c">00135</a>   <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a>():
<a name="l00136"></a>00136     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;PairData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55baf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">PairData</a>) {};
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#a8525d460be3e43a8e605d854a2c9e246">00137</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#a8525d460be3e43a8e605d854a2c9e246">SetValue</a>(<span class="keyword">const</span> ValueT t)             { _value = t;     }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#ab23bca6040f6b5ef2e331a5210678c9f">00138</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> ValueT &amp;<a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#ab23bca6040f6b5ef2e331a5210678c9f">GetGenericValue</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_value); }
<a name="l00139"></a>00139   };
<a name="l00140"></a>00140 
<a name="l00142"></a><a class="code" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6">00142</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;int&gt;</a>     <a class="code" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6" title="Store arbitrary key/value integer data like OBPairData.">OBPairInteger</a>;
<a name="l00144"></a><a class="code" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087">00144</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;double&gt;</a>  <a class="code" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087" title="Store arbitrary key/value floating point data like OBPairData.">OBPairFloatingPoint</a>;
<a name="l00145"></a>00145 
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml">00149</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set of OBGenericData b...">OBSetData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00150"></a>00150   {
<a name="l00151"></a>00151   <span class="keyword">protected</span>:
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ae4896f79700c8d654fc8f7dcef4eb30a">00152</a>     std::vector&lt;OBGenericData *&gt; <a class="code" href="classOpenBabel_1_1OBSetData.shtml#ae4896f79700c8d654fc8f7dcef4eb30a">_vdata</a>;
<a name="l00153"></a>00153   <span class="keyword">public</span>:
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a1998d348b757cd3146c83750f00d8c8a">00154</a>   <a class="code" href="classOpenBabel_1_1OBSetData.shtml#a1998d348b757cd3146c83750f00d8c8a">OBSetData</a>() : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;SetData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>) {}
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a67bda850335747e7ac5d66629bda0a67">00155</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBSetData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set of OBGenericData b...">OBSetData</a>(*<span class="keyword">this</span>);}
<a name="l00156"></a>00156 
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a3e36d0e80af7574cee4f2240b8f372dd">00158</a>     <span class="keywordtype">void</span> AddData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *d)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160       <span class="keywordflow">if</span>(d)
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162           _vdata.push_back(d);
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a8ad9af74c60e6f57716910542f616ae5">00167</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(std::vector&lt;OBGenericData *&gt; &amp;vdata)
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169       _vdata = vdata;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a74418cc8cd2b2a72f8e1778b0cd58a48">00173</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00178"></a>00178         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00179"></a>00179           <span class="keywordflow">return</span>(*i);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181       <span class="keywordflow">return</span>(NULL);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ac1fc78db5080260be71f604ee5bbfcd2">00185</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *GetData(<span class="keyword">const</span> std::string &amp;s)
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00190"></a>00190         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00191"></a>00191           <span class="keywordflow">return</span>(*i);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193       <span class="keywordflow">return</span>(NULL);
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ae61a4b8009b2982994c629b61fbb4e23">00197</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::vector&lt;OBGenericData *&gt; &amp;GetData() const <span class="comment">//now virtual and const</span>
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">return</span>(_vdata);
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201 
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a2dd0afcc5538601c2a39a3b7871faff2">00203</a>     std::vector&lt;OBGenericData*&gt;::iterator GetBegin()
<a name="l00204"></a>00204       {
<a name="l00205"></a>00205         <span class="keywordflow">return</span> _vdata.begin();
<a name="l00206"></a>00206       }
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ae26106f464c8cb2959a7705a606f7da0">00209</a>     std::vector&lt;OBGenericData*&gt;::iterator GetEnd()
<a name="l00210"></a>00210       {
<a name="l00211"></a>00211         <span class="keywordflow">return</span> _vdata.end();
<a name="l00212"></a>00212       }
<a name="l00213"></a>00213 
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ace768b2c55b1d16a47b8fdcda84515ea">00215</a>     <span class="keywordtype">void</span> DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *gd)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00218"></a>00218       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00219"></a>00219         <span class="keywordflow">if</span> (*i == gd)
<a name="l00220"></a>00220           {
<a name="l00221"></a>00221             <span class="keyword">delete</span> *i;
<a name="l00222"></a>00222             _vdata.erase(i);
<a name="l00223"></a>00223             <span class="keywordflow">break</span>; <span class="comment">// Done, don&#39;t do anything more, since iterator is invalid</span>
<a name="l00224"></a>00224           }
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   }; <span class="comment">// OBSetData</span>
<a name="l00228"></a>00228 
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml">00232</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added to a molecule...">OBVirtualBond</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00233"></a>00233   {
<a name="l00234"></a>00234   <span class="keyword">protected</span>:
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aeb2c09a43f4c8b6256dbed5faf85d768">00235</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aeb2c09a43f4c8b6256dbed5faf85d768">_bgn</a>;
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#abb406f6b7d63af84fda76dbcdbac66c5">00236</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#abb406f6b7d63af84fda76dbcdbac66c5">_end</a>;
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#af7c67fda80d169e7af68407f88740499">00237</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#af7c67fda80d169e7af68407f88740499">_ord</a>;
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aa753c6ca5d794e055f8b4b590c6ba538">00238</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aa753c6ca5d794e055f8b4b590c6ba538">_stereo</a>;
<a name="l00239"></a>00239   <span class="keyword">public</span>:
<a name="l00240"></a>00240     <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added to a molecule...">OBVirtualBond</a>();
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a67bda850335747e7ac5d66629bda0a67">00241</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added to a molecule...">OBVirtualBond</a>(*<span class="keyword">this</span>);}
<a name="l00242"></a>00242     <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added to a molecule...">OBVirtualBond</a>(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> stereo=0);
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a064aa6b502655795918788af438b0208">00243</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a064aa6b502655795918788af438b0208">GetBgn</a>()    {      <span class="keywordflow">return</span>(_bgn);    }
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#afc186d85b94bae6548e433324215fff6">00244</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#afc186d85b94bae6548e433324215fff6">GetEnd</a>()    {      <span class="keywordflow">return</span>(_end);    }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aeaca5975b0354f81d10792199fee7d4d">00245</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#aeaca5975b0354f81d10792199fee7d4d">GetOrder</a>()  {      <span class="keywordflow">return</span>(_ord);    }
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a9695376d762d4fd2b12da6f51a99fb92">00246</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a9695376d762d4fd2b12da6f51a99fb92">GetStereo</a>() {      <span class="keywordflow">return</span>(_stereo); }
<a name="l00247"></a>00247   };
<a name="l00248"></a>00248 
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml">00251</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00252"></a>00252   {
<a name="l00253"></a>00253   <span class="keyword">protected</span>:
<a name="l00254"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a2da396a9610e4fd1218b885407375568">00254</a>     std::vector&lt;OBRing*&gt; <a class="code" href="classOpenBabel_1_1OBRingData.shtml#a2da396a9610e4fd1218b885407375568">_vr</a>;
<a name="l00255"></a>00255   <span class="keyword">public</span>:
<a name="l00256"></a>00256     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a>();
<a name="l00257"></a>00257     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a> &amp;);
<a name="l00258"></a>00258     <span class="comment">// When copying a molecule, don&#39;t copy the RingData. Why not? Well,</span>
<a name="l00259"></a>00259     <span class="comment">// if you do, you&#39;ll end up with two RingDatas because one will already</span>
<a name="l00260"></a>00260     <span class="comment">// exist due to Kekulize() in EndModify() in operator= in OBMol. Having</span>
<a name="l00261"></a>00261     <span class="comment">// more than one RingData causes problems as one of them can become invalid</span>
<a name="l00262"></a>00262     <span class="comment">// and cause segfaults.</span>
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a67bda850335747e7ac5d66629bda0a67">00263</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBRingData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> NULL;}
<a name="l00264"></a>00264     ~<a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a>();
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())">OBRingData</a> &amp;);
<a name="l00267"></a>00267 
<a name="l00268"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a45f2a0418d86a4d7f2e94f1c54e504ce">00268</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(std::vector&lt;OBRing*&gt; &amp;vr)
<a name="l00269"></a>00269     {
<a name="l00270"></a>00270       _vr = vr;
<a name="l00271"></a>00271     }
<a name="l00272"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a120222dc719c5f6a711770dce699535b">00272</a>     <span class="keywordtype">void</span> PushBack(<a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *r)
<a name="l00273"></a>00273     {
<a name="l00274"></a>00274       _vr.push_back(r);
<a name="l00275"></a>00275     }
<a name="l00276"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a45043bd4256fcf9d62e0cb45e024c466">00276</a>     std::vector&lt;OBRing*&gt; &amp;GetData()
<a name="l00277"></a>00277       {
<a name="l00278"></a>00278         <span class="keywordflow">return</span>(_vr);
<a name="l00279"></a>00279       }
<a name="l00280"></a>00280 
<a name="l00281"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#aa1a05257821a8156625beabb7dd58e0b">00281</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00282"></a>00282       { <span class="keywordflow">return</span>(_vr.begin()); }
<a name="l00283"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a07ad405727c652a6a280d821b9d1ac47">00283</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00284"></a>00284       { <span class="keywordflow">return</span>(_vr.end()); }
<a name="l00285"></a>00285     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *BeginRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00286"></a>00286     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *NextRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00287"></a>00287   };
<a name="l00288"></a>00288 
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml">00293</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00294"></a>00294   {
<a name="l00295"></a>00295   <span class="keyword">public</span>:
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a18f893264a00711081b62de694f99db4">00296</a>     <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> { <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a18f893264a00711081b62de694f99db4">Undefined</a>,
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a0c393259f8f62caf4a7d210327e9ecb7">00297</a>                        <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a0c393259f8f62caf4a7d210327e9ecb7">Triclinic</a>,
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a8dcb30922b1f64f0d749914bf32442ff">00298</a>                        <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a8dcb30922b1f64f0d749914bf32442ff">Monoclinic</a>,
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78ad6c2a31a4f6d88429ee1146228b5bbd8">00299</a>                        <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78ad6c2a31a4f6d88429ee1146228b5bbd8">Orthorhombic</a>,
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a3d2110f7a11f77ed4f87cbc954aeec21">00300</a>                        <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a3d2110f7a11f77ed4f87cbc954aeec21">Tetragonal</a>,
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a67f25c654b88f3bdcb76dd7a853f1296">00301</a>                        Rhombohedral ,
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78af6a3ca263243147ee2b534d1c757544b">00302</a>                        <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78af6a3ca263243147ee2b534d1c757544b">Hexagonal</a>,
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78a7105ea83819b1af6af85747e20b462b4">00303</a>                        Cubic};
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="keyword">protected</span>:
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a8d02fbc6c58e1abe5c8043f1253f6ab9">00307</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a8d02fbc6c58e1abe5c8043f1253f6ab9">_mOrtho</a>;<span class="comment">// Orthogonal matrix of column vectors</span>
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a2497d0bb15408f8670722631fd8d90b8">00308</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a2497d0bb15408f8670722631fd8d90b8">_mOrient</a>;<span class="comment">// Orientation matrix</span>
<a name="l00309"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a4e04f720581a30502f781e620fb56af6">00309</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a4e04f720581a30502f781e620fb56af6">_offset</a>;
<a name="l00310"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a2f7186c492d40a6b69092700ff8aee83">00310</a>     std::string <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a2f7186c492d40a6b69092700ff8aee83">_spaceGroupName</a>;
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a9c98685360a568cd4473b1931e2765d8">00311</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a9c98685360a568cd4473b1931e2765d8">_spaceGroup</a>;
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a474459fcdeb63c82700a345e59330645">00312</a>     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a474459fcdeb63c82700a345e59330645">_lattice</a>;
<a name="l00313"></a>00313   <span class="keyword">public</span>:
<a name="l00315"></a>00315     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a>();
<a name="l00316"></a>00316     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a> &amp;);
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a67bda850335747e7ac5d66629bda0a67">00317</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00318"></a>00318 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a>(*<span class="keyword">this</span>);}
<a name="l00319"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a29eaffe421897707aa12103bec99d3c9">00319</a>     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a29eaffe421897707aa12103bec99d3c9">~OBUnitCell</a>()    {}
<a name="l00320"></a>00320 
<a name="l00321"></a>00321     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from translation v...">OBUnitCell</a> &amp;);
<a name="l00322"></a>00322 
<a name="l00332"></a>00332     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> a, <span class="keyword">const</span> <span class="keywordtype">double</span> b, <span class="keyword">const</span> <span class="keywordtype">double</span> c,
<a name="l00333"></a>00333                  <span class="keyword">const</span> <span class="keywordtype">double</span> alpha, <span class="keyword">const</span> <span class="keywordtype">double</span> beta, <span class="keyword">const</span> <span class="keywordtype">double</span> gamma);
<a name="l00341"></a>00341     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v2, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v3);
<a name="l00342"></a>00342 
<a name="l00348"></a>00348     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> m);
<a name="l00349"></a>00349 
<a name="l00351"></a>00351     <span class="keywordtype">void</span> SetOffset(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1);
<a name="l00352"></a>00352 
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ac6f21a0fb4b93bb99f210559a1a6d7d7">00355</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ac6f21a0fb4b93bb99f210559a1a6d7d7">SetSpaceGroup</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* sg) { _spaceGroup = sg; }
<a name="l00356"></a>00356 
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a76ccdf2ccfbefae104ff52932dcf11c1">00360</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a76ccdf2ccfbefae104ff52932dcf11c1">SetSpaceGroup</a>(<span class="keyword">const</span> std::string sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a2787ce8a302b665bc4f059670f2e68ca">SpaceGroup::GetSpaceGroup</a> (sg);
<a name="l00361"></a>00361                                                _spaceGroupName = sg; }
<a name="l00362"></a>00362 
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae0d7e7ddcd3c5e3c48c6b24908d8404f">00368</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae0d7e7ddcd3c5e3c48c6b24908d8404f">SetSpaceGroup</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a2787ce8a302b665bc4f059670f2e68ca">SpaceGroup::GetSpaceGroup</a> (sg); }
<a name="l00369"></a>00369 
<a name="l00371"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a6516b3a121b34a94e19201da06104afa">00371</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a6516b3a121b34a94e19201da06104afa" title="Set the Bravais lattice type for this unit cell.">SetLatticeType</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> lt) { _lattice = lt; }
<a name="l00372"></a>00372 
<a name="l00375"></a>00375     <span class="keywordtype">void</span> FillUnitCell(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *);
<a name="l00376"></a>00376 
<a name="l00378"></a>00378     <span class="keywordtype">double</span> GetA();
<a name="l00380"></a>00380     <span class="keywordtype">double</span> GetB();
<a name="l00382"></a>00382     <span class="keywordtype">double</span> GetC();
<a name="l00384"></a>00384     <span class="keywordtype">double</span> GetAlpha();
<a name="l00386"></a>00386     <span class="keywordtype">double</span> GetBeta();
<a name="l00388"></a>00388     <span class="keywordtype">double</span> GetGamma();
<a name="l00390"></a>00390     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetOffset();
<a name="l00391"></a>00391 
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a81676bc2dbd807644f7d5acd1b1a2dc9">00393</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a81676bc2dbd807644f7d5acd1b1a2dc9">GetSpaceGroup</a>() { <span class="keywordflow">return</span>(_spaceGroup); }
<a name="l00394"></a>00394 
<a name="l00396"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a22dbea225bd03af66ef0db074cff402e">00396</a>     <span class="keyword">const</span> std::string <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a22dbea225bd03af66ef0db074cff402e">GetSpaceGroupName</a>() { <span class="keywordflow">return</span>(_spaceGroupName); }
<a name="l00397"></a>00397 
<a name="l00399"></a>00399     LatticeType GetLatticeType( <span class="keywordtype">int</span> spacegroup );
<a name="l00400"></a>00400 
<a name="l00402"></a>00402     LatticeType GetLatticeType();
<a name="l00403"></a>00403 
<a name="l00405"></a>00405     std::vector&lt;vector3&gt; GetCellVectors();
<a name="l00414"></a>00414     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a>   GetCellMatrix();
<a name="l00421"></a>00421     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetOrthoMatrix();
<a name="l00431"></a>00431     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetOrientationMatrix();
<a name="l00438"></a>00438     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetFractionalMatrix();
<a name="l00439"></a>00439 
<a name="l00446"></a>00446     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> FractionalToCartesian(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> frac);
<a name="l00453"></a>00453     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> CartesianToFractional(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> cart);
<a name="l00454"></a>00454 
<a name="l00458"></a>00458     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> WrapCartesianCoordinate(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> cart);
<a name="l00462"></a>00462     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> WrapFractionalCoordinate(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> frac);
<a name="l00463"></a>00463 
<a name="l00465"></a>00465     <span class="keywordtype">int</span> GetSpaceGroupNumber( std::string name = <span class="stringliteral">&quot;&quot;</span> );
<a name="l00467"></a>00467     <span class="keywordtype">double</span> GetCellVolume();
<a name="l00468"></a>00468   };
<a name="l00469"></a>00469 
<a name="l00475"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml">00475</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00476"></a>00476   {
<a name="l00477"></a>00477   <span class="keyword">protected</span>:
<a name="l00479"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a6c0b393e8fabed75f977c2ef2e9776b4">00479</a>     std::vector&lt;unsigned short&gt;              <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a6c0b393e8fabed75f977c2ef2e9776b4" title="Dimensionalities of conformers.">_vDimension</a>;
<a name="l00481"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ad069a68962fcc260bd3d4a1f4fc37fcb">00481</a>     std::vector&lt;double&gt;                      <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ad069a68962fcc260bd3d4a1f4fc37fcb" title="Relative energies of conformers (preferably in kJ/mol)">_vEnergies</a>;
<a name="l00483"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a89ef302474a75b75e95f99892462da96">00483</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a89ef302474a75b75e95f99892462da96" title="Atomic forces for each conformer.">_vForces</a>;
<a name="l00485"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ac6c0bfd74d984fed427c1ced49acef5a">00485</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ac6c0bfd74d984fed427c1ced49acef5a" title="Atomic velocities for each conformer (e.g., trajectories)">_vVelocity</a>;
<a name="l00487"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aaea44fb2ea8511661a37ff43c6df9149">00487</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aaea44fb2ea8511661a37ff43c6df9149" title="Atomic displacements for each conformer (e.g., RMS distances)">_vDisplace</a>;
<a name="l00489"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aff183e0156f477b106269c9524d8b4dd">00489</a>     std::vector&lt;std::string&gt;                 <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aff183e0156f477b106269c9524d8b4dd" title="Additional data (as strings)">_vData</a>;
<a name="l00490"></a>00490 
<a name="l00491"></a>00491   <span class="keyword">public</span>:
<a name="l00492"></a>00492     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>();
<a name="l00493"></a>00493     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;);
<a name="l00494"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a67bda850335747e7ac5d66629bda0a67">00494</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>(*<span class="keyword">this</span>);}
<a name="l00495"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a1e909f0c20e17b79ecc51ae05b57f78f">00495</a>     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a1e909f0c20e17b79ecc51ae05b57f78f">~OBConformerData</a>()    {}
<a name="l00496"></a>00496 
<a name="l00497"></a>00497     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;);
<a name="l00498"></a>00498 
<a name="l00499"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a98270b6a5c308d32731da6e0347604f8">00499</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a98270b6a5c308d32731da6e0347604f8">SetDimension</a>(std::vector&lt;unsigned short&gt; vd) { _vDimension = vd; }
<a name="l00500"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a83d2707a7d694d2dcbca91b52e537953">00500</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a83d2707a7d694d2dcbca91b52e537953">SetEnergies</a>(std::vector&lt;double&gt; ve) { _vEnergies = ve; }
<a name="l00501"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ae5e8b9cfa509d47b804cd62dabec4384">00501</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ae5e8b9cfa509d47b804cd62dabec4384">SetForces</a>(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf) {_vForces = vf;}
<a name="l00502"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a10e686c1334aab2838abd83f0e43c15d">00502</a>     <span class="keywordtype">void</span> SetVelocities(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)
<a name="l00503"></a>00503     { _vVelocity = vv; }
<a name="l00504"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a97fd4b5e51251d3647a1d8744f5fc178">00504</a>     <span class="keywordtype">void</span> SetDisplacements(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)
<a name="l00505"></a>00505     { _vDisplace = vd; }
<a name="l00506"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a6a42c8d13245d5d0c11476c56e6a6e33">00506</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a6a42c8d13245d5d0c11476c56e6a6e33">SetData</a>(std::vector&lt;std::string&gt; vdat) { _vData = vdat; }
<a name="l00507"></a>00507 
<a name="l00508"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a11ede097c372a7bca3ac9bbc8325aade">00508</a>     std::vector&lt;unsigned short&gt; <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a11ede097c372a7bca3ac9bbc8325aade">GetDimension</a>() { <span class="keywordflow">return</span> _vDimension; }
<a name="l00509"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a3d8b242eebd5ab58552d535f86bd1609">00509</a>     std::vector&lt;double&gt;         <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a3d8b242eebd5ab58552d535f86bd1609">GetEnergies</a>()  { <span class="keywordflow">return</span> _vEnergies; }
<a name="l00510"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ab47a820667f55e0899534778c414c21d">00510</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ab47a820667f55e0899534778c414c21d">GetForces</a>() {<span class="keywordflow">return</span> _vForces; }
<a name="l00511"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a045c32551393c9123ffcaaf64b68f8df">00511</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetVelocities()
<a name="l00512"></a>00512       {<span class="keywordflow">return</span> _vVelocity;}
<a name="l00513"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a0f4fc4a438c20ca17dc4164245723b61">00513</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetDisplacements()
<a name="l00514"></a>00514       {<span class="keywordflow">return</span> _vDisplace;}
<a name="l00515"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a10bc2a88336b4e3de55ce7112ad07811">00515</a>     std::vector&lt;std::string&gt;    <a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a10bc2a88336b4e3de55ce7112ad07811">GetData</a>() { <span class="keywordflow">return</span> _vData; }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517   };
<a name="l00518"></a>00518 
<a name="l00523"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml">00523</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00524"></a>00524   {
<a name="l00525"></a>00525   <span class="keyword">protected</span>:
<a name="l00526"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a472527c3649b76aaaa28597ba3f214dd">00526</a>     std::string <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a472527c3649b76aaaa28597ba3f214dd">_spaceGroup</a>;
<a name="l00527"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a4a2dc3eb5d3a544b8afe7507b7189fe9">00527</a>     std::string <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a4a2dc3eb5d3a544b8afe7507b7189fe9">_pointGroup</a>;
<a name="l00528"></a>00528   <span class="keyword">public</span>:
<a name="l00529"></a>00529     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>();
<a name="l00530"></a>00530     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;);
<a name="l00531"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a67bda850335747e7ac5d66629bda0a67">00531</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>(*<span class="keyword">this</span>);}
<a name="l00532"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aaf4df0ae2afcaf39df55df81e0a18a5a">00532</a>     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aaf4df0ae2afcaf39df55df81e0a18a5a">~OBSymmetryData</a>()    {}
<a name="l00533"></a>00533 
<a name="l00534"></a>00534     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;);
<a name="l00535"></a>00535 
<a name="l00536"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a2ceb8f352cca6f223aff43d41f4fb2f1">00536</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(std::string pg, std::string sg = <span class="stringliteral">&quot;&quot;</span>)
<a name="l00537"></a>00537     { _pointGroup = pg; _spaceGroup = sg; }
<a name="l00538"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a614446afd9dea92d4da7e8c8095aa107">00538</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a614446afd9dea92d4da7e8c8095aa107">SetPointGroup</a>(std::string pg) { _pointGroup = pg; }
<a name="l00539"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aef06d0d2bb4513684db4b052f487d45a">00539</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aef06d0d2bb4513684db4b052f487d45a">SetSpaceGroup</a>(std::string sg) { _spaceGroup = sg; }
<a name="l00540"></a>00540 
<a name="l00541"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aed0b54749bded9681b917dbbe6ce1800">00541</a>     std::string <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#aed0b54749bded9681b917dbbe6ce1800">GetPointGroup</a>() { <span class="keywordflow">return</span> _pointGroup; }
<a name="l00542"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a90903c2ee1d02cbf37d5162541691f4f">00542</a>     std::string <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a90903c2ee1d02cbf37d5162541691f4f">GetSpaceGroup</a>() { <span class="keywordflow">return</span> _spaceGroup; }
<a name="l00543"></a>00543   };
<a name="l00544"></a>00544 
<a name="l00548"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml">00548</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a>
<a name="l00549"></a>00549   {
<a name="l00550"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#ac59e55249c26b7453efa178aab836428">00550</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00551"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a7633b32d47d66ecdfb4f3db46e7e1422">00551</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>;
<a name="l00552"></a>00552 
<a name="l00553"></a>00553   <span class="keyword">protected</span>:
<a name="l00554"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa0d884087af9a4eac62349cdd16f0e52">00554</a>     std::pair&lt;OBAtom*,OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa0d884087af9a4eac62349cdd16f0e52">_bc</a>;
<a name="l00556"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#adae49ee49ed76ec2af6149f2a20f34bf">00556</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#adae49ee49ed76ec2af6149f2a20f34bf" title="double is angle in radians">_ads</a>;
<a name="l00557"></a>00557 
<a name="l00558"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#ab97992a9144899afd3b91c39dcc8e5e4">00558</a>     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#ab97992a9144899afd3b91c39dcc8e5e4">OBTorsion</a>(): _bc((<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *)NULL, (<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *)NULL)      {      }
<a name="l00559"></a>00559     <span class="comment">//protected for use only by friend classes</span>
<a name="l00560"></a>00560     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00561"></a>00561 
<a name="l00562"></a>00562     std::vector&lt;quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt; &gt; GetTorsions();
<a name="l00563"></a>00563 
<a name="l00564"></a>00564   <span class="keyword">public</span>:
<a name="l00565"></a>00565     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a> &amp;);
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a42a5dd5b1bb3906af399c66764589c23">00566</a>     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a42a5dd5b1bb3906af399c66764589c23">~OBTorsion</a>()      {}
<a name="l00567"></a>00567 
<a name="l00568"></a>00568     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a> &amp;);
<a name="l00569"></a>00569 
<a name="l00570"></a>00570     <span class="keywordtype">void</span> Clear();
<a name="l00571"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a31d1053aee208079bcc3c5e1884774df">00571</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a31d1053aee208079bcc3c5e1884774df">Empty</a>()    {      <span class="keywordflow">return</span>(_bc.first == 0 &amp;&amp; _bc.second == 0);    }
<a name="l00572"></a>00572 
<a name="l00573"></a>00573     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *d);
<a name="l00574"></a>00574     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="structOpenBabel_1_1quad.shtml" title="A 4-element templated, based on the design of the STL pair&lt;&gt;">quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00575"></a>00575 
<a name="l00576"></a>00576     <span class="keywordtype">bool</span> SetAngle(<span class="keywordtype">double</span> radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0);
<a name="l00577"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa2c22321e05df8c58066c30bef2cf927">00577</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa2c22321e05df8c58066c30bef2cf927">SetData</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> * <span class="comment">/*bond*/</span>) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00578"></a>00578 
<a name="l00579"></a>00579     <span class="keywordtype">bool</span> GetAngle(<span class="keywordtype">double</span> &amp;radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index =0);
<a name="l00582"></a>00582     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBondIdx();
<a name="l00583"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa28b8191c62589d996ac605c9cbe5829">00583</a>     <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml#aa28b8191c62589d996ac605c9cbe5829">GetSize</a>()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _ads.size();    }
<a name="l00584"></a>00584 
<a name="l00587"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a16b7e8677bd43d8292b1f0485e4d1d5e">00587</a>     std::pair&lt;OBAtom*,OBAtom*&gt;                  GetBC()
<a name="l00588"></a>00588       {
<a name="l00589"></a>00589         <span class="keywordflow">return</span>(_bc);
<a name="l00590"></a>00590       }
<a name="l00593"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a223305867f2593a05ebbc37bdc9bb674">00593</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; GetADs()
<a name="l00594"></a>00594     {
<a name="l00595"></a>00595       <span class="keywordflow">return</span>(_ads) ;
<a name="l00596"></a>00596     }
<a name="l00597"></a>00597 
<a name="l00598"></a>00598     <span class="keywordtype">bool</span> IsProtonRotor();
<a name="l00599"></a>00599   };
<a name="l00600"></a>00600 
<a name="l00605"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">00605</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00606"></a>00606   {
<a name="l00607"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#ac59e55249c26b7453efa178aab836428">00607</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00608"></a>00608 
<a name="l00609"></a>00609   <span class="keyword">protected</span>:
<a name="l00610"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#a8284d9e040299fd3ee667ad31e34a8d3">00610</a>     std::vector&lt;OBTorsion&gt; <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#a8284d9e040299fd3ee667ad31e34a8d3">_torsions</a>;
<a name="l00611"></a>00611 
<a name="l00612"></a>00612     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>();
<a name="l00613"></a>00613     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;);
<a name="l00614"></a>00614 
<a name="l00615"></a>00615   <span class="keyword">public</span>:
<a name="l00616"></a>00616     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;);
<a name="l00617"></a>00617 
<a name="l00619"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#a67bda850335747e7ac5d66629bda0a67">00619</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00620"></a>00620 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>(*<span class="keyword">this</span>);}
<a name="l00621"></a>00621 
<a name="l00622"></a>00622     <span class="keywordtype">void</span> Clear();
<a name="l00623"></a>00623 
<a name="l00626"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#a7549ccb8e6a424fb7e15367125a259c8">00626</a>     std::vector&lt;OBTorsion&gt; GetData()<span class="keyword"> const</span>
<a name="l00627"></a>00627 <span class="keyword">      </span>{
<a name="l00628"></a>00628         <span class="keywordflow">return</span> _torsions;
<a name="l00629"></a>00629       }
<a name="l00630"></a>00630 
<a name="l00633"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#aa28b8191c62589d996ac605c9cbe5829">00633</a>     <span class="keywordtype">size_t</span>      GetSize()<span class="keyword"> const</span>
<a name="l00634"></a>00634 <span class="keyword">    </span>{
<a name="l00635"></a>00635       <span class="keywordflow">return</span> _torsions.size();
<a name="l00636"></a>00636     }
<a name="l00637"></a>00637 
<a name="l00638"></a>00638     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around it...">OBTorsion</a> &amp;torsion);
<a name="l00639"></a>00639 
<a name="l00640"></a>00640     <span class="keywordtype">bool</span> FillTorsionArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;torsions);
<a name="l00641"></a>00641   };
<a name="l00642"></a>00642 
<a name="l00645"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml">00645</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>
<a name="l00646"></a>00646   {
<a name="l00647"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#ac59e55249c26b7453efa178aab836428">00647</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00648"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#ac2fadcaf6e1d7246db44fd04d90df423">00648</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>;
<a name="l00649"></a>00649 
<a name="l00650"></a>00650   <span class="keyword">protected</span>:
<a name="l00651"></a>00651 
<a name="l00652"></a>00652     <span class="comment">//member data</span>
<a name="l00653"></a>00653 
<a name="l00654"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#a6d6d58b7c653e7457ce0d0c2a907f9aa">00654</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                *<a class="code" href="classOpenBabel_1_1OBAngle.shtml#a6d6d58b7c653e7457ce0d0c2a907f9aa">_vertex</a>;
<a name="l00655"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#aed0a513f416c5140e604577971e1dd5c">00655</a>     std::pair&lt;OBAtom*,OBAtom*&gt;  <a class="code" href="classOpenBabel_1_1OBAngle.shtml#aed0a513f416c5140e604577971e1dd5c">_termini</a>;
<a name="l00656"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#a8ebc49284f65cb6d82c40fba0f9111b4">00656</a>     <span class="keywordtype">double</span>                  <a class="code" href="classOpenBabel_1_1OBAngle.shtml#a8ebc49284f65cb6d82c40fba0f9111b4">_radians</a>;
<a name="l00657"></a>00657 
<a name="l00658"></a>00658     <span class="comment">//protected member functions</span>
<a name="l00659"></a>00659 
<a name="l00660"></a>00660     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>();  <span class="comment">//protect constructor for use only by friend classes</span>
<a name="l00661"></a>00661     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00662"></a>00662 
<a name="l00663"></a>00663     <a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair&lt;&gt;">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> GetAtoms();
<a name="l00664"></a>00664     <span class="keywordtype">void</span> SortByIndex();
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   <span class="keyword">public</span>:
<a name="l00667"></a>00667 
<a name="l00668"></a>00668     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00669"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#a35e160e815b78f064cd07164bf5aebb2">00669</a>     ~<a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>()
<a name="l00670"></a>00670       {
<a name="l00671"></a>00671         _vertex = NULL;
<a name="l00672"></a>00672       }
<a name="l00673"></a>00673 
<a name="l00674"></a>00674     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;operator = (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00675"></a>00675     <span class="keywordtype">bool</span>     <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00676"></a>00676 
<a name="l00677"></a>00677     <span class="keywordtype">void</span>  Clear();
<a name="l00678"></a>00678 
<a name="l00681"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#abf68cf13cd458dac5db091a1f0bb7c9a">00681</a>     <span class="keywordtype">double</span> GetAngle()<span class="keyword"> const</span>
<a name="l00682"></a>00682 <span class="keyword">    </span>{
<a name="l00683"></a>00683       <span class="keywordflow">return</span>(_radians);
<a name="l00684"></a>00684     }
<a name="l00687"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#a55f96888e82a56edfa241a34f3271ae0">00687</a>     <span class="keywordtype">void</span>  SetAngle(<span class="keywordtype">double</span> angle)
<a name="l00688"></a>00688     {
<a name="l00689"></a>00689       _radians = angle;
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00692"></a>00692     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair&lt;&gt;">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   };
<a name="l00695"></a>00695 
<a name="l00698"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">00698</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00699"></a>00699   {
<a name="l00700"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#ac59e55249c26b7453efa178aab836428">00700</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00701"></a>00701 
<a name="l00702"></a>00702   <span class="keyword">protected</span>:
<a name="l00703"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#a259e7ee82fbf67240f0b058ce4293d2e">00703</a>     std::vector&lt;OBAngle&gt; <a class="code" href="classOpenBabel_1_1OBAngleData.shtml#a259e7ee82fbf67240f0b058ce4293d2e">_angles</a>;
<a name="l00704"></a>00704 
<a name="l00705"></a>00705     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>();
<a name="l00706"></a>00706     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;);
<a name="l00708"></a>00708 
<a name="l00709"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#a7bde4d88bd37538955958388da8ef107">00709</a>     std::vector&lt;OBAngle&gt; GetData()<span class="keyword"> const</span>
<a name="l00710"></a>00710 <span class="keyword">      </span>{
<a name="l00711"></a>00711         <span class="keywordflow">return</span>(_angles);
<a name="l00712"></a>00712       }
<a name="l00713"></a>00713 
<a name="l00714"></a>00714   <span class="keyword">public</span>:
<a name="l00715"></a>00715     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;operator =(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;);
<a name="l00716"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#a67bda850335747e7ac5d66629bda0a67">00716</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00717"></a>00717 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>(*<span class="keyword">this</span>);}
<a name="l00718"></a>00718 
<a name="l00719"></a>00719     <span class="keywordtype">void</span> Clear();
<a name="l00720"></a>00720     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> FillAngleArray(<span class="keywordtype">int</span> **angles, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;size);
<a name="l00721"></a>00721     <span class="keywordtype">bool</span> FillAngleArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;angles);
<a name="l00722"></a>00722 
<a name="l00723"></a>00723     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00726"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#aa28b8191c62589d996ac605c9cbe5829">00726</a>     <span class="keywordtype">size_t</span> GetSize()<span class="keyword"> const</span>
<a name="l00727"></a>00727 <span class="keyword">    </span>{
<a name="l00728"></a>00728       <span class="keywordflow">return</span> _angles.size();
<a name="l00729"></a>00729     }
<a name="l00730"></a>00730   };
<a name="l00731"></a>00731 
<a name="l00732"></a><a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">00732</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a>{
<a name="l00733"></a><a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">00733</a>     <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">output</a>,     
<a name="l00734"></a><a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">00734</a>     <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>,      
<a name="l00735"></a><a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810">00735</a>     <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810">calcvolume</a>  
<a name="l00736"></a>00736   }; <span class="comment">// sets which atom4ref is accessed by OBChiralData</span>
<a name="l00737"></a>00737 
<a name="l00741"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml">00741</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00742"></a>00742   {
<a name="l00743"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#ac59e55249c26b7453efa178aab836428">00743</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00744"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#ac0625d6c1f6b8002765c09a45d400c4d">00744</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>;
<a name="l00745"></a>00745 
<a name="l00746"></a>00746   <span class="keyword">protected</span>:
<a name="l00747"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a89411064df2cf2407f4a89f75a5ea618">00747</a>     std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a89411064df2cf2407f4a89f75a5ea618" title="input atom references">_atom4refs</a>; 
<a name="l00748"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a9886384fc77ff9471fc26cd16f822324">00748</a>     std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a9886384fc77ff9471fc26cd16f822324" title="output atom references">_atom4refo</a>; 
<a name="l00749"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a9f82047fe27246702be9b5032768ffb5">00749</a>     std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a9f82047fe27246702be9b5032768ffb5" title="calcvolume references">_atom4refc</a>; 
<a name="l00750"></a>00750 
<a name="l00753"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a22c1e0c27cee34369adf919eed3e3aac">00753</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a22c1e0c27cee34369adf919eed3e3aac">parity</a>;
<a name="l00754"></a>00754 
<a name="l00755"></a>00755   <span class="keyword">public</span>:
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>();
<a name="l00758"></a>00758     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;src);
<a name="l00759"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#a67bda850335747e7ac5d66629bda0a67">00759</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00760"></a>00760 <span class="keyword">      </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>(*<span class="keyword">this</span>); }
<a name="l00761"></a>00761     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;operator =(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;);
<a name="l00762"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#abc2d4b013efd6a8788da4a31489d28b9">00762</a>     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml#abc2d4b013efd6a8788da4a31489d28b9">~OBChiralData</a>(){}
<a name="l00763"></a>00763 
<a name="l00764"></a>00764     <span class="keywordtype">void</span> Clear();
<a name="l00765"></a>00765 
<a name="l00767"></a>00767     std::vector&lt;unsigned int&gt; GetAtom4Refs(<a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00769"></a>00769     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomRef(<span class="keywordtype">int</span> a,<a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00770"></a>00770 
<a name="l00771"></a>00771     <span class="keywordtype">bool</span> SetAtom4Refs(std::vector&lt;unsigned int&gt; atom4refs, <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00772"></a>00772     <span class="keywordtype">int</span> AddAtomRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomref, <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00773"></a>00773 
<a name="l00775"></a>00775     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize(<a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00776"></a>00776   };
<a name="l00777"></a>00777 
<a name="l00780"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">00780</a>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside a molecule...">OBSerialNums</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00781"></a>00781   {
<a name="l00782"></a>00782   <span class="keyword">protected</span>:
<a name="l00783"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423">00783</a>     std::map&lt;int, OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>; 
<a name="l00784"></a>00784 
<a name="l00785"></a>00785   <span class="keyword">public</span>:
<a name="l00786"></a>00786 
<a name="l00787"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ac133c97c2adaeacc4a476bb27bc24500">00787</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ac133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>() :
<a name="l00788"></a>00788     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;obSerialNums&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba4804a06df36aa971eb112ada03885b00" title="Residue serial numbers.">SerialNums</a>)
<a name="l00789"></a>00789       {}
<a name="l00790"></a>00790 
<a name="l00791"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a0b0be14ee04253bb90997df9884a94ca">00791</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ac133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside a molecule...">OBSerialNums</a> &amp;cp) : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(cp)
<a name="l00792"></a>00792     {
<a name="l00793"></a>00793       <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = cp.<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;
<a name="l00794"></a>00794     }
<a name="l00797"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a67bda850335747e7ac5d66629bda0a67">00797</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00798"></a>00798 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ac133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(*<span class="keyword">this</span>);}
<a name="l00799"></a>00799 
<a name="l00800"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a392c3230c9d3cca11b1e4d57bdd2ddfd">00800</a>     std::map&lt;int,OBAtom*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a392c3230c9d3cca11b1e4d57bdd2ddfd">GetData</a>()    { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;    }
<a name="l00801"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a97e7e04349f25820cb9f816f7c6a6cdd">00801</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a97e7e04349f25820cb9f816f7c6a6cdd">SetData</a>(std::map&lt;int,OBAtom*&gt; &amp;sm) { <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#a9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = sm;  }
<a name="l00802"></a>00802 
<a name="l00803"></a>00803   };
<a name="l00804"></a>00804 
<a name="l00807"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml">00807</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00808"></a>00808   {
<a name="l00809"></a>00809   <span class="keyword">protected</span>:
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a84619fd6eb56bada6e0c68c54798bde0">00811</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a84619fd6eb56bada6e0c68c54798bde0" title="Normal modes in 1/sqrt(a.u.)">_vLx</a>;
<a name="l00812"></a>00812 
<a name="l00814"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a443d61f7fd264880b7233b3d727a5828">00814</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a443d61f7fd264880b7233b3d727a5828" title="Harmonic frequencies in inverse centimeters.">_vFrequencies</a>;
<a name="l00815"></a>00815 
<a name="l00817"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ae7963c2698fd4975c7060b1c5438b272">00817</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ae7963c2698fd4975c7060b1c5438b272" title="Infrared absorption intensities in KM/Mole.">_vIntensities</a>;
<a name="l00818"></a>00818 
<a name="l00820"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ac0a11832241a5fc28ac860aa326ba3c7">00820</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ac0a11832241a5fc28ac860aa326ba3c7" title="Raman activities.">_vRamanActivities</a>;
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   <span class="keyword">public</span>:
<a name="l00823"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ad6eff9b28ddb91e20a4e4f1648e21f37">00823</a>     <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ad6eff9b28ddb91e20a4e4f1648e21f37">OBVibrationData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;VibrationData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55bab69829f7efb675ca0f6a4d8f245ceaf2" title="Vibrational modes, frequencies, etc.">VibrationData</a>){};
<a name="l00824"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ac935ab00b5625a4def7fbe6333ede664">00824</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ac935ab00b5625a4def7fbe6333ede664">~OBVibrationData</a>() {}
<a name="l00825"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a67bda850335747e7ac5d66629bda0a67">00825</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00826"></a>00826 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>(*<span class="keyword">this</span>);}
<a name="l00827"></a>00827 
<a name="l00828"></a>00828     <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a> &amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a> &amp;);
<a name="l00829"></a>00829 
<a name="l00830"></a>00830     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp; lx,
<a name="l00831"></a>00831                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; frequencies,
<a name="l00832"></a>00832                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; intensities);
<a name="l00833"></a>00833     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;,
<a name="l00834"></a>00834                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00835"></a>00835                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00836"></a>00836                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00837"></a>00837 
<a name="l00838"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a7d213a6f330db419aab9aa3f5dd62e48">00838</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetLx()<span class="keyword"> const</span>
<a name="l00839"></a>00839 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vLx; }
<a name="l00840"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a829a7ac41b51a00ec9179725aee9e60b">00840</a>     std::vector&lt;double&gt; GetFrequencies()<span class="keyword"> const</span>
<a name="l00841"></a>00841 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vFrequencies; }
<a name="l00842"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a4a87c0646df8384b5ef302f655f3da8d">00842</a>     std::vector&lt;double&gt; GetIntensities()<span class="keyword"> const</span>
<a name="l00843"></a>00843 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntensities; }
<a name="l00844"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#ab5870bb28e8cc16230454accf779f17c">00844</a>     std::vector&lt;double&gt; GetRamanActivities()<span class="keyword"> const</span>
<a name="l00845"></a>00845 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRamanActivities; }
<a name="l00846"></a>00846 
<a name="l00847"></a>00847     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumberOfFrequencies() <span class="keyword">const</span>;
<a name="l00848"></a>00848 };
<a name="l00849"></a>00849 
<a name="l00852"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml">00852</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBDOSData.shtml" title="Used to hold density of states information.">OBDOSData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00853"></a>00853   {
<a name="l00854"></a>00854   <span class="keyword">protected</span>:
<a name="l00856"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#abac522be53893f4e95ffe90e4423e9b7">00856</a>     <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#abac522be53893f4e95ffe90e4423e9b7" title="Fermi energy (eV) as shown in _vEnergies.">_fermi</a>;
<a name="l00857"></a>00857 
<a name="l00859"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#ad069a68962fcc260bd3d4a1f4fc37fcb">00859</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#ad069a68962fcc260bd3d4a1f4fc37fcb" title="Energy levels (eV)">_vEnergies</a>;
<a name="l00860"></a>00860 
<a name="l00862"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#af901a3a7668a1729466dd8fcfe3cae21">00862</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#af901a3a7668a1729466dd8fcfe3cae21" title="Density of corresponding energy level (number of states / unit cell)">_vDensities</a>;
<a name="l00863"></a>00863 
<a name="l00865"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a551c36cae879624b97356cf0aed85e5c">00865</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a551c36cae879624b97356cf0aed85e5c" title="Integrated DOS vector.">_vIntegration</a>;
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   <span class="keyword">public</span>:
<a name="l00868"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a8e1b6f674958d6a07abb778f4b7e203e">00868</a>     <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a8e1b6f674958d6a07abb778f4b7e203e">OBDOSData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;DOSData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55baad6691689525c8623b3c0d08d49c424a" title="Density of States data (fermi energy and energy vs. density data)">DOSData</a>){};
<a name="l00869"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a1ebcd47ca2ff7b5950607d0cdc10dd6f">00869</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a1ebcd47ca2ff7b5950607d0cdc10dd6f">~OBDOSData</a>() {}
<a name="l00870"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a67bda850335747e7ac5d66629bda0a67">00870</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00871"></a>00871 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBDOSData.shtml" title="Used to hold density of states information.">OBDOSData</a>(*<span class="keyword">this</span>);}
<a name="l00872"></a>00872 
<a name="l00873"></a>00873     <a class="code" href="classOpenBabel_1_1OBDOSData.shtml" title="Used to hold density of states information.">OBDOSData</a> &amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBDOSData.shtml" title="Used to hold density of states information.">OBDOSData</a> &amp;);
<a name="l00874"></a>00874 
<a name="l00875"></a>00875     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keywordtype">double</span>,
<a name="l00876"></a>00876                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00877"></a>00877                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00878"></a>00878                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00879"></a>00879 
<a name="l00880"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a3ab082434283098923245df6e0ca6d04">00880</a>     <span class="keywordtype">double</span> GetFermiEnergy()<span class="keyword"> const</span>
<a name="l00881"></a>00881 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_fermi; }
<a name="l00882"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a684864bf91d52a68d8c84f365d447d45">00882</a>     std::vector&lt;double&gt; GetEnergies()<span class="keyword"> const</span>
<a name="l00883"></a>00883 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vEnergies; }
<a name="l00884"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#a28972870c2b635802ad721156ec6f692">00884</a>     std::vector&lt;double&gt; GetDensities()<span class="keyword"> const</span>
<a name="l00885"></a>00885 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vDensities; }
<a name="l00886"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#aa85064106af2d5c69bce5722ec9a0a6e">00886</a>     std::vector&lt;double&gt; GetIntegration()<span class="keyword"> const</span>
<a name="l00887"></a>00887 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntegration; }
<a name="l00888"></a>00888   };
<a name="l00889"></a>00889 
<a name="l00893"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml">00893</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBOrbital.shtml" title="Used to store energy, occupation, and orbital symmetry of a particular orbital.">OBOrbital</a>
<a name="l00894"></a>00894   {
<a name="l00895"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#a28f7444cea7d79c814b94579da41f1e3">00895</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a>;
<a name="l00896"></a>00896   <span class="keyword">protected</span>:
<a name="l00897"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#ad93165c379393f8eb17506f1f9820a1a">00897</a>     <span class="keywordtype">double</span>       <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#ad93165c379393f8eb17506f1f9820a1a" title="in electron volts">_energy</a>;         
<a name="l00898"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#abece6e2fb39058fe60114864abdfc592">00898</a>     <span class="keywordtype">double</span>       <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#abece6e2fb39058fe60114864abdfc592" title="usually 0, 1, or 2, but can be fractional (e.g., solid-state calcs)">_occupation</a>;     
<a name="l00899"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#abc035539018329c68382babb1648e1e3">00899</a>     std::string  <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#abc035539018329c68382babb1648e1e3" title="symmetry designation">_mullikenSymbol</a>; 
<a name="l00900"></a>00900   <span class="keyword">public</span>:
<a name="l00901"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#afd66805019461ffb95634bf0e79dc992">00901</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keywordtype">double</span> energy, <span class="keywordtype">double</span> occupation = 2.0, std::string symbol = <span class="stringliteral">&quot;A&quot;</span>)
<a name="l00902"></a>00902     { _energy = energy; _occupation = occupation; _mullikenSymbol = symbol; }
<a name="l00903"></a>00903 
<a name="l00904"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#a898054d3301668a37b4d7c3612487157">00904</a>     <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#a898054d3301668a37b4d7c3612487157">GetEnergy</a>()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _energy; }
<a name="l00905"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#af1dcd8e10f31fbc0da62fe2e70530fd3">00905</a>     <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#af1dcd8e10f31fbc0da62fe2e70530fd3">GetOccupation</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _occupation; }
<a name="l00906"></a><a class="code" href="classOpenBabel_1_1OBOrbital.shtml#a6aced7401d9f61ea7a921564ddcf3f5d">00906</a>     std::string <a class="code" href="classOpenBabel_1_1OBOrbital.shtml#a6aced7401d9f61ea7a921564ddcf3f5d">GetSymbol</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _mullikenSymbol; }
<a name="l00907"></a>00907   };
<a name="l00908"></a>00908 
<a name="l00911"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml">00911</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00912"></a>00912   {
<a name="l00913"></a>00913   <span class="keyword">public</span>:
<a name="l00914"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#afd15b15b68d5511ac566e95c537883e7">00914</a>     <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;OrbitalData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba88ee5a5e80dd4e9523761d17ba9b81f2" title="Electronic levels, redox states, orbitals, etc.">ElectronicData</a>),
<a name="l00915"></a>00915       _alphaHOMO(0), _betaHOMO(0), _openShell(false) {};
<a name="l00916"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#ab152b3389d8c96e2ac4174ce5932499a">00916</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#ab152b3389d8c96e2ac4174ce5932499a">~OBOrbitalData</a>() {}
<a name="l00917"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a67bda850335747e7ac5d66629bda0a67">00917</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00918"></a>00918 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a>(*<span class="keyword">this</span>);}
<a name="l00919"></a>00919 
<a name="l00920"></a>00920     <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a> &amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml" title="Used to hold information about orbital energies.">OBOrbitalData</a> &amp;);
<a name="l00921"></a>00921 
<a name="l00922"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a1aa001a5bb0835aecf6ac01d3097e5ac">00922</a>     <span class="keywordtype">void</span> SetAlphaOrbitals(std::vector&lt;OBOrbital&gt; orbitalList)
<a name="l00923"></a>00923     { _alphaOrbitals = orbitalList; }
<a name="l00924"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#af50fed67352599bfd2adcc8a49c8e6f9">00924</a>     <span class="keywordtype">void</span> SetBetaOrbitals(std::vector&lt;OBOrbital&gt; orbitalList)
<a name="l00925"></a>00925     { _betaOrbitals = orbitalList; }
<a name="l00926"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#adaea5fe04cd5876e6f2f8479fd6dc726">00926</a>     <span class="keywordtype">void</span> SetHOMO(<span class="keywordtype">int</span> alpha, <span class="keywordtype">int</span> beta = 0)
<a name="l00927"></a>00927     { _alphaHOMO = alpha; _betaHOMO = beta; }
<a name="l00928"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a59b26af6c838614c16d75c8246612698">00928</a>     <span class="keywordtype">void</span> SetOpenShell(<span class="keywordtype">bool</span> openShell)
<a name="l00929"></a>00929     { _openShell = openShell; }
<a name="l00930"></a>00930 
<a name="l00931"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a7b32d28d61b3149a4a5b1051d86918b0">00931</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a7b32d28d61b3149a4a5b1051d86918b0">IsOpenShell</a>() { <span class="keywordflow">return</span> _openShell; }
<a name="l00932"></a>00932 
<a name="l00933"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a1243d416863fddeed1c5ba20d7c7a419">00933</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a1243d416863fddeed1c5ba20d7c7a419">GetAlphaHOMO</a>() { <span class="keywordflow">return</span> _alphaHOMO; }
<a name="l00934"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#adb5679cd09bed805338a74cc79b9b370">00934</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#adb5679cd09bed805338a74cc79b9b370">GetBetaHOMO</a>() { <span class="keywordflow">return</span> _betaHOMO; }
<a name="l00935"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a82a690605d1d541a30d7ca1bd8e902be">00935</a>     std::vector&lt;OBOrbital&gt; <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a82a690605d1d541a30d7ca1bd8e902be">GetAlphaOrbitals</a>() { <span class="keywordflow">return</span> _alphaOrbitals; }
<a name="l00936"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a14c67483d74fb40365254f84296d7cc7">00936</a>     std::vector&lt;OBOrbital&gt; <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a14c67483d74fb40365254f84296d7cc7">GetBetaOrbitals</a>() { <span class="keywordflow">return</span> _betaOrbitals; }
<a name="l00937"></a>00937 
<a name="l00940"></a>00940     <span class="keywordtype">void</span> LoadClosedShellOrbitals(std::vector&lt;double&gt; energies, std::vector&lt;std::string&gt; symmetries, <span class="keywordtype">int</span> alphaHOMO);
<a name="l00942"></a>00942     <span class="keywordtype">void</span> LoadAlphaOrbitals(std::vector&lt;double&gt; energies, std::vector&lt;std::string&gt; symmetries, <span class="keywordtype">int</span> alphaHOMO);
<a name="l00944"></a>00944     <span class="keywordtype">void</span> LoadBetaOrbitals(std::vector&lt;double&gt; energies, std::vector&lt;std::string&gt; symmetries, <span class="keywordtype">int</span> betaHOMO);
<a name="l00945"></a>00945 
<a name="l00946"></a>00946   <span class="keyword">protected</span>:
<a name="l00947"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a6edf786e96b35505ffe9150905f5f06a">00947</a>     std::vector&lt;OBOrbital&gt; <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a6edf786e96b35505ffe9150905f5f06a" title="List of orbitals. In case of unrestricted calculations, this contains the alpha spin-orbitals.">_alphaOrbitals</a>; 
<a name="l00948"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a91a7e06b86e18fd65689b1da2cdf193f">00948</a>     std::vector&lt;OBOrbital&gt; <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a91a7e06b86e18fd65689b1da2cdf193f" title="Only used if needed (e.g., unrestricted calculations)">_betaOrbitals</a>;  
<a name="l00949"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#aeec65125d586ace9d5764cc437b6e33d">00949</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#aeec65125d586ace9d5764cc437b6e33d" title="Highest occupied molecular orbital for _alphaOrbitals.">_alphaHOMO</a>;               
<a name="l00950"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a71b85b5ab742b2176819410e877ca1d8">00950</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#a71b85b5ab742b2176819410e877ca1d8" title="Highest occupied for _betaOrbitals (if needed)">_betaHOMO</a>;                
<a name="l00951"></a><a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#afba45991614dc0f33e799a2c8760b9bd">00951</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBOrbitalData.shtml#afba45991614dc0f33e799a2c8760b9bd" title="Whether we store both alpha and beta spin-orbitals (i.e., a restricted open-shell or unrestricted cal...">_openShell</a>;                       
<a name="l00952"></a>00952   };
<a name="l00953"></a>00953 
<a name="l00956"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml">00956</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml" title="Used to hold information about electronic transitions.">OBElectronicTransitionData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00957"></a>00957   {
<a name="l00958"></a>00958   <span class="keyword">protected</span>:
<a name="l00960"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a523167939ae7b279d2af900ef53ac0d9">00960</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a523167939ae7b279d2af900ef53ac0d9" title="Wavelengths (nm)">_vWavelengths</a>;
<a name="l00961"></a>00961 
<a name="l00963"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#af300a4b44a417f4999c4378522e10d18">00963</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#af300a4b44a417f4999c4378522e10d18" title="Oscillator strengths.">_vForces</a>;
<a name="l00964"></a>00964 
<a name="l00966"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a94998f1366e53e7430a50209b05424ed">00966</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a94998f1366e53e7430a50209b05424ed" title="Electric dipole strengths.">_vEDipole</a>;
<a name="l00967"></a>00967 
<a name="l00969"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#ac555eb9ba9de86341d5a4a0c5a22f098">00969</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#ac555eb9ba9de86341d5a4a0c5a22f098" title="Rotatory strengths (velocity)">_vRotatoryStrengthsVelocity</a>;
<a name="l00970"></a>00970 
<a name="l00972"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a35e7c9407fefcda3910c6fc7e06e9f73">00972</a>     std::vector&lt;double&gt;  <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a35e7c9407fefcda3910c6fc7e06e9f73" title="Rotatory strengths (length)">_vRotatoryStrengthsLength</a>;
<a name="l00973"></a>00973 
<a name="l00974"></a>00974   <span class="keyword">public</span>:
<a name="l00975"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#afd34955993e8fa4ca5f54512c75ae2f6">00975</a>     <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#afd34955993e8fa4ca5f54512c75ae2f6">OBElectronicTransitionData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;ElectronicTransitionData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55baeb82edb7e1b51246c53e0dd7248365a8" title="Electronic transition data (e.g., UV/Vis, excitation energies, etc.)">ElectronicTransitionData</a>) {}
<a name="l00976"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a380b3a6c5dbb324cbae959d34e9c004e">00976</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a380b3a6c5dbb324cbae959d34e9c004e">~OBElectronicTransitionData</a>() {}
<a name="l00977"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a67bda850335747e7ac5d66629bda0a67">00977</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00978"></a>00978 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml" title="Used to hold information about electronic transitions.">OBElectronicTransitionData</a>(*<span class="keyword">this</span>);}
<a name="l00979"></a>00979 
<a name="l00980"></a>00980     <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml" title="Used to hold information about electronic transitions.">OBElectronicTransitionData</a> &amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml" title="Used to hold information about electronic transitions.">OBElectronicTransitionData</a> &amp;);
<a name="l00981"></a>00981 
<a name="l00982"></a>00982     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keyword">const</span> std::vector&lt;double&gt; &amp; wavelengths,
<a name="l00983"></a>00983                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; forces);
<a name="l00984"></a>00984 
<a name="l00985"></a>00985     <span class="keywordtype">void</span> SetEDipole(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00986"></a>00986     <span class="keywordtype">void</span> SetRotatoryStrengthsVelocity(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00987"></a>00987     <span class="keywordtype">void</span> SetRotatoryStrengthsLength(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00988"></a>00988 
<a name="l00989"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a1d19ba0a0f3a16ad1d524b6a539b9dd8">00989</a>     std::vector&lt;double&gt; GetWavelengths()<span class="keyword"> const</span>
<a name="l00990"></a>00990 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vWavelengths; }
<a name="l00991"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a5ed3850c75fad7423e018502095843dd">00991</a>     std::vector&lt;double&gt; GetForces()<span class="keyword"> const</span>
<a name="l00992"></a>00992 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vForces; }
<a name="l00993"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#ad9a4401f2b4a5910b723fbdbb771993d">00993</a>     std::vector&lt;double&gt; GetEDipole()<span class="keyword"> const</span>
<a name="l00994"></a>00994 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vEDipole; }
<a name="l00995"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#ad322e425e935a5c7989ea6716ed28d0a">00995</a>     std::vector&lt;double&gt; GetRotatoryStrengthsVelocity()<span class="keyword"> const</span>
<a name="l00996"></a>00996 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRotatoryStrengthsVelocity; }
<a name="l00997"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a62d2c288f077f4b95cfda415e164f14d">00997</a>     std::vector&lt;double&gt; GetRotatoryStrengthsLength()<span class="keyword"> const</span>
<a name="l00998"></a>00998 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRotatoryStrengthsLength; }
<a name="l00999"></a>00999 };
<a name="l01000"></a>01000 
<a name="l01003"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml">01003</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l01004"></a>01004  {
<a name="l01005"></a>01005  <span class="keyword">public</span>:
<a name="l01006"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09a6ce26a62afab55d7606ad4e92428b30c">01006</a>    <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09">RType</a>{<a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09a6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>, ASYMMETRIC, SYMMETRIC, LINEAR};
<a name="l01007"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#af55b99b7ce56986ce4421f598bb7b1d7">01007</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#af55b99b7ce56986ce4421f598bb7b1d7">OBRotationData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;RotationData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55bab7c011beb81d9ba86035c1c0b7609899" title="Rotational energy information.">RotationData</a>){}
<a name="l01008"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a519e86e5760ce996627dcf4fe5efab66">01008</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a519e86e5760ce996627dcf4fe5efab66">~OBRotationData</a>(){};
<a name="l01009"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a67bda850335747e7ac5d66629bda0a67">01009</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l01010"></a>01010 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>(*<span class="keyword">this</span>);}
<a name="l01011"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#aa0e40eaa96ec46f0513b48fce93b7b76">01011</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09">RType</a> RotorType, std::vector&lt;double&gt; RotationalConstants, <span class="keywordtype">int</span> SymmetryNumber)
<a name="l01012"></a>01012    {
<a name="l01013"></a>01013      RotConsts = RotationalConstants;
<a name="l01014"></a>01014      type = RotorType;
<a name="l01015"></a>01015      SymNum = SymmetryNumber;
<a name="l01016"></a>01016    }
<a name="l01017"></a>01017 
<a name="l01019"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a6f70037b26d7b9467c1a58de1c387d94">01019</a>    std::vector&lt;double&gt; <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a6f70037b26d7b9467c1a58de1c387d94">GetRotConsts</a>()<span class="keyword">const</span>{ <span class="keywordflow">return</span> RotConsts; }
<a name="l01020"></a>01020 
<a name="l01021"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a9ac59b320ed168e96f32234acd79b42a">01021</a>    <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a9ac59b320ed168e96f32234acd79b42a">GetSymmetryNumber</a>()<span class="keyword">const</span>{ <span class="keywordflow">return</span> SymNum; }
<a name="l01022"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a3eb540bec04a80b875079e7d0b982ec9">01022</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09">RType</a> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a3eb540bec04a80b875079e7d0b982ec9">GetRotorType</a>()<span class="keyword">const   </span>{ <span class="keywordflow">return</span> type; }
<a name="l01023"></a>01023 
<a name="l01024"></a>01024  <span class="keyword">protected</span>:
<a name="l01025"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a158f9d92716703712f00b3b041adc3cc">01025</a>    std::vector&lt;double&gt; <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a158f9d92716703712f00b3b041adc3cc" title="Rotational constants in GHz.">RotConsts</a>;
<a name="l01026"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a59b5e4d007a23da401e33d9f5eea2664">01026</a>    <span class="keywordtype">int</span>                 <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a59b5e4d007a23da401e33d9f5eea2664" title="Rotational Symmetry Number.">SymNum</a>;   
<a name="l01027"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a90ab08fd1dc96f17cf3562d8afeb60c0">01027</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#afda39669e25831ec186e17cb437dba09">RType</a>               <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a90ab08fd1dc96f17cf3562d8afeb60c0" title="linear, symmetric or asymmetric top">type</a>;     
<a name="l01028"></a>01028  };
<a name="l01029"></a>01029 
<a name="l01033"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml">01033</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment)">OBVectorData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l01034"></a>01034  {
<a name="l01035"></a>01035  <span class="keyword">public</span>:
<a name="l01036"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a7ebf015db0f2457d856d0eb688769d41">01036</a>    <a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a7ebf015db0f2457d856d0eb688769d41">OBVectorData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;VectorData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba46bb764382af04b5c32d3370e6b677f9" title="Vector Data (i.e., one vector like a dipole moment)">VectorData</a>){}
<a name="l01037"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a9bdbefcdfbd801132866f1e77ba70aae">01037</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a9bdbefcdfbd801132866f1e77ba70aae">~OBVectorData</a>(){};
<a name="l01038"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a67bda850335747e7ac5d66629bda0a67">01038</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l01039"></a>01039 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment)">OBVectorData</a>(*<span class="keyword">this</span>);}
<a name="l01040"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a7c9f75965bfdc8bd1debc7fba3797a65">01040</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l01041"></a>01041      { _vec = <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(x, y, z); }
<a name="l01042"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a146acce5019a84cc73f48a23e39b8e6e">01042</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> data)
<a name="l01043"></a>01043      { _vec = data; }
<a name="l01044"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#ab34f0d01cda028329486ce4814cdc966">01044</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetData()<span class="keyword"> const</span>
<a name="l01045"></a>01045 <span class="keyword">     </span>{ <span class="keywordflow">return</span> _vec; }
<a name="l01046"></a>01046 
<a name="l01047"></a>01047  <span class="keyword">protected</span>:
<a name="l01048"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a0acc44e4b0579d4cd684edfc4f5a4007">01048</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>            <a class="code" href="classOpenBabel_1_1OBVectorData.shtml#a0acc44e4b0579d4cd684edfc4f5a4007" title="3D vector to be stored">_vec</a>; 
<a name="l01049"></a>01049  };
<a name="l01050"></a>01050 
<a name="l01054"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml">01054</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment)">OBMatrixData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l01055"></a>01055   {
<a name="l01056"></a>01056   <span class="keyword">public</span>:
<a name="l01057"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#a15f02a1883eb12f6980b542c40f26810">01057</a>     <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#a15f02a1883eb12f6980b542c40f26810">OBMatrixData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;MatrixData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba8239a3bb53f99dfa7da4734d77733abe" title="Matrix data (i.e., a 3x3 matrix like a rotation or quadrupole moment)">MatrixData</a>){}
<a name="l01058"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#abeefc08263da22a794ddf7a594a7e82a">01058</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#abeefc08263da22a794ddf7a594a7e82a">~OBMatrixData</a>(){};
<a name="l01059"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#a67bda850335747e7ac5d66629bda0a67">01059</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l01060"></a>01060 <span class="keyword">          </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment)">OBMatrixData</a>(*<span class="keyword">this</span>);}
<a name="l01061"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#a9d238447321132fcc9109b7a1b39b480">01061</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData)">SetData</a>(<a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> data)
<a name="l01062"></a>01062       { _matrix = data; }
<a name="l01063"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#a65834d48498fcf653d89ed45680d9917">01063</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetData()<span class="keyword"> const</span>
<a name="l01064"></a>01064 <span class="keyword">      </span>{ <span class="keywordflow">return</span> _matrix; }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066   <span class="keyword">protected</span>:
<a name="l01067"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#ae664fb7cf64216e4b362cd4e48b018f5">01067</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a>            <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#ae664fb7cf64216e4b362cd4e48b018f5" title="3x3 matrix to be stored">_matrix</a>; 
<a name="l01068"></a>01068   };
<a name="l01069"></a>01069 
<a name="l01071"></a>01071   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase)">OBDataIterator</a>;
<a name="l01072"></a>01072 
<a name="l01073"></a>01073 } <span class="comment">//end namespace OpenBabel</span>
<a name="l01074"></a>01074 
<a name="l01075"></a>01075 <span class="preprocessor">#endif // OB_GENERIC_H</span>
<a name="l01076"></a>01076 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:06 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
