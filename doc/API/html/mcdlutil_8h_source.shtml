<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>mcdlutil.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">mcdlutil.h</div>  </div>
</div>
<div class="contents">
<a href="mcdlutil_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*-*-C++-*-</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">**********************************************************************</span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007,2008 by Sergei V. Trepalin sergey_trepalin@chemical-block.com</span>
<a name="l00005"></a>00005 <span class="comment">Copyright (C) 2007,2008 by Andrei Gakh andrei.gakh@nnsa.doe.gov</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 <span class="comment">/*</span>
<a name="l00021"></a>00021 <span class="comment">  Diagram is generated using templates, which are stored in SD file templates.sdf</span>
<a name="l00022"></a>00022 <span class="comment">  The SD file is usual SD file, which contain chemical structures and might contain data.</span>
<a name="l00023"></a>00023 <span class="comment">  Only chemical structures are used. Subgraph isomorphisme search is executed and coordinates</span>
<a name="l00024"></a>00024 <span class="comment">  of atoms are determined from templates. See Molecules, 11, 129-141 (2006) for algorithm decription.</span>
<a name="l00025"></a>00025 <span class="comment">  Structures in SD file are converted in next manner:</span>
<a name="l00026"></a>00026 <span class="comment">  1. All atoms, except explicit hydrogens, are replaced with generic ANY_ATOM (matched with any atom in subgraph isomorphisme search)</span>
<a name="l00027"></a>00027 <span class="comment">  2. All bonds are replaces with generic ANY_BOND, which can be matched with any bond in molecule</span>
<a name="l00028"></a>00028 <span class="comment">  3. All hydrogen are removed, but they are used for search-query and structure atom matching is believed fo be</span>
<a name="l00029"></a>00029 <span class="comment">     sucessfukk if chemical structure contains more or equal number of hydrogens, than query. Using explicitly-defined hydrogens</span>
<a name="l00030"></a>00030 <span class="comment">         on query enables ones to remove substitutors attachment for atom, which are sterically hidden on templates</span>
<a name="l00031"></a>00031 <span class="comment">  if the file will not be found, predefined templates will be used</span>
<a name="l00032"></a>00032 <span class="comment">*/</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>OpenBabel {
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="comment">//common constants</span>
<a name="l00038"></a><a class="code" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">00038</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a>=300;
<a name="l00039"></a><a class="code" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">00039</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">MAXFRAGS</a>=200;
<a name="l00040"></a><a class="code" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">00040</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">MAXCHARS</a>=1000;
<a name="l00041"></a><a class="code" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">00041</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a>=10;
<a name="l00042"></a><a class="code" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">00042</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">NELEMMAX</a>=120;
<a name="l00043"></a><a class="code" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">00043</a> <span class="preprocessor">  #define NELEMMCDL 121</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045   <span class="comment">// Return valency by hydrogen for given atomic position in the Periodic Table</span>
<a name="l00046"></a>00046   OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>(<span class="keywordtype">int</span> na);
<a name="l00047"></a>00047   OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a>(<span class="keywordtype">int</span> na);
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="comment">//Alternate overloaded methods</span>
<a name="l00050"></a>00050   OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a54363eb76ba264ec754bece9848198c8">alternate</a>(OBMol * pmol, <span class="keyword">const</span> <span class="keywordtype">int</span> nH[], <span class="keywordtype">int</span> bondOrders []);  <span class="comment">//This method does not work!</span>
<a name="l00051"></a>00051   <span class="comment">//Zero-based atomic numeration should be in connection matrix arrays iA1 and iA2-so first atom has indez zero</span>
<a name="l00052"></a>00052   OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a54363eb76ba264ec754bece9848198c8">alternate</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPosition,<span class="keyword">const</span> std::vector&lt;int&gt; aCharge,
<a name="l00053"></a>00053       <span class="keyword">const</span> std::vector&lt;int&gt; aRad,<span class="keyword">const</span> std::vector&lt;int&gt; nHydr, <span class="keyword">const</span> std::vector&lt;int&gt; iA1,
<a name="l00054"></a>00054       <span class="keyword">const</span> std::vector&lt;int&gt; iA2, std::vector&lt;int&gt; &amp; bondOrders, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);
<a name="l00058"></a>00058   <span class="comment">//Diagram generation overloaded methods</span>
<a name="l00059"></a>00059   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(OBMol * pmol);
<a name="l00060"></a>00060   <span class="comment">//Zero-based atomic numeration should be in connection matrix arrays iA1 and iA2-so first atom has indez zero</span>
<a name="l00061"></a>00061   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(<span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,
<a name="l00062"></a>00062       std::vector&lt;double&gt;&amp; rx, std::vector&lt;double&gt;&amp; ry, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);
<a name="l00063"></a>00063   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(OBMol * pmol, std::ostream &amp; ofs);  <span class="comment">//for testing purposes only</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="comment">//Fragment search - pure subgraph isomorphisme</span>
<a name="l00066"></a>00066   <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a>(OBMol * query, OBMol * structure);
<a name="l00067"></a>00067   <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPositionQuery, <span class="keyword">const</span> std::vector&lt;int&gt; iA1Query,
<a name="l00068"></a>00068       <span class="keyword">const</span> std::vector&lt;int&gt; iA2Query, <span class="keyword">const</span> std::vector&lt;int&gt; bondTypesQuery,
<a name="l00069"></a>00069       <span class="keyword">const</span> std::vector&lt;int&gt; aPositionStructure, <span class="keyword">const</span> std::vector&lt;int&gt; iA1Structure,
<a name="l00070"></a>00070       <span class="keyword">const</span> std::vector&lt;int&gt; iA2Structure,  <span class="keyword">const</span> std::vector&lt;int&gt; bondTypesStructure,
<a name="l00071"></a>00071       <span class="keywordtype">int</span> nAtomsQuery, <span class="keywordtype">int</span> nBondsQuery, <span class="keywordtype">int</span> nAtomsStructure, <span class="keywordtype">int</span> nBondsStructure);
<a name="l00073"></a>00073   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f" title="Equivalence list generation.">equivalenceList</a>(OBMol * pmol,  std::vector&lt;int&gt;&amp; eqList);
<a name="l00074"></a>00074   <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f" title="Equivalence list generation.">equivalenceList</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPosition,<span class="keyword">const</span> std::vector&lt;int&gt; aCharge,
<a name="l00075"></a>00075       <span class="keyword">const</span> std::vector&lt;int&gt; aRad, <span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,
<a name="l00076"></a>00076       <span class="keyword">const</span> std::vector&lt;int&gt; bondTypes,  std::vector&lt;int&gt;&amp; eqList, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);
<a name="l00077"></a>00077   <span class="comment">//Fragment addition</span>
<a name="l00078"></a>00078   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">addFragment</a>(OBMol * molecule, OBMol * fragment, <span class="keywordtype">int</span> molAN, <span class="keywordtype">int</span> fragAN, <span class="keywordtype">int</span> molBN,
<a name="l00079"></a>00079       <span class="keywordtype">int</span> fragBN, <span class="keywordtype">bool</span> isAddition);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   <span class="comment">//routines below have no common meaning, but are necessary to process stereo information</span>
<a name="l00082"></a>00082   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#abce282c45ee77ea965aaacd47b4e8d72">createStereoLists</a>(OBMol * pmol, std::vector&lt;int&gt;&amp; bondStereoList,
<a name="l00083"></a>00083       std::vector&lt;int&gt;&amp; atomStereoList, std::vector&lt;int&gt;&amp; eqList);
<a name="l00084"></a>00084   OBMCDL std::string <a class="code" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL</a>(OBMol * pmol, <span class="keywordtype">int</span> ntatoms, <span class="keyword">const</span> std::vector&lt;int&gt; ix,
<a name="l00085"></a>00085       <span class="keyword">const</span> std::vector&lt;int&gt; aNumber, <span class="keyword">const</span> std::vector&lt;int&gt; atomStereoList, <span class="keyword">const</span> std::vector&lt;int&gt; eqList);
<a name="l00086"></a>00086   OBMCDL std::string <a class="code" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL</a>(OBMol * pmol, <span class="keywordtype">int</span> nbStore, <span class="keywordtype">int</span> ntatoms, <span class="keyword">const</span> std::vector&lt;int&gt; ix,
<a name="l00087"></a>00087       <span class="keyword">const</span> std::vector&lt;int&gt; aNumber, <span class="keywordtype">int</span> bonds[<a class="code" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a>][4], <span class="keyword">const</span> std::vector&lt;int&gt; bondStereoList,
<a name="l00088"></a>00088       <span class="keyword">const</span> std::vector&lt;int&gt; eqList);
<a name="l00089"></a>00089   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo</a>(std::vector&lt;int&gt;&amp; iA1, std::vector&lt;int&gt;&amp; iA2, std::vector&lt;int&gt;&amp; stereoBonds,
<a name="l00090"></a>00090       <span class="keyword">const</span> std::vector&lt;double&gt;rx, <span class="keyword">const</span> std::vector&lt;double&gt; ry, <span class="keywordtype">int</span> acount, <span class="keywordtype">int</span> bcount, std::string astereo);
<a name="l00091"></a>00091   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo</a>(<span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,
<a name="l00092"></a>00092       std::vector&lt;double&gt;&amp; rx, std::vector&lt;double&gt;&amp; ry, <span class="keywordtype">int</span> acount, <span class="keywordtype">int</span> bcount, std::string bstereo);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">groupRedraw</a>(OBMol * pmol, <span class="keywordtype">int</span> bondN, <span class="keywordtype">int</span> atomN, <span class="keywordtype">bool</span> atomNInGroup);
<a name="l00096"></a>00096   <span class="comment">//int  groupRedrawFrameAtom(OBMol * pmol, int bondN, int atomInFrame);</span>
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   OBMCDL <span class="keywordtype">int</span>  <a class="code" href="namespaceOpenBabel.shtml#a82011594cefb0a924a4cc938800de614">canonizeMCDL</a>(<span class="keyword">const</span> std::string atomBlock, std::vector&lt;std::string&gt; &amp; structureList);
<a name="l00099"></a>00099   OBMCDL <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula</a>(<span class="keyword">const</span> std::string formulaString, std::vector &lt;int&gt;&amp; enumber, <span class="keywordtype">int</span> &amp; valency);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aaa14c59df78025ce6e8dfd3f27feb106">prepareTest</a>(OBMol * pmol, std::ostream &amp; ofs);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 } <span class="comment">// namespace OpenBabel</span>
<a name="l00104"></a>00104 
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:07 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
