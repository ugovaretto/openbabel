<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>mol.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">mol.h</div>  </div>
</div>
<div class="contents">
<a href="mol_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">mol.h - Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue.</span>
<a name="l00003"></a>00003 <span class="comment">        (the main header for Open Babel)</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"></span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_MOL_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_MOL_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">// Currently includes many headers for 2.x backwards compatibility</span>
<a name="l00039"></a>00039 <span class="comment">// \deprecated -- this will be cleaned up in 3.0 efforts</span>
<a name="l00040"></a>00040 <span class="comment">//      to improve compile time significantly.</span>
<a name="l00041"></a>00041 <span class="comment">// Only include necessary headers and class declaration stubs.</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml" title="Handle atoms.">openbabel/atom.h</a>&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;<a class="code" href="bond_8h.shtml" title="Handle bonds.">openbabel/bond.h</a>&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;<a class="code" href="data_8h.shtml" title="Global data and resource file parsers.">openbabel/data.h</a>&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;<a class="code" href="chains_8h.shtml" title="Parse for macromolecule chains and residues.">openbabel/chains.h</a>&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml" title="Fast and efficient bitstring class.">openbabel/bitvec.h</a>&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml" title="Defines for residue properties, names, etc.">openbabel/residue.h</a>&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;<a class="code" href="ring_8h.shtml" title="Deal with rings, find smallest set of smallest rings (SSSR).">openbabel/ring.h</a>&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;<a class="code" href="generic_8h.shtml" title="Handle generic data classes. Custom data for atoms, bonds, etc.">openbabel/generic.h</a>&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml" title="Open Babel atom and aromaticity typer.">openbabel/typer.h</a>&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml" title="STL-style iterators for Open Babel.">openbabel/obiter.h</a>&gt;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;<a class="code" href="internalcoord_8h.shtml" title="Declaration of OBInternalCoord class, conversion between Cartesian and Z-matrix form.">openbabel/internalcoord.h</a>&gt;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keyword">namespace </span>OpenBabel
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keyword">class </span>OBAtom;
<a name="l00061"></a>00061   <span class="keyword">class </span>OBBond;
<a name="l00062"></a>00062   <span class="keyword">class </span>OBInternalCoord;
<a name="l00063"></a>00063   <span class="keyword">class </span>OBConversion; <span class="comment">//used only as a pointer</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="comment">// Class OBMol</span>
<a name="l00066"></a>00066   <span class="comment">//MOL Property Macros (flags) -- 32+ bits</span>
<a name="l00068"></a><a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">00068</a> <span class="comment"></span><span class="preprocessor">#define OB_SSSR_MOL              (1&lt;&lt;1)</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span>
<a name="l00070"></a><a class="code" href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9">00070</a> <span class="preprocessor">#define OB_RINGFLAGS_MOL         (1&lt;&lt;2)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>
<a name="l00072"></a><a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609">00072</a> <span class="preprocessor">#define OB_AROMATIC_MOL          (1&lt;&lt;3)</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>
<a name="l00074"></a><a class="code" href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5">00074</a> <span class="preprocessor">#define OB_ATOMTYPES_MOL         (1&lt;&lt;4)</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>
<a name="l00076"></a><a class="code" href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491">00076</a> <span class="preprocessor">#define OB_CHIRALITY_MOL         (1&lt;&lt;5)</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a><a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0">00078</a> <span class="preprocessor">#define OB_PCHARGE_MOL           (1&lt;&lt;6)</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a><a class="code" href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082">00080</a> <span class="preprocessor">#define OB_HYBRID_MOL            (1&lt;&lt;8)</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>
<a name="l00082"></a><a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254">00082</a> <span class="preprocessor">#define OB_IMPVAL_MOL            (1&lt;&lt;9)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>
<a name="l00084"></a><a class="code" href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7">00084</a> <span class="preprocessor">#define OB_KEKULE_MOL            (1&lt;&lt;10)</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>
<a name="l00086"></a><a class="code" href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e">00086</a> <span class="preprocessor">#define OB_CLOSURE_MOL           (1&lt;&lt;11)</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a><a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88">00088</a> <span class="preprocessor">#define OB_H_ADDED_MOL           (1&lt;&lt;12)</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a><a class="code" href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a">00090</a> <span class="preprocessor">#define OB_PH_CORRECTED_MOL      (1&lt;&lt;13)</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>
<a name="l00092"></a><a class="code" href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71">00092</a> <span class="preprocessor">#define OB_AROM_CORRECTED_MOL    (1&lt;&lt;14)</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span>
<a name="l00094"></a><a class="code" href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0">00094</a> <span class="preprocessor">#define OB_CHAINS_MOL            (1&lt;&lt;15)</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a><a class="code" href="mol_8h.shtml#a3168124e0bc8b31e2d4392f1da02fbd7">00096</a> <span class="preprocessor">#define OB_TCHARGE_MOL                 (1&lt;&lt;16)</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>
<a name="l00098"></a><a class="code" href="mol_8h.shtml#a8ae8b8d431ee5649e4dad8bbdfd5092d">00098</a> <span class="preprocessor">#define OB_TSPIN_MOL             (1&lt;&lt;17)</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a><a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8">00100</a> <span class="preprocessor">#define OB_RINGTYPES_MOL         (1&lt;&lt;18)</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>
<a name="l00102"></a><a class="code" href="mol_8h.shtml#ad224f71d6aecaa29f7cb32ec475b8d58">00102</a> <span class="preprocessor">#define OB_PATTERN_STRUCTURE     (1&lt;&lt;19)</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span>
<a name="l00104"></a><a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255">00104</a> <span class="preprocessor">#define OB_LSSR_MOL              (1&lt;&lt;20)</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>  <span class="comment">// flags 21-32 unspecified</span>
<a name="l00106"></a><a class="code" href="mol_8h.shtml#ae7cd3ed4ac08cc188ed556c26ff26abe">00106</a> <span class="preprocessor">#define OB_CURRENT_CONFORMER     -1</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>
<a name="l00108"></a>00108   <span class="comment">// class introduction in mol.cpp</span>
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml">00109</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00110"></a>00110   {
<a name="l00111"></a>00111   <span class="keyword">protected</span>:
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">00112</a>     <span class="keywordtype">int</span>                           <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549" title="bitfield of flags">_flags</a>;       
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">00113</a>     <span class="keywordtype">bool</span>                          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646" title="Assign partial charges automatically.">_autoPartialCharge</a>;
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">00114</a>     <span class="keywordtype">bool</span>                          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c" title="Assign formal charges automatically.">_autoFormalCharge</a>;
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">00115</a>     std::string                   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9" title="Molecule title.">_title</a>;       
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">00116</a>     std::vector&lt;OBAtom*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5" title="vector of atoms">_vatom</a>;       
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">00117</a>     std::vector&lt;OBAtom*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0" title="vector of atoms indexed by id">_atomIds</a>;     
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">00118</a>     std::vector&lt;OBBond*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98" title="vector of bonds">_vbond</a>;       
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">00119</a>     std::vector&lt;OBBond*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2" title="vector of bonds">_bondIds</a>;     
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">00120</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            <a class="code" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c" title="Dimensionality of coordinates.">_dimension</a>;   
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">00121</a>     <span class="keywordtype">int</span>                           <a class="code" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd" title="Total charge on the molecule.">_totalCharge</a>; 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">00122</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07" title="Total spin on the molecule (if not specified, assumes lowest possible spin)">_totalSpin</a>;   
<a name="l00123"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">00123</a>     <span class="keywordtype">double</span>                        *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4" title="coordinate array">_c</a>;          
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">00124</a>     std::vector&lt;double*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1" title="vector of conformers">_vconf</a>;       
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">00125</a>     <span class="keywordtype">double</span>                        <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a" title="heat of formation">_energy</a>;      
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">00126</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219" title="Number of atoms.">_natoms</a>;      
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">00127</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c" title="Number of bonds.">_nbonds</a>;      
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">00128</a>     std::vector&lt;OBResidue*&gt;       <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956" title="Residue information (if applicable)">_residue</a>;     
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">00129</a>     std::vector&lt;OBInternalCoord*&gt; <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b" title="Internal Coordinates (if applicable)">_internals</a>;   
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">00130</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            <a class="code" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0" title="Number of nested calls to BeginModify()">_mod</a>;         
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">00132</a>     <span class="keywordtype">bool</span>  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">HasFlag</a>(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">00133</a>     <span class="keywordtype">void</span>  <a class="code" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a>(<span class="keywordtype">int</span> flag)    { _flags |= flag; }
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="keywordtype">void</span> start_kekulize(std::vector &lt;OBAtom*&gt; &amp;cycle, std::vector&lt;int&gt; &amp;electron);
<a name="l00138"></a>00138     <span class="keywordtype">bool</span> expand_kekulize(<span class="keywordtype">int</span> bond_idx, std::vector&lt;int&gt; &amp;atomState, std::vector&lt;int&gt; &amp;bondState);
<a name="l00139"></a>00139     <span class="keywordtype">bool</span> has_no_leftover_electrons(std::vector&lt;int&gt; &amp;atomState);
<a name="l00140"></a>00140     <span class="keywordtype">int</span> getorden(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom);
<a name="l00141"></a>00141     <span class="keywordtype">bool</span> expandcycle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;avisit, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;potAromBonds);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="keyword">public</span>:
<a name="l00145"></a>00145 
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>();
<a name="l00151"></a>00151     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;);
<a name="l00153"></a>00153     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>();
<a name="l00155"></a>00155     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00157"></a>00157     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;operator+=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00158"></a>00158 
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">00161</a>     <span class="keywordtype">void</span> ReserveAtoms(<span class="keywordtype">int</span> natoms)
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163       <span class="keywordflow">if</span> (natoms &gt; 0 &amp;&amp; _mod) {
<a name="l00164"></a>00164         _vatom.reserve(natoms);
<a name="l00165"></a>00165         _atomIds.reserve(natoms);
<a name="l00166"></a>00166       }
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168 
<a name="l00171"></a>00171     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom</a>(<span class="keywordtype">void</span>);
<a name="l00174"></a>00174     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *<a class="code" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a>(<span class="keywordtype">void</span>);
<a name="l00177"></a>00177     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *CreateResidue(<span class="keywordtype">void</span>);
<a name="l00180"></a>00180     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00183"></a>00183     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*);
<a name="l00186"></a>00186     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>*);
<a name="l00187"></a>00187 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> AddAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp;);
<a name="l00193"></a>00193     <span class="keywordtype">bool</span> InsertAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;);
<a name="l00201"></a>00201     <span class="keywordtype">bool</span> AddBond(<span class="keywordtype">int</span> beginIdx, <span class="keywordtype">int</span> endIdx, <span class="keywordtype">int</span> order,
<a name="l00202"></a>00202                  <span class="keywordtype">int</span> flags=0,<span class="keywordtype">int</span> insertpos=-1);
<a name="l00205"></a>00205     <span class="keywordtype">bool</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp;);
<a name="l00208"></a>00208     <span class="keywordtype">bool</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>&amp;);
<a name="l00209"></a>00209 
<a name="l00213"></a>00213     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *NewAtom();
<a name="l00217"></a>00217     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *NewAtom(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00221"></a>00221     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *NewBond();
<a name="l00225"></a>00225     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *NewBond(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00227"></a>00227     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *NewResidue();
<a name="l00232"></a>00232     <span class="keywordtype">bool</span> DeleteAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*, <span class="keywordtype">bool</span> destroyAtom = <span class="keyword">true</span>);
<a name="l00235"></a>00235     <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*, <span class="keywordtype">bool</span> destroyBond = <span class="keyword">true</span>);
<a name="l00238"></a>00238     <span class="keywordtype">bool</span> DeleteResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>*, <span class="keywordtype">bool</span> destroyResidue = <span class="keyword">true</span>);
<a name="l00240"></a>00240 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="keyword">virtual</span> <span class="keywordtype">void</span> BeginModify(<span class="keywordtype">void</span>);
<a name="l00250"></a>00250     <span class="keyword">virtual</span> <span class="keywordtype">void</span> EndModify(<span class="keywordtype">bool</span> nukePerceivedData=<span class="keyword">true</span>);
<a name="l00252"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">00252</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">GetMod</a>()           {      <span class="keywordflow">return</span>(_mod);    }
<a name="l00255"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">00255</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">IncrementMod</a>()    {      _mod++;          }
<a name="l00258"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">00258</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">DecrementMod</a>()    {      _mod--;          }
<a name="l00260"></a>00260 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00264"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aba761a006b56d62912a91e259ce11bb1">00264</a>     <span class="keywordtype">int</span>          <a class="code" href="classOpenBabel_1_1OBMol.shtml#aba761a006b56d62912a91e259ce11bb1">GetFlags</a>()               { <span class="keywordflow">return</span>(_flags); }
<a name="l00267"></a>00267     <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle(<span class="keywordtype">bool</span> replaceNewlines = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0c317a10161689c407f29a6fcacdb852">00269</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0c317a10161689c407f29a6fcacdb852">NumAtoms</a>()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_natoms); }
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a115132ab8bd21607d00d61bc1ba5cc16">00271</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a115132ab8bd21607d00d61bc1ba5cc16">NumBonds</a>()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_nbonds); }
<a name="l00273"></a>00273     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumHvyAtoms();
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ad1369fbd476ea326b847c08ff64f9331">00275</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad1369fbd476ea326b847c08ff64f9331">NumResidues</a>()<span class="keyword"> const      </span>{ <span class="keywordflow">return</span>(static_cast&lt;unsigned int&gt; (_residue.size())); }
<a name="l00277"></a>00277     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors();
<a name="l00278"></a>00278 
<a name="l00281"></a>00281     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>      *GetAtom(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00283"></a>00283     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>      *GetAtomById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00286"></a>00286     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>      *GetFirstAtom() <span class="keyword">const</span>;
<a name="l00289"></a>00289     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00291"></a>00291     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBondById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00294"></a>00294     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b) <span class="keyword">const</span>;
<a name="l00295"></a>00295     <span class="comment">// The safer version of the above method</span>
<a name="l00297"></a>00297 <span class="comment"></span>    <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* bgn, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end) <span class="keyword">const</span>;
<a name="l00300"></a>00300     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>   *GetResidue(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00301"></a>00301     std::vector&lt;OBInternalCoord*&gt; GetInternalCoord();
<a name="l00306"></a>00306     <span class="keywordtype">double</span>       GetTorsion(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l00311"></a>00311     <span class="keywordtype">double</span>       GetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* d);
<a name="l00314"></a>00314     <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* c);
<a name="l00316"></a>00316     std::string  GetFormula();
<a name="l00318"></a>00318     std::string  GetSpacedFormula(<span class="keywordtype">int</span> ones=0, <span class="keyword">const</span> <span class="keywordtype">char</span>* sp=<span class="stringliteral">&quot; &quot;</span>, <span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a898054d3301668a37b4d7c3612487157">00320</a>     <span class="keywordtype">double</span>       <a class="code" href="classOpenBabel_1_1OBMol.shtml#a898054d3301668a37b4d7c3612487157">GetEnergy</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _energy; }
<a name="l00322"></a>00322     <span class="keywordtype">double</span>       GetMolWt(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00324"></a>00324     <span class="keywordtype">double</span>       GetExactMass(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00326"></a>00326     <span class="keywordtype">int</span>          GetTotalCharge();
<a name="l00328"></a>00328     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetTotalSpinMultiplicity();
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ae66fbb23621ae4f9e7937540d5072869">00330</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae66fbb23621ae4f9e7937540d5072869">GetDimension</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _dimension; }
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">00332</a>     <span class="keywordtype">double</span>      *<a class="code" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">GetCoordinates</a>() { <span class="keywordflow">return</span>(_c); }
<a name="l00334"></a>00334     std::vector&lt;OBRing*&gt; &amp;GetSSSR();
<a name="l00336"></a>00336     std::vector&lt;OBRing*&gt; &amp;GetLSSR();
<a name="l00338"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">00338</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e" title="Get the current flag for whether formal charges are set with pH correction.">AutomaticFormalCharge</a>()   { <span class="keywordflow">return</span>(_autoFormalCharge);  }
<a name="l00340"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">00340</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c" title="Get the current flag for whether partial charges are auto-determined.">AutomaticPartialCharge</a>()  { <span class="keywordflow">return</span>(_autoPartialCharge); }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 
<a name="l00347"></a>00347     <span class="keywordtype">void</span>   SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *title);
<a name="l00349"></a>00349     <span class="keywordtype">void</span>   SetTitle(std::string &amp;title);
<a name="l00351"></a>00351     <span class="keywordtype">void</span>   SetFormula(std::string molFormula);
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">00353</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62" title="Set the heat of formation for this molecule (in kcal/mol)">SetEnergy</a>(<span class="keywordtype">double</span> energy) { _energy = energy; }
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">00355</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b" title="Set the dimension of this molecule (i.e., 0, 1 , 2, 3)">SetDimension</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> d) { _dimension = d; }
<a name="l00357"></a>00357     <span class="keywordtype">void</span>   SetTotalCharge(<span class="keywordtype">int</span> charge);
<a name="l00360"></a>00360     <span class="keywordtype">void</span>   SetTotalSpinMultiplicity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spinMultiplicity);
<a name="l00366"></a>00366     <span class="keywordtype">void</span> SetInternalCoord(std::vector&lt;OBInternalCoord*&gt; int_coord);
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">00368</a>     <span class="keywordtype">void</span> SetAutomaticFormalCharge(<span class="keywordtype">bool</span> val)
<a name="l00369"></a>00369     { _autoFormalCharge=val;  }
<a name="l00371"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">00371</a>     <span class="keywordtype">void</span> SetAutomaticPartialCharge(<span class="keywordtype">bool</span> val)
<a name="l00372"></a>00372     { _autoPartialCharge=val; }
<a name="l00373"></a>00373 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">00375</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb" title="Mark that aromaticity has been perceived for this molecule (see OBAromaticTyper)">SetAromaticPerceived</a>()    { SetFlag(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>);    }
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">00377</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196" title="Mark that Smallest Set of Smallest Rings has been run (see OBRing class)">SetSSSRPerceived</a>()        { SetFlag(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4" title="Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR.">OB_SSSR_MOL</a>);        }
<a name="l00379"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">00379</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1" title="Mark that Largest Set of Smallest Rings has been run (see OBRing class)">SetLSSRPerceived</a>()        { SetFlag(<a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255" title="Largest Set of Smallest Rings (LSSR) done. See OBRing and OBMol::FindLSSR.">OB_LSSR_MOL</a>);        }
<a name="l00381"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">00381</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa" title="Mark that rings have been perceived (see OBRing class for details)">SetRingAtomsAndBondsPerceived</a>(){SetFlag(<a class="code" href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9" title="Ring flags have been set: See OBRing::FindRingAtomsAndBonds.">OB_RINGFLAGS_MOL</a>);}
<a name="l00383"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">00383</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749" title="Mark that atom types have been perceived (see OBAtomTyper for details)">SetAtomTypesPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5" title="Atom typing has been performed. See OBAtomTyper.">OB_ATOMTYPES_MOL</a>);   }
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">00385</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58" title="Mark that ring types have been perceived (see OBRingTyper for details)">SetRingTypesPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8" title="Ring typing has been performed. See OBRingTyper.">OB_RINGTYPES_MOL</a>);   }
<a name="l00387"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">00387</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e" title="Mark that chains and residues have been perceived (see OBChainsParser)">SetChainsPerceived</a>()      { SetFlag(<a class="code" href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0" title="Biomolecular chains and residues have been set. See OBChainsParser.">OB_CHAINS_MOL</a>);      }
<a name="l00389"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">00389</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27" title="Mark that chirality has been perceived.">SetChiralityPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491" title="Chirality detection has been performed. See OBMol::IsChiral.">OB_CHIRALITY_MOL</a>);   }
<a name="l00391"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">00391</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b" title="Mark that partial charges have been assigned.">SetPartialChargesPerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>);   }
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">00393</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a" title="Mark that hybridization of all atoms has been assigned.">SetHybridizationPerceived</a>() { SetFlag(<a class="code" href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082" title="Atom hybridizations have been set. See OBAtomTyper.">OB_HYBRID_MOL</a>);    }
<a name="l00395"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">00395</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832" title="Mark that the implicit hydrogen valence of all atoms has been assigned.">SetImplicitValencePerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>);   }
<a name="l00397"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">00397</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b" title="Mark that Kekule forms have been assigned by Kekulize()">SetKekulePerceived</a>()      { SetFlag(<a class="code" href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7" title="Kekule form has been set. See OBMol::Kekulize.">OB_KEKULE_MOL</a>);      }
<a name="l00399"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">00399</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9" title="Mark that ring closure bonds have been assigned by graph traversal.">SetClosureBondsPerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e" title="Ring &quot;closure&quot; bonds have been set. See OBBond::IsClosure.">OB_CLOSURE_MOL</a>);     }
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">00401</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e" title="Mark that explicit hydrogen atoms have been added.">SetHydrogensAdded</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>);     }
<a name="l00402"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">00402</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">SetCorrectedForPH</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a" title="pH correction for hydrogen addition has been performed.">OB_PH_CORRECTED_MOL</a>);}
<a name="l00403"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">00403</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">SetAromaticCorrected</a>()    { SetFlag(<a class="code" href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71" title="Aromaticity has been corrected. See OBAtomTyper::CorrectAromaticNitrogens.">OB_AROM_CORRECTED_MOL</a>);}
<a name="l00404"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">00404</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">SetSpinMultiplicityAssigned</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#a8ae8b8d431ee5649e4dad8bbdfd5092d" title="Total spin on this molecule has been set. See OBMol::SetTotalSpinMultiplicity.">OB_TSPIN_MOL</a>);    }
<a name="l00405"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">00405</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">SetFlags</a>(<span class="keywordtype">int</span> flags)       { _flags = flags;              }
<a name="l00406"></a>00406 
<a name="l00407"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">00407</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">UnsetAromaticPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>));   }
<a name="l00408"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">00408</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">UnsetSSSRPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4" title="Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR.">OB_SSSR_MOL</a>));   }
<a name="l00409"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">00409</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">UnsetRingTypesPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8" title="Ring typing has been performed. See OBRingTyper.">OB_RINGTYPES_MOL</a>));   }
<a name="l00410"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">00410</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">UnsetPartialChargesPerceived</a>(){ _flags &amp;= (~(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>));}
<a name="l00411"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">00411</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">UnsetImplicitValencePerceived</a>(){_flags &amp;= (~(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>)); }
<a name="l00412"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">00412</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">UnsetHydrogensAdded</a>()       { UnsetFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>);     }
<a name="l00413"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">00413</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a>(<span class="keywordtype">int</span> flag)       { _flags &amp;= (~(flag));              }
<a name="l00415"></a>00415 
<a name="l00417"></a>00417 
<a name="l00418"></a>00418     <span class="comment">// Description in transform.cpp (command-line transformations to this molecule)</span>
<a name="l00419"></a>00419     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*    DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* pOptions,<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv);
<a name="l00420"></a>00420     <span class="comment">// Ditto (documentation on transformation options)</span>
<a name="l00421"></a>00421     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription();
<a name="l00423"></a>00423     <span class="keywordtype">bool</span> Clear();
<a name="l00425"></a>00425     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;OBAtom*&gt;&amp;);
<a name="l00427"></a>00427     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;int&gt;);
<a name="l00430"></a>00430     <span class="keywordtype">void</span> SetCoordinates(<span class="keywordtype">double</span> *c);
<a name="l00432"></a>00432     <span class="keywordtype">void</span> ToInertialFrame(<span class="keywordtype">int</span> conf, <span class="keywordtype">double</span> *rmat);
<a name="l00434"></a>00434     <span class="keywordtype">void</span> ToInertialFrame();
<a name="l00436"></a>00436     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v);
<a name="l00438"></a>00438     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v, <span class="keywordtype">int</span> conf);
<a name="l00440"></a>00440     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> u[3][3]);
<a name="l00442"></a>00442     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9]);
<a name="l00444"></a>00444     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9],<span class="keywordtype">int</span> nconf);
<a name="l00446"></a>00446     <span class="keywordtype">void</span> Center();
<a name="l00448"></a>00448 
<a name="l00449"></a>00449     <span class="keywordtype">bool</span> Kekulize();
<a name="l00450"></a>00450     <span class="keywordtype">bool</span> PerceiveKekuleBonds();
<a name="l00451"></a>00451 
<a name="l00452"></a>00452     <span class="keywordtype">void</span> NewPerceiveKekuleBonds();
<a name="l00453"></a>00453 
<a name="l00456"></a>00456     <span class="keywordtype">bool</span> DeleteHydrogens();
<a name="l00459"></a>00459     <span class="keywordtype">bool</span> DeleteHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00462"></a>00462     <span class="keywordtype">bool</span> DeleteNonPolarHydrogens();
<a name="l00465"></a>00465     <span class="keywordtype">bool</span> DeleteHydrogen(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00472"></a>00472     <span class="keywordtype">bool</span> AddHydrogens(<span class="keywordtype">bool</span> polaronly=<span class="keyword">false</span>,<span class="keywordtype">bool</span> correctForPH=<span class="keyword">false</span>, <span class="keywordtype">double</span> pH=7.4);
<a name="l00474"></a>00474     <span class="keywordtype">bool</span> AddHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00476"></a>00476     <span class="keywordtype">bool</span> AddPolarHydrogens();
<a name="l00477"></a>00477 
<a name="l00481"></a>00481     <span class="keywordtype">bool</span> StripSalts(<span class="keywordtype">int</span> threshold=0);
<a name="l00483"></a>00483     std::vector&lt;OBMol&gt; Separate(<span class="keywordtype">int</span> StartIndex=1);
<a name="l00485"></a>00485     <span class="keywordtype">bool</span> GetNextFragment( <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS)">OpenBabel::OBMolAtomDFSIter</a>&amp; iter, <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>&amp; newMol );
<a name="l00487"></a>00487     <span class="keywordtype">bool</span> ConvertDativeBonds();
<a name="l00488"></a>00488 
<a name="l00490"></a>00490     <span class="keywordtype">bool</span> CorrectForPH(<span class="keywordtype">double</span> pH=7.4);
<a name="l00491"></a>00491     <span class="comment">// docs in mol.cpp</span>
<a name="l00492"></a>00492     <span class="keywordtype">bool</span> AssignSpinMultiplicity(<span class="keywordtype">bool</span> NoImplicitH=<span class="keyword">false</span>);
<a name="l00494"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">00494</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7" title="The OBMol is a pattern, not a complete molecule. Left unchanged by Clear().">SetIsPatternStructure</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#ad224f71d6aecaa29f7cb32ec475b8d58" title="A pattern, not a complete molecule.">OB_PATTERN_STRUCTURE</a>);}
<a name="l00495"></a>00495 
<a name="l00498"></a>00498     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center(<span class="keywordtype">int</span> nconf);
<a name="l00504"></a>00504     <span class="keywordtype">void</span> SetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<span class="keywordtype">double</span> ang);
<a name="l00506"></a>00506 
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     <span class="keywordtype">void</span> FindSSSR();
<a name="l00512"></a>00512     <span class="keywordtype">void</span> FindLSSR();
<a name="l00514"></a>00514     <span class="keywordtype">void</span> FindRingAtomsAndBonds();
<a name="l00517"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">00517</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">FindChiralCenters</a>() { IsChiral(); }
<a name="l00518"></a>00518     <span class="comment">// documented in mol.cpp -- locates all atom indexes which can reach &#39;end&#39;</span>
<a name="l00519"></a>00519     <span class="keywordtype">void</span> FindChildren(std::vector&lt;int&gt; &amp; children,<span class="keywordtype">int</span> bgnIdx,<span class="keywordtype">int</span> endIdx);
<a name="l00520"></a>00520     <span class="comment">// documented in mol.cpp -- locates all atoms which can reach &#39;end&#39;</span>
<a name="l00521"></a>00521     <span class="keywordtype">void</span> FindChildren(std::vector&lt;OBAtom*&gt;&amp; children,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* bgn,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end);
<a name="l00526"></a>00526     <span class="keywordtype">void</span> FindLargestFragment(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;frag);
<a name="l00529"></a>00529     <span class="keywordtype">void</span> ContigFragList(std::vector&lt;std::vector&lt;int&gt; &gt;&amp;);
<a name="l00531"></a>00531     <span class="keywordtype">void</span> Align(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp;,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp;);
<a name="l00533"></a>00533     <span class="keywordtype">void</span> ConnectTheDots();
<a name="l00535"></a>00535     <span class="keywordtype">void</span> PerceiveBondOrders();
<a name="l00537"></a>00537     <span class="keywordtype">void</span> FindAngles();
<a name="l00539"></a>00539     <span class="keywordtype">void</span> FindTorsions();
<a name="l00540"></a>00540     <span class="comment">// documented in mol.cpp: graph-theoretical distance for each atom</span>
<a name="l00541"></a>00541     <span class="keywordtype">bool</span>         GetGTDVector(std::vector&lt;int&gt; &amp;);
<a name="l00542"></a>00542     <span class="comment">// documented in mol.cpp: graph-invariant index for each atom</span>
<a name="l00543"></a>00543     <span class="keywordtype">void</span>         GetGIVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00544"></a>00544     <span class="comment">// documented in mol.cpp: calculate symmetry-unique identifiers</span>
<a name="l00545"></a>00545     <span class="keywordtype">void</span>         GetGIDVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00547"></a>00547 
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 
<a name="l00551"></a>00551     <span class="keywordtype">bool</span> Has2D(<span class="keywordtype">bool</span> Not3D=<span class="keyword">false</span>);
<a name="l00553"></a>00553     <span class="keywordtype">bool</span> Has3D();
<a name="l00555"></a>00555     <span class="keywordtype">bool</span> HasNonZeroCoords();
<a name="l00557"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">00557</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0" title="Has aromatic perception been performed?">HasAromaticPerceived</a>()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>)); }
<a name="l00559"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">00559</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30" title="Has the smallest set of smallest rings (FindSSSR) been performed?">HasSSSRPerceived</a>()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4" title="Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR.">OB_SSSR_MOL</a>));     }
<a name="l00561"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">00561</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f" title="Has the largest set of smallest rings (FindLSSR) been performed?">HasLSSRPerceived</a>()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255" title="Largest Set of Smallest Rings (LSSR) done. See OBRing and OBMol::FindLSSR.">OB_LSSR_MOL</a>));     }
<a name="l00563"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">00563</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b" title="Have ring atoms and bonds been assigned?">HasRingAtomsAndBondsPerceived</a>(){<span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9" title="Ring flags have been set: See OBRing::FindRingAtomsAndBonds.">OB_RINGFLAGS_MOL</a>));}
<a name="l00565"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">00565</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4" title="Have atom types been assigned by OBAtomTyper?">HasAtomTypesPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5" title="Atom typing has been performed. See OBAtomTyper.">OB_ATOMTYPES_MOL</a>));}
<a name="l00567"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">00567</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0" title="Have ring types been assigned by OBRingTyper?">HasRingTypesPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8" title="Ring typing has been performed. See OBRingTyper.">OB_RINGTYPES_MOL</a>));}
<a name="l00569"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">00569</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce" title="Has atom chirality been assigned?">HasChiralityPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491" title="Chirality detection has been performed. See OBMol::IsChiral.">OB_CHIRALITY_MOL</a>));}
<a name="l00571"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">00571</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d" title="Have atomic Gasteiger partial charges been assigned by OBGastChrg?">HasPartialChargesPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>));}
<a name="l00573"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">00573</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37" title="Has atomic hybridization been assigned by OBAtomTyper?">HasHybridizationPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082" title="Atom hybridizations have been set. See OBAtomTyper.">OB_HYBRID_MOL</a>));  }
<a name="l00575"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">00575</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5" title="Has implicit hydrogen valence been assigned by OBAtomTyper?">HasImplicitValencePerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>));}
<a name="l00577"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">00577</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db" title="Has aromaticity and Kekule forms been assigned by Kekulize?">HasKekulePerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7" title="Kekule form has been set. See OBMol::Kekulize.">OB_KEKULE_MOL</a>));         }
<a name="l00579"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">00579</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee" title="Have ring &quot;closure&quot; bonds been assigned? (e.g., OBBond::IsClosure())">HasClosureBondsPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e" title="Ring &quot;closure&quot; bonds have been set. See OBBond::IsClosure.">OB_CLOSURE_MOL</a>));  }
<a name="l00581"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">00581</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459" title="Have biomolecule chains and residues been assigned by OBChainsParser?">HasChainsPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0" title="Biomolecular chains and residues have been set. See OBChainsParser.">OB_CHAINS_MOL</a>));         }
<a name="l00583"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">00583</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025" title="Have hydrogens been added to the molecule?">HasHydrogensAdded</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>));         }
<a name="l00585"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">00585</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8" title="Have aromatic nitrogens been &quot;corrected?&quot; (deprecated)">HasAromaticCorrected</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71" title="Aromaticity has been corrected. See OBAtomTyper::CorrectAromaticNitrogens.">OB_AROM_CORRECTED_MOL</a>));}
<a name="l00587"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">00587</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f" title="Has the molecule been corrected for pH by CorrectForPH?">IsCorrectedForPH</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a" title="pH correction for hydrogen addition has been performed.">OB_PH_CORRECTED_MOL</a>));     }
<a name="l00589"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">00589</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103" title="Has total spin multiplicity been assigned?">HasSpinMultiplicityAssigned</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a8ae8b8d431ee5649e4dad8bbdfd5092d" title="Total spin on this molecule has been set. See OBMol::SetTotalSpinMultiplicity.">OB_TSPIN_MOL</a>)); }
<a name="l00591"></a>00591     <span class="keywordtype">bool</span> IsChiral();
<a name="l00593"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">00593</a>     <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df" title="Are there any atoms in this molecule?">Empty</a>()                       { <span class="keywordflow">return</span>(_natoms == 0);          }
<a name="l00595"></a>00595 
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 
<a name="l00599"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">00599</a>     <span class="keywordtype">int</span>     <a class="code" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers</a>()    { <span class="keywordflow">return</span>((_vconf.empty())?0:static_cast&lt;int&gt; (_vconf.size())); }
<a name="l00601"></a>00601     <span class="keywordtype">void</span>    SetConformers(std::vector&lt;double*&gt; &amp;v);
<a name="l00603"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">00603</a>     <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4" title="Add a new set of coordinates f as a new conformer.">AddConformer</a>(<span class="keywordtype">double</span> *f)    {  _vconf.push_back(f);    }
<a name="l00606"></a>00606     <span class="keywordtype">void</span>    SetConformer(<span class="keywordtype">int</span> i);
<a name="l00609"></a>00609     <span class="keywordtype">void</span>    CopyConformer(<span class="keywordtype">double</span>* c,<span class="keywordtype">int</span> nconf);
<a name="l00611"></a>00611     <span class="keywordtype">void</span>    DeleteConformer(<span class="keywordtype">int</span> nconf);
<a name="l00613"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">00613</a>     <span class="keywordtype">double</span>  *<a class="code" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">GetConformer</a>(<span class="keywordtype">int</span> i)       {  <span class="keywordflow">return</span>(_vconf[i]);      }
<a name="l00615"></a>00615     <span class="keywordtype">void</span>    SetEnergies(std::vector&lt;double&gt; &amp;energies);
<a name="l00617"></a>00617     std::vector&lt;double&gt; GetEnergies();
<a name="l00620"></a>00620     <span class="keywordtype">double</span>  GetEnergy(<span class="keywordtype">int</span> ci);
<a name="l00623"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a43bacf0671104e33b04835408b5c3785">00623</a>     <span class="keywordtype">double</span>  *BeginConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00624"></a>00624     { i = _vconf.begin();
<a name="l00625"></a>00625       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00628"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#abd4311945a4de0a47d2f036e9632a4b9">00628</a>     <span class="keywordtype">double</span>  *NextConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00629"></a>00629     { ++i;
<a name="l00630"></a>00630       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00632"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">00632</a>     std::vector&lt;double*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">GetConformers</a>() {   <span class="keywordflow">return</span>(_vconf);     }
<a name="l00634"></a>00634 
<a name="l00636"></a>00636 
<a name="l00637"></a>00637 
<a name="l00638"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ae3b07b388e733d5a0e9ee9654a4411a1">00638</a>     <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae3b07b388e733d5a0e9ee9654a4411a1">BeginAtoms</a>()   { <span class="keywordflow">return</span> _vatom.begin(); }
<a name="l00640"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">00640</a>     <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">EndAtoms</a>()    { <span class="keywordflow">return</span> _vatom.begin() + NumAtoms() ; }
<a name="l00642"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">00642</a>     <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">BeginBonds</a>()   { <span class="keywordflow">return</span> _vbond.begin(); }
<a name="l00644"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">00644</a>     <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">EndBonds</a>()     { <span class="keywordflow">return</span> _vbond.begin() + NumBonds() ; }
<a name="l00646"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">00646</a>     <a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">BeginResidues</a>() { <span class="keywordflow">return</span> _residue.begin(); }
<a name="l00648"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">00648</a>     <a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">EndResidues</a>()   { <span class="keywordflow">return</span> _residue.end();   }
<a name="l00649"></a>00649 
<a name="l00652"></a>00652     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *BeginAtom(<a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> &amp;i);
<a name="l00655"></a>00655     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *NextAtom(<a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> &amp;i);
<a name="l00658"></a>00658     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00661"></a>00661     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00664"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">00664</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *BeginResidue(<a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> &amp;i)
<a name="l00665"></a>00665     {
<a name="l00666"></a>00666       i = _residue.begin();
<a name="l00667"></a>00667       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00668"></a>00668     }
<a name="l00671"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">00671</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *NextResidue(<a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> &amp;i)
<a name="l00672"></a>00672     {
<a name="l00673"></a>00673       ++i;
<a name="l00674"></a>00674       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00675"></a>00675     }
<a name="l00679"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a67c061a9d850cf30b4bf5ea394760d43">00679</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> *BeginInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00680"></a>00680     {
<a name="l00681"></a>00681       i = _internals.begin();
<a name="l00682"></a>00682       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00683"></a>00683     }
<a name="l00687"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a6680c695e3cdceb7e42a554a0ffc8a19">00687</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> *NextInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00688"></a>00688     {
<a name="l00689"></a>00689       ++i;
<a name="l00690"></a>00690       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00691"></a>00691     }
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   };
<a name="l00695"></a>00695 
<a name="l00696"></a>00696   <span class="comment">// Utility function prototypes</span>
<a name="l00697"></a>00697   <span class="comment">//tokenize and Trim declarations moved to base.h</span>
<a name="l00698"></a>00698   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00699"></a>00699   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(<span class="keywordtype">char</span> *str);
<a name="l00700"></a>00700   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00701"></a>00701   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(std::string &amp;str);
<a name="l00703"></a>00703   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba" title="Convert Cartesian XYZ to a set of OBInternalCoord coordinates.">CartesianToInternal</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00705"></a>00705   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4" title="Convert set of OBInternalCoord coordinates into Cartesian XYZ.">InternalToCartesian</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00706"></a>00706   <span class="comment">// Replace the last extension in str with a new one (docs in obutil.cpp)</span>
<a name="l00707"></a>00707   OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#ac1c62bdae6cf7a9195c470e7d0e29883" title="Utility function: replace the last extension in string &amp;src with new extension char *ext...">NewExtension</a>(std::string&amp;,<span class="keywordtype">char</span>*);
<a name="l00708"></a>00708 
<a name="l00709"></a>00709   <span class="comment">//global definitions</span>
<a name="l00711"></a><a class="code" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">00711</a> <span class="comment"></span>  EXTERN  <a class="code" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a>   <a class="code" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418" title="Global OBElementTable for element properties.">etab</a>;
<a name="l00714"></a><a class="code" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">00714</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table.">OBTypeTable</a>      <a class="code" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>;
<a name="l00716"></a><a class="code" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">00716</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses.">OBIsotopeTable</a>   <a class="code" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70" title="Global OBIsotopeTable for isotope properties.">isotab</a>;
<a name="l00718"></a><a class="code" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">00718</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds.">OBAromaticTyper</a>  <a class="code" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd" title="Global OBAromaticTyper for detecting aromatic atoms and bonds.">aromtyper</a>;
<a name="l00721"></a><a class="code" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">00721</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>      <a class="code" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">atomtyper</a>;
<a name="l00723"></a><a class="code" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">00723</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a>   <a class="code" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131" title="Global OBChainsParser for detecting macromolecular chains and residues.">chainsparser</a>;
<a name="l00725"></a>00725   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00727"></a><a class="code" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">00727</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files).">OBResidueData</a>    <a class="code" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7" title="Global OBResidueData biomolecule residue database.">resdat</a>;
<a name="l00728"></a>00728 
<a name="l00730"></a><a class="code" href="namespaceOpenBabel_1_1detail.shtml">00730</a>   <span class="keyword">namespace </span>detail {
<a name="l00733"></a>00733     <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> size = sizeof(T)&gt;
<a name="l00734"></a><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml">00734</a>     <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml" title="a C++ template to return the maximum value of a type (e.g., int)">max_value</a>
<a name="l00735"></a>00735     {
<a name="l00736"></a><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml#ac7d461ddec7ac180a645b11e023314a8">00736</a>       <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a> <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml#ac7d461ddec7ac180a645b11e023314a8">result</a> = (<span class="keyword">static_cast&lt;</span><a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a><span class="keyword">&gt;</span>(0xFF) &lt;&lt; (size-1)*8) + <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml" title="a C++ template to return the maximum value of a type (e.g., int)">max_value&lt;T, size-1&gt;::result</a>;
<a name="l00737"></a>00737     };
<a name="l00738"></a>00738 
<a name="l00740"></a>00740     <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00741"></a><a class="code" href="structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.shtml">00741</a>     <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml" title="a C++ template to return the maximum value of a type (e.g., int)">max_value</a>&lt;<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a>, 0&gt;
<a name="l00742"></a>00742     {
<a name="l00743"></a><a class="code" href="structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.shtml#ac7d461ddec7ac180a645b11e023314a8">00743</a>       <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a> <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml#ac7d461ddec7ac180a645b11e023314a8">result</a> = 0;
<a name="l00744"></a>00744     };
<a name="l00745"></a>00745   }
<a name="l00746"></a>00746 
<a name="l00747"></a>00747   <span class="comment">// No unique id</span>
<a name="l00748"></a><a class="code" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">00748</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">NoId</a> = <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml" title="a C++ template to return the maximum value of a type (e.g., int)">detail::max_value&lt;unsigned long&gt;::result</a>;
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <span class="comment">//Utility Macros</span>
<a name="l00751"></a>00751 
<a name="l00752"></a>00752 <span class="preprocessor">#ifndef BUFF_SIZE</span>
<a name="l00753"></a><a class="code" href="mol_8h.shtml#a6c7cd32e1bac137f05e4a752b4ad10af">00753</a> <span class="preprocessor"></span><span class="preprocessor">#define BUFF_SIZE 32768</span>
<a name="l00754"></a>00754 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00755"></a>00755 <span class="preprocessor"></span>
<a name="l00756"></a>00756 <span class="preprocessor">#ifndef EQ</span>
<a name="l00757"></a><a class="code" href="mol_8h.shtml#ac07acfbb082b04f5bea72998c8976b3c">00757</a> <span class="preprocessor"></span><span class="preprocessor">#define EQ(a,b) (!strcmp((a), (b)))</span>
<a name="l00758"></a>00758 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00759"></a>00759 <span class="preprocessor"></span>
<a name="l00760"></a>00760 <span class="preprocessor">#ifndef EQn</span>
<a name="l00761"></a><a class="code" href="mol_8h.shtml#aff7047a291906910f63dcfc17c88ed12">00761</a> <span class="preprocessor"></span><span class="preprocessor">#define EQn(a,b,n) (!strncmp((a), (b), (n)))</span>
<a name="l00762"></a>00762 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00763"></a>00763 <span class="preprocessor"></span>
<a name="l00764"></a>00764 <span class="preprocessor">#ifndef SQUARE</span>
<a name="l00765"></a><a class="code" href="mol_8h.shtml#aa1cf70a99e21bc2032e8867c6cafbb43">00765</a> <span class="preprocessor"></span><span class="preprocessor">#define SQUARE(x) ((x)*(x))</span>
<a name="l00766"></a>00766 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00767"></a>00767 <span class="preprocessor"></span>
<a name="l00768"></a>00768 <span class="preprocessor">#ifndef IsUnsatType</span>
<a name="l00769"></a><a class="code" href="mol_8h.shtml#ae7364e14af885f05220a63486ca6d516">00769</a> <span class="preprocessor"></span><span class="preprocessor">#define IsUnsatType(x)  (EQ(x,&quot;Car&quot;) || EQ(x,&quot;C2&quot;) || EQ(x,&quot;Sox&quot;) || EQ(x,&quot;Sac&quot;) || EQ(x,&quot;Pac&quot;) || EQ(x,&quot;So2&quot;))</span>
<a name="l00770"></a>00770 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00771"></a>00771 <span class="preprocessor"></span>
<a name="l00772"></a>00772 <span class="preprocessor">#ifndef __KCC</span>
<a name="l00773"></a>00773 <span class="preprocessor"></span>  <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span>
<a name="l00774"></a>00774   {
<a name="l00775"></a>00775     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00776"></a>00776     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00777"></a>00777     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00778"></a>00778     OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00779"></a>00779   }
<a name="l00780"></a>00780 <span class="preprocessor">#else</span>
<a name="l00781"></a>00781 <span class="preprocessor"></span>  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00782"></a>00782   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00783"></a>00783   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00784"></a>00784   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00785"></a>00785 <span class="preprocessor">#endif // __KCC</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span>
<a name="l00787"></a>00787 <span class="comment">//  extern OBMol* (*CreateMolecule) (void);</span>
<a name="l00788"></a>00788 
<a name="l00789"></a>00789 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00790"></a>00790 
<a name="l00791"></a>00791 <span class="preprocessor">#endif // OB_MOL_H</span>
<a name="l00792"></a>00792 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:07 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
