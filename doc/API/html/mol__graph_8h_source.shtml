<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: mol_graph.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>mol_graph.h</h1>  </div>
</div>
<div class="contents">
<a href="mol__graph_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">mol_graph.h - interface with Boost Graph Library.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Gerde Menche</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef MOL_GRAPH_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define MOL_GRAPH_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;boost/graph/graph_traits.hpp&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;boost/shared_ptr.hpp&gt;</span> <span class="comment">// OBAtomMap, OBBondMap</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;boost/property_map.hpp&gt;</span> <span class="comment">// OBAtomMap, OBBondMap</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;boost/graph/visitors.hpp&gt;</span> <span class="comment">// functor_caller, recorder</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include&quot;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a><a class="code" href="namespaceboost.shtml">00029</a> <span class="keyword">namespace </span>boost <span class="comment">// cannot specialize boost::graph_traits outside namespace</span>
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031    <span class="comment">//  There is a bunch of functions in the BGL modifying the structure </span>
<a name="l00032"></a>00032    <span class="comment">//  of the graph -- like inserting or deleting vertices or edges. None of </span>
<a name="l00033"></a>00033    <span class="comment">//  these will be implemented here.</span>
<a name="l00034"></a>00034 
<a name="l00035"></a><a class="code" href="structboost_1_1obmol__traversal__tag.shtml">00035</a>   <span class="keyword">struct </span><a class="code" href="structboost_1_1obmol__traversal__tag.shtml">obmol_traversal_tag</a> :
<a name="l00036"></a>00036 
<a name="l00037"></a>00037    <span class="comment">//  For the purpose of the &quot;tag classes&quot; and the ideas behind design </span>
<a name="l00038"></a>00038    <span class="comment">//  and implementation of the Boost Graph Library see </span>
<a name="l00039"></a>00039    <span class="comment">//  The Boost Graph Library User and Reference Manual (TBGL) </span>
<a name="l00040"></a>00040    <span class="comment">//  by Siek, Lee and Lumsdaine or</span>
<a name="l00041"></a>00041    <span class="comment">//  www.boost.org/libs/graph/doc/table_of_contents.html </span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keyword">public</span> <span class="keyword">virtual</span> incidence_graph_tag, 
<a name="l00044"></a>00044     <span class="keyword">public</span> <span class="keyword">virtual</span> edge_list_graph_tag,
<a name="l00045"></a>00045     <span class="keyword">public</span> <span class="keyword">virtual</span> vertex_list_graph_tag {};
<a name="l00046"></a>00046 
<a name="l00047"></a>00047   <span class="keyword">template</span>&lt;&gt;
<a name="l00048"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml">00048</a>   <span class="keyword">struct </span>graph_traits&lt; OpenBabel::OBMol &gt; 
<a name="l00049"></a>00049   {
<a name="l00050"></a>00050 
<a name="l00051"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a6e425e11b3dc82ffb565b39cbaee9539">00051</a>     <span class="keyword">typedef</span> <a class="code" href="structboost_1_1obmol__traversal__tag.shtml">obmol_traversal_tag</a>  <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a6e425e11b3dc82ffb565b39cbaee9539">traversal_category</a>;
<a name="l00052"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a01bafa5a20440a01314f98a2574e2501">00052</a>     <span class="keyword">typedef</span> undirected_tag       <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a01bafa5a20440a01314f98a2574e2501">directed_category</a>;
<a name="l00053"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a9768291729e732407c11e34c73aec80e">00053</a>     <span class="keyword">typedef</span> disallow_parallel_edge_tag <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a9768291729e732407c11e34c73aec80e">edge_parallel_category</a>;
<a name="l00054"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">00054</a>     <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>*   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">vertex_descriptor</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a29ec85e3123ff3f4780812a927b5ef4e">00056</a>     <span class="keyword">typedef</span> <span class="keywordtype">int</span>   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a29ec85e3123ff3f4780812a927b5ef4e">vertices_size_type</a>;
<a name="l00057"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#ab65cf9f2b147e8a895f4a3a4eb61c10f">00057</a>     <span class="keyword">typedef</span> <span class="keywordtype">int</span>   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#ab65cf9f2b147e8a895f4a3a4eb61c10f">edges_size_type</a>;
<a name="l00058"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a06834bd707d5980bf5beb5474efa10fd">00058</a>     <span class="keyword">typedef</span> <span class="keywordtype">int</span>   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a06834bd707d5980bf5beb5474efa10fd">degree_size_type</a>;
<a name="l00059"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a3921e56d1e565bfa77e24c6d48f60b27">00059</a>     <span class="keyword">typedef</span> <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OpenBabel::OBAtomIterator</a>  <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a3921e56d1e565bfa77e24c6d48f60b27">vertex_iterator</a>;
<a name="l00060"></a><a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1f5bda8c33ec96e462b536e971740286">00060</a>     <span class="keyword">typedef</span> <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OpenBabel::OBBondIterator</a>  <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1f5bda8c33ec96e462b536e971740286">edge_iterator</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml">00062</a>     <span class="keyword">class </span>edge_descriptor
<a name="l00063"></a>00063     {
<a name="l00064"></a>00064         <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>* bond;
<a name="l00065"></a>00065         <span class="keywordtype">bool</span> begin_is_source; <span class="comment">// a dereferenced out_edge_iterator</span>
<a name="l00066"></a>00066                               <span class="comment">// is required to know its source and target</span>
<a name="l00067"></a>00067                               <span class="comment">// vertex, so we keep track in a bool variable </span>
<a name="l00068"></a>00068       <span class="keyword">public</span>:
<a name="l00069"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#acfc662ae04836df8dc73c25702edae50">00069</a>         edge_descriptor( <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>* a = 0, <span class="keywordtype">bool</span> b = <span class="keyword">true</span> )
<a name="l00070"></a>00070         :  bond(a), begin_is_source(b) {}
<a name="l00071"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#a0e096c0aa6427b2a3976fe61349b6cb1">00071</a>         <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>* <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#a0e096c0aa6427b2a3976fe61349b6cb1">operator-&gt;</a>() { <span class="keywordflow">return</span> bond; }
<a name="l00072"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#ac2052e67081f11b6b22073bf6c876b55">00072</a>         <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>&amp; <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#ac2052e67081f11b6b22073bf6c876b55">operator*</a>()  { <span class="keywordflow">return</span> *bond; }
<a name="l00073"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#a53b11b3f8a1394f8b745640c5fd596eb">00073</a>         <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">vertex_descriptor</a> <a class="code" href="namespaceboost.shtml#a1e6fb4d93d571972f3d57d34e56c49bf">source</a>()     
<a name="l00074"></a>00074         { 
<a name="l00075"></a>00075             <span class="keywordflow">if</span> ( begin_is_source ) <span class="keywordflow">return</span> bond-&gt;GetBeginAtom();
<a name="l00076"></a>00076             <span class="keywordflow">return</span> bond-&gt;GetEndAtom();
<a name="l00077"></a>00077         }
<a name="l00078"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#ae5d379ca092324b8a9b3bd1a8fb658c0">00078</a>         <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">vertex_descriptor</a> <a class="code" href="namespaceboost.shtml#a62d49babf757d77ceae545252c6f31b3">target</a>()     
<a name="l00079"></a>00079         { 
<a name="l00080"></a>00080             <span class="keywordflow">if</span> ( begin_is_source ) <span class="keywordflow">return</span> bond-&gt;GetEndAtom();
<a name="l00081"></a>00081             <span class="keywordflow">return</span> bond-&gt;GetBeginAtom();
<a name="l00082"></a>00082         }
<a name="l00083"></a>00083         <span class="comment">// this function is to hide the edge_descriptor class</span>
<a name="l00084"></a>00084         <span class="comment">// from users of the obmol BGL interface</span>
<a name="l00085"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1edge__descriptor.shtml#ab494ea88713b18842e6e6e5b4213a55b">00085</a>         operator OpenBabel::OBBond*()  { <span class="keywordflow">return</span> bond; } 
<a name="l00086"></a>00086     };
<a name="l00087"></a>00087 
<a name="l00088"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml">00088</a>     <span class="keyword">class </span>adjacent_iterator
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090         <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OpenBabel::OBBondIterator</a> ip_bond;
<a name="l00091"></a>00091         <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* p_atom;
<a name="l00092"></a>00092       <span class="keyword">public</span> :
<a name="l00093"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a2a41d9d5b27b3a9cd6d9918c6eddc848">00093</a>         <span class="keyword">typedef</span> std::forward_iterator_tag <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a2a41d9d5b27b3a9cd6d9918c6eddc848">iterator_category</a>;
<a name="l00094"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#aa9fd1ed702f705ac8a4264d1df7b0a76">00094</a>         <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>*  <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#aa9fd1ed702f705ac8a4264d1df7b0a76">value_type</a>;
<a name="l00095"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a17e1812ae5ba9f1250b0b66d1ba12be3">00095</a>         <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>** <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a17e1812ae5ba9f1250b0b66d1ba12be3">pointer</a>;
<a name="l00096"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a6f256f339f5efe3fa295e94c8eb219c2">00096</a>         <span class="keyword">typedef</span> OpenBabel::OBBondIterator::difference_type <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a6f256f339f5efe3fa295e94c8eb219c2">difference_type</a>;
<a name="l00097"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a3a7a8014b2f2907b5eac363c0400f73a">00097</a>         <span class="keyword">typedef</span> OpenBabel::OBBondIterator::reference       <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a3a7a8014b2f2907b5eac363c0400f73a">reference</a>;
<a name="l00098"></a>00098 
<a name="l00099"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#ad84b6e946594a5c378bfc024419ccb61">00099</a>         <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#ad84b6e946594a5c378bfc024419ccb61">adjacent_iterator</a> () {};
<a name="l00100"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a61c102a5125519e8765ff56cc3e988de">00100</a>         adjacent_iterator( <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OpenBabel::OBBondIterator</a> i, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* a ) : 
<a name="l00101"></a>00101             ip_bond(i), p_atom(a) {}
<a name="l00102"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a00731c217dfb12583e315b3c6d0b73b8">00102</a>         adjacent_iterator( <span class="keyword">const</span> adjacent_iterator&amp; i ) : 
<a name="l00103"></a>00103             ip_bond(i.ip_bond), p_atom(i.p_atom) {}
<a name="l00104"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#ab8af0e3487fe5061909f7ba9454bf252">00104</a>         adjacent_iterator&amp; <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#ab8af0e3487fe5061909f7ba9454bf252">operator++</a>() { ++ip_bond; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }
<a name="l00105"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#ad75e182f751e11ee9997f0f2c0d81370">00105</a>         adjacent_iterator  operator++(<span class="keywordtype">int</span>) 
<a name="l00106"></a>00106                { adjacent_iterator tmp(ip_bond,p_atom); ++ip_bond; <span class="keywordflow">return</span> tmp; }
<a name="l00107"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a0d1d7344311516bd5184fd55bb5b15d2">00107</a>         <span class="keywordtype">bool</span> <a class="code" href="cistrans_8h.shtml#a4407203127f1b699f87c449ddeff3ab3">operator==</a>( <span class="keyword">const</span> adjacent_iterator&amp; rhs ) 
<a name="l00108"></a>00108             { <span class="keywordflow">return</span> ip_bond == rhs.ip_bond; }
<a name="l00109"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a8b6cee94e8ad178944257ff008413c85">00109</a>         <span class="keywordtype">bool</span> <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a8b6cee94e8ad178944257ff008413c85">operator!=</a>( <span class="keyword">const</span> adjacent_iterator&amp; rhs ) { <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs); }
<a name="l00110"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a47af2b2327fc30f01a6764f2484fd75b">00110</a>         <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">vertex_descriptor</a> <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1adjacent__iterator.shtml#a47af2b2327fc30f01a6764f2484fd75b">operator*</a>() { <span class="keywordflow">return</span> (*ip_bond)-&gt;GetNbrAtom(p_atom); }
<a name="l00111"></a>00111     };
<a name="l00112"></a>00112 
<a name="l00113"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml">00113</a>     <span class="keyword">class </span>out_edge_iterator
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115         <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OpenBabel::OBBondIterator</a> ip_bond;
<a name="l00116"></a>00116         <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* p_atom; <span class="comment">// source OBAtom*</span>
<a name="l00117"></a>00117       <span class="keyword">public</span> :
<a name="l00118"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a2a41d9d5b27b3a9cd6d9918c6eddc848">00118</a>         <span class="keyword">typedef</span> std::forward_iterator_tag <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a2a41d9d5b27b3a9cd6d9918c6eddc848">iterator_category</a>;
<a name="l00119"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ae5c77e7cecb492f4d4d01b35352bc2e7">00119</a>         <span class="keyword">typedef</span> edge_descriptor <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ae5c77e7cecb492f4d4d01b35352bc2e7">value_type</a>;
<a name="l00120"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ada9bcf635c76115ff97436373e9ca23e">00120</a>         <span class="keyword">typedef</span> edge_descriptor* <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ada9bcf635c76115ff97436373e9ca23e">pointer</a>;
<a name="l00121"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a6f256f339f5efe3fa295e94c8eb219c2">00121</a>         <span class="keyword">typedef</span> OpenBabel::OBBondIterator::difference_type <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a6f256f339f5efe3fa295e94c8eb219c2">difference_type</a>;
<a name="l00122"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a3a7a8014b2f2907b5eac363c0400f73a">00122</a>         <span class="keyword">typedef</span> OpenBabel::OBBondIterator::reference       <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a3a7a8014b2f2907b5eac363c0400f73a">reference</a>;
<a name="l00123"></a>00123 
<a name="l00124"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a1894920399b0a0f412af6d24a5d36ff1">00124</a>         <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a1894920399b0a0f412af6d24a5d36ff1">out_edge_iterator</a> () {};
<a name="l00125"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ab357ca40e56357a0e021787bdc5fcc11">00125</a>         out_edge_iterator( <span class="keyword">const</span> out_edge_iterator&amp; i ) : 
<a name="l00126"></a>00126             ip_bond(i.ip_bond), p_atom(i.p_atom) {}
<a name="l00127"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a1ea83c1302ec3e11973e4af8cdbec1c6">00127</a>         out_edge_iterator( <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OpenBabel::OBBondIterator</a> i, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* a ) : 
<a name="l00128"></a>00128             ip_bond(i), p_atom(a) {}
<a name="l00129"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#aa4f0d1d667a42ea8934ce9888bcdffbc">00129</a>         out_edge_iterator&amp; <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#aa4f0d1d667a42ea8934ce9888bcdffbc">operator++</a>() { ++ip_bond; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }
<a name="l00130"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a8eeebd7a100d987f39dad75d11cd98f8">00130</a>         out_edge_iterator  operator++(<span class="keywordtype">int</span>) 
<a name="l00131"></a>00131                    { out_edge_iterator tmp(ip_bond,p_atom); ++ip_bond; <span class="keywordflow">return</span> tmp; }
<a name="l00132"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#ac4181732e682f9566868d588d9916b4c">00132</a>         <span class="keywordtype">bool</span> <a class="code" href="cistrans_8h.shtml#a4407203127f1b699f87c449ddeff3ab3">operator==</a>( <span class="keyword">const</span> out_edge_iterator&amp; rhs ) 
<a name="l00133"></a>00133             { <span class="keywordflow">return</span> ip_bond == rhs.ip_bond; }
<a name="l00134"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#afdcbe7cd9d3f23f76470f1a7c9940dfb">00134</a>         <span class="keywordtype">bool</span> <a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#afdcbe7cd9d3f23f76470f1a7c9940dfb">operator!=</a>( <span class="keyword">const</span> out_edge_iterator&amp; rhs ) { <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs); }
<a name="l00135"></a><a class="code" href="classboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4_1_1out__edge__iterator.shtml#a617fc71f78cce20ecfdca8f754c952ed">00135</a>         edge_descriptor <a class="code" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>() 
<a name="l00136"></a>00136         {
<a name="l00137"></a>00137             <span class="comment">// this is why we need to keep track of the source atom </span>
<a name="l00138"></a>00138             <span class="keywordflow">return</span> edge_descriptor(*ip_bond,(*ip_bond)-&gt;GetBeginAtom() == p_atom);
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140     };    
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   };
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   std::pair &lt; graph_traits&lt; OpenBabel::OBMol &gt;::edge_iterator,
<a name="l00145"></a>00145               <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1f5bda8c33ec96e462b536e971740286">graph_traits&lt; OpenBabel::OBMol &gt;::edge_iterator</a> &gt;
<a name="l00146"></a><a class="code" href="namespaceboost.shtml#a5fbe9071f49e5149a67aa2d5811076f4">00146</a>   <a class="code" href="namespaceboost.shtml#a5fbe9071f49e5149a67aa2d5811076f4">edges</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m )
<a name="l00147"></a>00147   { 
<a name="l00148"></a>00148       <span class="comment">// Now that cast is ugly: but m.BeginBonds() violates</span>
<a name="l00149"></a>00149       <span class="comment">// the const qualifier of the argument</span>
<a name="l00150"></a>00150       <span class="comment">// and this is the signature imposed by BGL.</span>
<a name="l00151"></a>00151       <span class="comment">// A better solution would be very welcome</span>
<a name="l00152"></a>00152       <span class="comment">// propably a ConstOBBondIterator</span>
<a name="l00153"></a>00153       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>* mol = <span class="keyword">const_cast&lt;</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>* <span class="keyword">&gt;</span>(&amp;m);
<a name="l00154"></a>00154       <span class="keywordflow">return</span> std::make_pair(mol-&gt;<a class="code" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">BeginBonds</a>(),mol-&gt;<a class="code" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">EndBonds</a>());
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   std::pair &lt; graph_traits&lt; OpenBabel::OBMol &gt;::vertex_iterator,
<a name="l00158"></a>00158               <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a3921e56d1e565bfa77e24c6d48f60b27">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_iterator</a> &gt;
<a name="l00159"></a><a class="code" href="namespaceboost.shtml#a3be3850c870892819451df66c2125050">00159</a>   <a class="code" href="namespaceboost.shtml#a3be3850c870892819451df66c2125050">vertices</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m )
<a name="l00160"></a>00160   { 
<a name="l00161"></a>00161       <span class="comment">// Now that cast is ugly: but m.BeginAtoms() violates</span>
<a name="l00162"></a>00162       <span class="comment">// the const qualifier of the argument</span>
<a name="l00163"></a>00163       <span class="comment">// and this is the signature imposed by BGL.</span>
<a name="l00164"></a>00164       <span class="comment">// A better solution would be very welcome</span>
<a name="l00165"></a>00165       <span class="comment">// propably a ConstOBAtomIterator</span>
<a name="l00166"></a>00166       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>* mol = <span class="keyword">const_cast&lt;</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>* <span class="keyword">&gt;</span>(&amp;m);
<a name="l00167"></a>00167       <span class="keywordflow">return</span> std::make_pair(mol-&gt;<a class="code" href="classOpenBabel_1_1OBMol.shtml#ae3b07b388e733d5a0e9ee9654a4411a1">BeginAtoms</a>(),mol-&gt;<a class="code" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">EndAtoms</a>()); 
<a name="l00168"></a>00168   }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   std::pair &lt; graph_traits&lt; OpenBabel::OBMol &gt;::adjacent_iterator,
<a name="l00171"></a>00171               graph_traits&lt; OpenBabel::OBMol &gt;::adjacent_iterator &gt;
<a name="l00172"></a><a class="code" href="namespaceboost.shtml#a1a382a28e53e723a68960e6d1c21bf24">00172</a>   <a class="code" href="namespaceboost.shtml#a1a382a28e53e723a68960e6d1c21bf24">adjacent_vertices</a> ( <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_descriptor</a>&amp; v,
<a name="l00173"></a>00173                       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; )
<a name="l00174"></a>00174   {
<a name="l00175"></a>00175       <span class="keywordflow">return</span> std::make_pair(
<a name="l00176"></a>00176       graph_traits&lt; OpenBabel::OBMol &gt;::adjacent_iterator(v-&gt;BeginBonds(),v),
<a name="l00177"></a>00177       graph_traits&lt; OpenBabel::OBMol &gt;::adjacent_iterator(v-&gt;EndBonds()  ,v) );
<a name="l00178"></a>00178   }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_descriptor</a>
<a name="l00181"></a><a class="code" href="namespaceboost.shtml#a1e6fb4d93d571972f3d57d34e56c49bf">00181</a>   <a class="code" href="namespaceboost.shtml#a1e6fb4d93d571972f3d57d34e56c49bf">source</a>( graph_traits&lt; OpenBabel::OBMol &gt;::edge_descriptor&amp; e,
<a name="l00182"></a>00182           <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; )
<a name="l00183"></a>00183   {
<a name="l00184"></a>00184       <span class="keywordflow">return</span> e.source();
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_descriptor</a>
<a name="l00188"></a><a class="code" href="namespaceboost.shtml#a62d49babf757d77ceae545252c6f31b3">00188</a>   <a class="code" href="namespaceboost.shtml#a62d49babf757d77ceae545252c6f31b3">target</a>( graph_traits&lt; OpenBabel::OBMol &gt;::edge_descriptor e,
<a name="l00189"></a>00189           <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; )
<a name="l00190"></a>00190   {
<a name="l00191"></a>00191       <span class="keywordflow">return</span> e.target();
<a name="l00192"></a>00192   }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   std::pair &lt; graph_traits&lt; OpenBabel::OBMol &gt;::out_edge_iterator,
<a name="l00195"></a>00195               graph_traits&lt; OpenBabel::OBMol &gt;::out_edge_iterator &gt;
<a name="l00196"></a><a class="code" href="namespaceboost.shtml#a50bd37e9b7a2a1dadf9f9bf7f7b689de">00196</a>   <a class="code" href="namespaceboost.shtml#a50bd37e9b7a2a1dadf9f9bf7f7b689de">out_edges</a> ( <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_descriptor</a> v,
<a name="l00197"></a>00197               <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; )
<a name="l00198"></a>00198   {
<a name="l00199"></a>00199       <span class="keywordflow">return</span> std::make_pair(
<a name="l00200"></a>00200       graph_traits&lt; OpenBabel::OBMol &gt;::out_edge_iterator(v-&gt;BeginBonds(),v),
<a name="l00201"></a>00201       graph_traits&lt; OpenBabel::OBMol &gt;::out_edge_iterator(v-&gt;EndBonds()  ,v) );
<a name="l00202"></a>00202   }
<a name="l00203"></a>00203 
<a name="l00204"></a><a class="code" href="namespaceboost.shtml#a8c2945c8a9efc08b2307ec410fe949d9">00204</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceboost.shtml#a8c2945c8a9efc08b2307ec410fe949d9">out_degree</a>( <a class="code" href="structboost_1_1graph__traits_3_01OpenBabel_1_1OBMol_01_4.shtml#a1455f132edaef43a41f4e10954b78fcd">graph_traits&lt; OpenBabel::OBMol &gt;::vertex_descriptor</a> v,
<a name="l00205"></a>00205                   <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; )
<a name="l00206"></a>00206   { 
<a name="l00207"></a>00207       <span class="keywordflow">return</span> v-&gt;EndBonds() - v-&gt;BeginBonds(); 
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209 
<a name="l00210"></a><a class="code" href="namespaceboost.shtml#a753bf8c63a48a0c70eb6c4f7c80eac51">00210</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceboost.shtml#a753bf8c63a48a0c70eb6c4f7c80eac51">num_vertices</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m )
<a name="l00211"></a>00211   { 
<a name="l00212"></a>00212       <span class="keywordflow">return</span> m.<a class="code" href="classOpenBabel_1_1OBMol.shtml#a0c317a10161689c407f29a6fcacdb852">NumAtoms</a>(); 
<a name="l00213"></a>00213   }
<a name="l00214"></a>00214 
<a name="l00215"></a><a class="code" href="namespaceboost.shtml#a958d10db6c61774f9ca506f2d403a9a7">00215</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceboost.shtml#a958d10db6c61774f9ca506f2d403a9a7">num_edges</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m )
<a name="l00216"></a>00216   { 
<a name="l00217"></a>00217       <span class="keywordflow">return</span> m.<a class="code" href="classOpenBabel_1_1OBMol.shtml#a115132ab8bd21607d00d61bc1ba5cc16">NumBonds</a>(); 
<a name="l00218"></a>00218   }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 } <span class="comment">// namespace</span>
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 <span class="comment">// When putting these classes inside the OpenBabel namespace </span>
<a name="l00223"></a>00223 <span class="comment">// the put and get functions will not work with the BGL algorithms.</span>
<a name="l00224"></a>00224 <span class="comment">// Don&#39;t know why.</span>
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="keyword">template</span>&lt; <span class="keyword">class</span> value &gt;
<a name="l00227"></a><a class="code" href="classOBAtomMap.shtml">00227</a> <span class="keyword">class </span><a class="code" href="classOBAtomMap.shtml">OBAtomMap</a> 
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229   <span class="keyword">public</span> :
<a name="l00230"></a>00230 
<a name="l00231"></a><a class="code" href="classOBAtomMap.shtml#aa6662924296656f0072952b529415cff">00231</a>     <span class="keyword">typedef</span> value <a class="code" href="classOBAtomMap.shtml#aa6662924296656f0072952b529415cff">value_type</a>;
<a name="l00232"></a><a class="code" href="classOBAtomMap.shtml#a12ba9642288d55cfd5ea2f98adfb24b3">00232</a>     <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* <a class="code" href="classOBAtomMap.shtml#a12ba9642288d55cfd5ea2f98adfb24b3">key_type</a>;
<a name="l00233"></a><a class="code" href="classOBAtomMap.shtml#abe8933d436779a43cb5c1896ff5f2918">00233</a>     <span class="keyword">typedef</span> <a class="code" href="classOBAtomMap.shtml#aa6662924296656f0072952b529415cff">value_type</a>&amp; <a class="code" href="classOBAtomMap.shtml#abe8933d436779a43cb5c1896ff5f2918">reference</a>;
<a name="l00234"></a><a class="code" href="classOBAtomMap.shtml#a85e286fd91d0e3aa63c9eea82f750a51">00234</a>     <span class="keyword">typedef</span> boost::read_write_property_map_tag <a class="code" href="classOBAtomMap.shtml#a85e286fd91d0e3aa63c9eea82f750a51">category</a>;
<a name="l00235"></a>00235  
<a name="l00236"></a><a class="code" href="classOBAtomMap.shtml#aaceba84be27b15fcb6998cf75282fe9a">00236</a>     <a class="code" href="classOBAtomMap.shtml#aaceba84be27b15fcb6998cf75282fe9a">OBAtomMap</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m ) :
<a name="l00237"></a>00237         _values( new std::vector&lt; value &gt;( m.NumAtoms() ) )
<a name="l00238"></a>00238     {}
<a name="l00239"></a><a class="code" href="classOBAtomMap.shtml#a1aa5674fb623b209b03df349d6b541e7">00239</a>     <a class="code" href="classOBAtomMap.shtml#aaceba84be27b15fcb6998cf75282fe9a">OBAtomMap</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m, <span class="keyword">const</span> value v ) :
<a name="l00240"></a>00240         _values( new std::vector&lt; value &gt;( m.NumAtoms(),v ) )
<a name="l00241"></a>00241     {}
<a name="l00242"></a>00242 
<a name="l00243"></a><a class="code" href="classOBAtomMap.shtml#ae42cf48f96683d72deebedbbd142e2a8">00243</a>     <a class="code" href="classOBAtomMap.shtml#abe8933d436779a43cb5c1896ff5f2918">reference</a> <a class="code" href="classOBAtomMap.shtml#ae42cf48f96683d72deebedbbd142e2a8">operator[]</a>( <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OpenBabel::OBAtom</a>* a ) 
<a name="l00244"></a>00244         { <span class="keywordflow">return</span> (*_values)[ a-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>()-1 ]; }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246   <span class="keyword">private</span> :
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     boost::shared_ptr&lt; std::vector&lt; value_type &gt; &gt; _values;
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 };
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="keyword">template</span>&lt; <span class="keyword">class</span> value &gt;
<a name="l00253"></a><a class="code" href="classOBBondMap.shtml">00253</a> <span class="keyword">class </span><a class="code" href="classOBBondMap.shtml">OBBondMap</a> 
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255   <span class="keyword">public</span> :
<a name="l00256"></a>00256 
<a name="l00257"></a><a class="code" href="classOBBondMap.shtml#aa6662924296656f0072952b529415cff">00257</a>     <span class="keyword">typedef</span> value <a class="code" href="classOBBondMap.shtml#aa6662924296656f0072952b529415cff">value_type</a>;
<a name="l00258"></a><a class="code" href="classOBBondMap.shtml#a7f0ffa420e21b289835f7827dd300a2c">00258</a>     <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>* <a class="code" href="classOBBondMap.shtml#a7f0ffa420e21b289835f7827dd300a2c">key_type</a>;
<a name="l00259"></a><a class="code" href="classOBBondMap.shtml#abe8933d436779a43cb5c1896ff5f2918">00259</a>     <span class="keyword">typedef</span> <a class="code" href="classOBBondMap.shtml#aa6662924296656f0072952b529415cff">value_type</a>&amp; <a class="code" href="classOBBondMap.shtml#abe8933d436779a43cb5c1896ff5f2918">reference</a>;
<a name="l00260"></a><a class="code" href="classOBBondMap.shtml#a85e286fd91d0e3aa63c9eea82f750a51">00260</a>     <span class="keyword">typedef</span> boost::read_write_property_map_tag <a class="code" href="classOBBondMap.shtml#a85e286fd91d0e3aa63c9eea82f750a51">category</a>;
<a name="l00261"></a>00261  
<a name="l00262"></a><a class="code" href="classOBBondMap.shtml#a97ad51470d78bb5ed42b2a7ba4d61baf">00262</a>     <a class="code" href="classOBBondMap.shtml#a97ad51470d78bb5ed42b2a7ba4d61baf">OBBondMap</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m ) :
<a name="l00263"></a>00263         _values( new std::vector&lt; value &gt;( m.NumBonds() ) )
<a name="l00264"></a>00264     {}
<a name="l00265"></a><a class="code" href="classOBBondMap.shtml#a207a6f8e4bb0ef6472acd0be630d2deb">00265</a>     <a class="code" href="classOBBondMap.shtml#a97ad51470d78bb5ed42b2a7ba4d61baf">OBBondMap</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OpenBabel::OBMol</a>&amp; m, <span class="keyword">const</span> value v ) :
<a name="l00266"></a>00266         _values( new std::vector&lt; value &gt;( m.NumBonds(),v ) )
<a name="l00267"></a>00267     {}
<a name="l00268"></a>00268 
<a name="l00269"></a><a class="code" href="classOBBondMap.shtml#ad83c0a40255f37f4d069ce2cfb2fcf16">00269</a>     <a class="code" href="classOBBondMap.shtml#abe8933d436779a43cb5c1896ff5f2918">reference</a> <a class="code" href="classOBBondMap.shtml#ad83c0a40255f37f4d069ce2cfb2fcf16">operator[]</a>( <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OpenBabel::OBBond</a>* b ) 
<a name="l00270"></a>00270         { <span class="keywordflow">return</span> (*_values)[ b-&gt;<a class="code" href="classOpenBabel_1_1OBBond.shtml#a80892a7fdfc7180a85160279c1186952">GetIdx</a>() ]; }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272   <span class="keyword">private</span> :
<a name="l00273"></a>00273 
<a name="l00274"></a>00274     boost::shared_ptr&lt; std::vector&lt; value_type &gt; &gt; _values;
<a name="l00275"></a>00275 };
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="keyword">template</span>&lt; <span class="keyword">class</span> map_t &gt;
<a name="l00278"></a><a class="code" href="mol__graph_8h.shtml#a58e6bce2c52d2ad4752c898e6c62b502">00278</a> <span class="keywordtype">void</span> <a class="code" href="mol__graph_8h.shtml#a58e6bce2c52d2ad4752c898e6c62b502">put</a>( map_t&amp; map, <span class="keyword">typename</span> map_t::key_type key,  <span class="keyword">typename</span> map_t::value_type value )
<a name="l00279"></a>00279     { map[key] = value; }
<a name="l00280"></a>00280  
<a name="l00281"></a>00281 <span class="keyword">template</span>&lt; <span class="keyword">class</span> map_t &gt;
<a name="l00282"></a><a class="code" href="mol__graph_8h.shtml#aaad112baafceef0f031f0ee9f2c14ee7">00282</a> <span class="keyword">typename</span> map_t::value_type <span class="keyword">get</span>( map_t&amp; map, <span class="keyword">typename</span> map_t::key_type key )
<a name="l00283"></a>00283     { <span class="keywordflow">return</span> map[key]; }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="keyword">namespace </span>boost {
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="keyword">template</span> &lt;<span class="keyword">class</span> functor, <span class="keyword">class</span> Tag &gt;
<a name="l00288"></a><a class="code" href="structboost_1_1functor__caller.shtml">00288</a> <span class="keyword">struct </span><a class="code" href="structboost_1_1functor__caller.shtml">functor_caller</a>
<a name="l00289"></a>00289     : <span class="keyword">public</span> base_visitor&lt; functor_caller &lt; functor, Tag&gt; &gt;
<a name="l00290"></a>00290 {
<a name="l00291"></a><a class="code" href="structboost_1_1functor__caller.shtml#a1d8cf46790f96c8aeb3a2a0f039e7187">00291</a>     <span class="keyword">typedef</span> Tag <a class="code" href="structboost_1_1functor__caller.shtml#a1d8cf46790f96c8aeb3a2a0f039e7187">event_filter</a>;
<a name="l00292"></a><a class="code" href="structboost_1_1functor__caller.shtml#a93b03084d17ef7ed0b565090f009694b">00292</a>     <a class="code" href="structboost_1_1functor__caller.shtml#a93b03084d17ef7ed0b565090f009694b">functor_caller</a>(functor f) : <a class="code" href="structboost_1_1functor__caller.shtml#afdd17ce3e5f3106e05e11bc01efff726">m_func</a>(f) { }
<a name="l00293"></a>00293     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Graph&gt;
<a name="l00294"></a><a class="code" href="structboost_1_1functor__caller.shtml#ab0f9da2a8b286824bf130b313bea3895">00294</a>     <span class="keywordtype">void</span> <a class="code" href="structboost_1_1functor__caller.shtml#ab0f9da2a8b286824bf130b313bea3895">operator()</a>(<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a> t, <span class="keyword">const</span> Graph&amp; g) {
<a name="l00295"></a>00295       <a class="code" href="structboost_1_1functor__caller.shtml#afdd17ce3e5f3106e05e11bc01efff726">m_func</a>.operator()(t);
<a name="l00296"></a>00296     }
<a name="l00297"></a><a class="code" href="structboost_1_1functor__caller.shtml#afdd17ce3e5f3106e05e11bc01efff726">00297</a>     functor <a class="code" href="structboost_1_1functor__caller.shtml#afdd17ce3e5f3106e05e11bc01efff726">m_func</a>;
<a name="l00298"></a>00298 };
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="keyword">template</span> &lt; <span class="keyword">class</span> functor, <span class="keyword">class</span> Tag &gt;
<a name="l00301"></a>00301 <a class="code" href="structboost_1_1functor__caller.shtml">functor_caller&lt; functor, Tag &gt;</a>
<a name="l00302"></a><a class="code" href="namespaceboost.shtml#a9e4768e292a70e45b392dffed26b7635">00302</a> <a class="code" href="namespaceboost.shtml#a9e4768e292a70e45b392dffed26b7635">call_functor</a>(functor func, Tag) {
<a name="l00303"></a>00303     <span class="keywordflow">return</span> <a class="code" href="structboost_1_1functor__caller.shtml">functor_caller&lt; functor, Tag &gt;</a> (func);
<a name="l00304"></a>00304 }
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="keyword">template</span> &lt;<span class="keyword">class</span> output_iterator, <span class="keyword">class</span> Tag &gt;
<a name="l00307"></a><a class="code" href="structboost_1_1recorder.shtml">00307</a> <span class="keyword">struct </span><a class="code" href="structboost_1_1recorder.shtml">recorder</a>
<a name="l00308"></a>00308     : <span class="keyword">public</span> base_visitor&lt; recorder &lt; output_iterator, Tag&gt; &gt;
<a name="l00309"></a>00309 {
<a name="l00310"></a><a class="code" href="structboost_1_1recorder.shtml#a1d8cf46790f96c8aeb3a2a0f039e7187">00310</a>     <span class="keyword">typedef</span> Tag <a class="code" href="structboost_1_1recorder.shtml#a1d8cf46790f96c8aeb3a2a0f039e7187">event_filter</a>;
<a name="l00311"></a><a class="code" href="structboost_1_1recorder.shtml#ae84a5e7219c897c28b506fca874ed35c">00311</a>     <a class="code" href="structboost_1_1recorder.shtml#ae84a5e7219c897c28b506fca874ed35c">recorder</a>(output_iterator o) : <a class="code" href="structboost_1_1recorder.shtml#ac0bd084b7be6a67302771c48c519e664">m_output</a>(o) { }
<a name="l00312"></a>00312     <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Graph&gt;
<a name="l00313"></a><a class="code" href="structboost_1_1recorder.shtml#ab0f9da2a8b286824bf130b313bea3895">00313</a>     <span class="keywordtype">void</span> <a class="code" href="structboost_1_1recorder.shtml#ab0f9da2a8b286824bf130b313bea3895">operator()</a>(<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a> t, <span class="keyword">const</span> Graph&amp; g) {
<a name="l00314"></a>00314       <a class="code" href="structboost_1_1recorder.shtml#ac0bd084b7be6a67302771c48c519e664">m_output</a> = t;
<a name="l00315"></a>00315     }
<a name="l00316"></a><a class="code" href="structboost_1_1recorder.shtml#ac0bd084b7be6a67302771c48c519e664">00316</a>     output_iterator <a class="code" href="structboost_1_1recorder.shtml#ac0bd084b7be6a67302771c48c519e664">m_output</a>;
<a name="l00317"></a>00317 };
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="keyword">template</span> &lt;<span class="keyword">class</span> output_iterator, <span class="keyword">class</span> Tag &gt;
<a name="l00320"></a><a class="code" href="namespaceboost.shtml#a66f101c46dfde4ec8b32a70a4d023ac6">00320</a> <a class="code" href="structboost_1_1recorder.shtml">recorder&lt; output_iterator, Tag &gt;</a> <a class="code" href="namespaceboost.shtml#a66f101c46dfde4ec8b32a70a4d023ac6">record</a>(output_iterator out, Tag) {
<a name="l00321"></a>00321     <span class="keywordflow">return</span> <a class="code" href="structboost_1_1recorder.shtml">recorder&lt; output_iterator, Tag &gt;</a> (out);
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 } <span class="comment">// namespace</span>
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 <span class="preprocessor">#endif // MOL_GRAPH_H</span>
</pre></div></div>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Oct 22 2010 14:36:01 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.2.
</div>

</body>
</html>
