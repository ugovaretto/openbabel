<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OpenBabel Namespace Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li class="current"><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.shtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.shtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">OpenBabel Namespace Reference</div>  </div>
</div>
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">OBGenericDataType</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1detail.shtml">detail</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBAminoAcidProperty.shtml">OBAminoAcidProperty</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueAtomProperty.shtml">OBResidueAtomProperty</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueIndex.shtml">OBResidueIndex</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueProperty.shtml">OBResidueProperty</a></td></tr>
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml">AliasData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate atoms as aliases for larger functional groups.  <a href="classOpenBabel_1_1AliasData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Atom class.  <a href="classOpenBabel_1_1OBAtom.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml">OBAtomClassData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle atom classes in reaction SMILES/SMIRKS.  <a href="classOpenBabel_1_1OBAtomClassData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for generic data.  <a href="classOpenBabel_1_1OBGenericData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base Class.  <a href="classOpenBabel_1_1OBBase.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A speed-optimized vector of bits.  <a href="classOpenBabel_1_1OBBitVec.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bond class.  <a href="classOpenBabel_1_1OBBond.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns bond types for file formats without bond information.  <a href="classOpenBabel_1_1OBBondTyper.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBuilder.shtml">OBBuilder</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to build 3D structures.  <a href="classOpenBabel_1_1OBBuilder.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Perceives peptide or nucleotide chains and residues in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBChainsParser.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml">OBChargeModel</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Atomic partial charge models.  <a href="classOpenBabel_1_1OBChargeModel.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerFilter.shtml">OBConformerFilter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface used by <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml" title="Conformer searching using genetic algorithm. See Conformer Searching.">OBConformerSearch</a> for filtering conformers.  <a href="classOpenBabel_1_1OBConformerFilter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerFilters.shtml">OBConformerFilters</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for combining <a class="el" href="classOpenBabel_1_1OBConformerFilter.shtml" title="Interface used by OBConformerSearch for filtering conformers.">OBConformerFilter</a> objects.  <a href="classOpenBabel_1_1OBConformerFilters.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml">OBStericConformerFilter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A steric conformer filter class.  <a href="classOpenBabel_1_1OBStericConformerFilter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerScore.shtml">OBConformerScore</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface used by <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml" title="Conformer searching using genetic algorithm. See Conformer Searching.">OBConformerSearch</a> for scoring conformers.  <a href="classOpenBabel_1_1OBConformerScore.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRMSDConformerScore.shtml">OBRMSDConformerScore</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A RMSD conformer scoring class.  <a href="classOpenBabel_1_1OBRMSDConformerScore.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml">OBEnergyConformerScore</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A lowest energy conformer scoring class.  <a href="classOpenBabel_1_1OBEnergyConformerScore.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml">OBConformerSearch</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Conformer searching using genetic algorithm. See <a class="el" href="group__conformer.shtml">Conformer Searching</a>.  <a href="classOpenBabel_1_1OBConformerSearch.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base data table class, handles reading data files.  <a href="classOpenBabel_1_1OBGlobalDataBase.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElement.shtml">OBElement</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Individual element data type.  <a href="classOpenBabel_1_1OBElement.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Periodic Table of the Elements.  <a href="classOpenBabel_1_1OBElementTable.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Table of atomic isotope masses.  <a href="classOpenBabel_1_1OBIsotopeTable.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Atom Type Translation Table.  <a href="classOpenBabel_1_1OBTypeTable.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Table of common biomolecule residues (for PDB or other files).  <a href="classOpenBabel_1_1OBResidueData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml">OBDescriptor</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for molecular properties, descriptors or features.  <a href="classOpenBabel_1_1OBDescriptor.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The base class for fingerprints.  <a href="classOpenBabel_1_1OBFingerprint.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Header for fastsearch index file.  <a href="structOpenBabel_1_1FptIndexHeader.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure of fastsearch index files.  <a href="structOpenBabel_1_1FptIndex.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearch.shtml">FastSearch</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to search fingerprint index files.  <a href="classOpenBabel_1_1FastSearch.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to prepare fingerprint index files See <a class="el" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files.">FastSearch</a> class for details.  <a href="classOpenBabel_1_1FastSearchIndexer.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1LineSearchType.shtml">LineSearchType</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of line search to be used for optimization -- simple or Newton numeric.  <a href="structOpenBabel_1_1LineSearchType.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to hold forcefield parameters.  <a href="classOpenBabel_1_1OBFFParameter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation2.shtml">OBFFCalculation2</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to hold energy and gradient calculations on specific force fields.  <a href="classOpenBabel_1_1OBFFCalculation2.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation3.shtml">OBFFCalculation3</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to hold energy and gradient calculations on specific force fields.  <a href="classOpenBabel_1_1OBFFCalculation3.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation4.shtml">OBFFCalculation4</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to hold energy and gradient calculations on specific force fields.  <a href="classOpenBabel_1_1OBFFCalculation4.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFConstraint.shtml">OBFFConstraint</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to hold constraints.  <a href="classOpenBabel_1_1OBFFConstraint.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> to handle constraints.  <a href="classOpenBabel_1_1OBFFConstraints.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for molecular mechanics force fields.  <a href="classOpenBabel_1_1OBForceField.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for file formats.  <a href="classOpenBabel_1_1OBFormat.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBCommentData.shtml">OBCommentData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store a comment string (can be multiple lines long)  <a href="classOpenBabel_1_1OBCommentData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBond.shtml">OBExternalBond</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store information on an external bond (e.g., SMILES fragments)  <a href="classOpenBabel_1_1OBExternalBond.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml">OBExternalBondData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store information on external bonds (e.g., in SMILES fragments)  <a href="classOpenBabel_1_1OBExternalBondData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPairData.shtml">OBPairData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store arbitrary text attribute/value relationships.  <a href="classOpenBabel_1_1OBPairData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store arbitrary attribute/value relationsips of any type.  <a href="classOpenBabel_1_1OBPairTemplate.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSetData.shtml">OBSetData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store arbitrary attribute/set relationships. Should be used to store a set of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> based on an attribute.  <a href="classOpenBabel_1_1OBSetData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml">OBVirtualBond</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to temporarily store bonds that reference an atom that has not yet been added to a molecule.  <a href="classOpenBabel_1_1OBVirtualBond.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store the SSSR set (filled in by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775" title="Implements blue-obelisk:findSmallestSetOfSmallestRings.">OBMol::GetSSSR()</a>)  <a href="classOpenBabel_1_1OBRingData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBUnitCell.shtml">OBUnitCell</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used for storing information about periodic boundary conditions with conversion to/from translation vectors and (a, b, c, alpha, beta, gamma)  <a href="classOpenBabel_1_1OBUnitCell.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerData.shtml">OBConformerData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold data on conformers or geometry optimization steps.  <a href="classOpenBabel_1_1OBConformerData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml">OBSymmetryData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold the point-group and/or space-group symmetry.  <a href="classOpenBabel_1_1OBSymmetryData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsion.shtml">OBTorsion</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold the torsion data for a single rotatable bond and all four atoms around it.  <a href="classOpenBabel_1_1OBTorsion.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold torsions as generic data for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBTorsionData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngle.shtml">OBAngle</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold the 3 atoms in an angle and the angle itself.  <a href="classOpenBabel_1_1OBAngle.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngleData.shtml">OBAngleData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold all angles in a molecule as generic data for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBAngleData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChiralData.shtml">OBChiralData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold chiral inforamtion about the atom as <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>.  <a href="classOpenBabel_1_1OBChiralData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines a map between serial numbers (e.g., in a PDB file) and <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> objects inside a molecule.  <a href="classOpenBabel_1_1OBSerialNums.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVibrationData.shtml">OBVibrationData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold the normal modes of a molecule, etc.  <a href="classOpenBabel_1_1OBVibrationData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDOSData.shtml">OBDOSData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold density of states information.  <a href="classOpenBabel_1_1OBDOSData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOrbital.shtml">OBOrbital</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store energy, occupation, and orbital symmetry of a particular orbital.  <a href="classOpenBabel_1_1OBOrbital.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOrbitalData.shtml">OBOrbitalData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold information about orbital energies.  <a href="classOpenBabel_1_1OBOrbitalData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElectronicTransitionData.shtml">OBElectronicTransitionData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold information about electronic transitions.  <a href="classOpenBabel_1_1OBElectronicTransitionData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotationData.shtml">OBRotationData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold the rotational constants and symmetry numbers.  <a href="classOpenBabel_1_1OBRotationData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVectorData.shtml">OBVectorData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold a 3D vector item (e.g., a dipole moment)  <a href="classOpenBabel_1_1OBVectorData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMatrixData.shtml">OBMatrixData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to hold a 3x3 matrix item (e.g., a quadrupole moment)  <a href="classOpenBabel_1_1OBMatrixData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphSym.shtml">OBGraphSym</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle and perceive graph symmtery for canonical numbering .  <a href="classOpenBabel_1_1OBGraphSym.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGrid.shtml">OBGrid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A base grid class.  <a href="classOpenBabel_1_1OBGrid.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle double precision floating point 3D grids (e.g., charge density around an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>)  <a href="classOpenBabel_1_1OBFloatGrid.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBProxGrid.shtml">OBProxGrid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A grid for determining the proximity of a given point to atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBProxGrid.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml">OBScoreGrid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A base class for scoring docking interactions between multiple molecules.  <a href="classOpenBabel_1_1OBScoreGrid.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGridData.shtml">OBGridData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Store values for numeric grids such as orbitals or electrostatic potential.  <a href="classOpenBabel_1_1OBGridData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle group contribution algorithms.  <a href="classOpenBabel_1_1OBGroupContrib.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to transform from z-matrix to cartesian coordinates.  <a href="classOpenBabel_1_1OBInternalCoord.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class defining interface for isomorphism (i.e. substructure) searches.  <a href="classOpenBabel_1_1OBIsomorphismMapper.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRateData.shtml">OBRateData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds rate constant data for <a class="el" href="classOpenBabel_1_1OBReaction.shtml" title="Used to store chemical reactions (i.e., reactants -&gt; products)">OBReaction</a>.  <a href="classOpenBabel_1_1OBRateData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml">OBNasaThermoData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Thermodynamic data in old style NASA polynomial form for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBNasaThermoData.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Delivers characters from an istream or streambuf from a source while filtering.  <a href="classOpenBabel_1_1FilteringInputStreambuf.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces CRLF (DOS) and CR (Mac OS 9) line endings by LF (POSIX)  <a href="classOpenBabel_1_1LineEndingExtractor.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle the locale for numeric data parsing.  <a href="classOpenBabel_1_1OBLocale.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Molecule Class.  <a href="classOpenBabel_1_1OBMol.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1GasteigerState.shtml">GasteigerState</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper class for <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml" title="Assigns Gasteiger partial charges.">OBGastChrg</a> which stores the Gasteiger states of a given atom.  <a href="classOpenBabel_1_1GasteigerState.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGastChrg.shtml">OBGastChrg</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns Gasteiger partial charges.  <a href="classOpenBabel_1_1OBGastChrg.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to convert from one format to another.  <a href="classOpenBabel_1_1OBConversion.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Customizable error handling and logging -- store a message, including the method yielding the error, causes, etc.  <a href="classOpenBabel_1_1OBError.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle error messages, warnings, debugging information and the like.  <a href="classOpenBabel_1_1OBMessageHandler.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1obLogBuf.shtml">obLogBuf</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A minimal streambuf derivative to wrap calls to cerr into calls to <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> as needed.  <a href="classOpenBabel_1_1obLogBuf.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolAtomIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> in a depth-first search (DFS)  <a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> in a breadth-first search (BFS)  <a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all bonds in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> in a breadth-first search (BFS)  <a href="classOpenBabel_1_1OBMolBondBFSIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all bonds in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolBondIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all neighboring atoms to an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>.  <a href="classOpenBabel_1_1OBAtomAtomIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all bonds on an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>.  <a href="classOpenBabel_1_1OBAtomBondIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all residues in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBResidueIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>.  <a href="classOpenBabel_1_1OBResidueAtomIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all angles in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolAngleIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all torsions in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolTorsionIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all pairs of atoms (&gt;1-4) in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolPairIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over all rings in an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>.  <a href="classOpenBabel_1_1OBMolRingIter.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> convenience subclass for conversion to/from <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> data.  <a href="classOpenBabel_1_1OBMoleculeFormat.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStopwatch.shtml">OBStopwatch</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stopwatch class used for timing length of execution.  <a href="classOpenBabel_1_1OBStopwatch.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml">OBSqrtTbl</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Square Root lookup table - given a distance squared returns distance.  <a href="classOpenBabel_1_1OBSqrtTbl.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1triple.shtml">triple</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A 3-element templated, based on the design of the STL pair&lt;&gt;  <a href="structOpenBabel_1_1triple.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1quad.shtml">quad</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A 4-element templated, based on the design of the STL pair&lt;&gt;  <a href="structOpenBabel_1_1quad.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml">OBOp</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Operations to modify molecules before output.  <a href="classOpenBabel_1_1OBOp.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Applies molecular reactions/transforms (<a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml" title="SMARTS based structural modification (chemical transformation)">OBChemTsfm</a> class) read from a datafile.  <a href="classOpenBabel_1_1OpTransform.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An internal (SMARTS parser) atomic expression.  <a href="unionOpenBabel_1_1__AtomExpr.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An internal (SMARTS parser) bond expression.  <a href="unionOpenBabel_1_1__BondExpr.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An internal (SMARTS parser) bond specification.  <a href="structOpenBabel_1_1BondSpec.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An internal (SMARTS parser) atom specification.  <a href="structOpenBabel_1_1AtomSpec.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A SMARTS parser internal pattern.  <a href="structOpenBabel_1_1Pattern.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A SMARTS parser internal state.  <a href="structOpenBabel_1_1ParseState.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">SMARTS (SMiles ARbitrary Target Specification) substructure searching.  <a href="classOpenBabel_1_1OBSmartsPattern.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml">OBSmartsMatcher</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class: performs matching; a wrapper around previous C matching code to make it thread safe.  <a href="classOpenBabel_1_1OBSmartsMatcher.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class: performs fast, exhaustive matching used to find just a single match in match() using recursion and explicit stack handling.  <a href="classOpenBabel_1_1OBSSMatch.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Programmable Atom Typer.  <a href="classOpenBabel_1_1patty.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml">OBChemTsfm</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">SMARTS based structural modification (chemical transformation)  <a href="classOpenBabel_1_1OBChemTsfm.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Corrections for pH used by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669" title="Correct for pH by applying the OBPhModel transformations.">OBMol::CorrectForPH()</a>  <a href="classOpenBabel_1_1OBPhModel.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Case insensitive string comparison for PluginMapType key.  <a href="structOpenBabel_1_1CharPtrLess.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all types of dynamic classes discovered at runtime.  <a href="classOpenBabel_1_1OBPlugin.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPointGroup.shtml">OBPointGroup</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Brute-force point group symmetry perception.  <a href="classOpenBabel_1_1OBPointGroup.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Atom in an <a class="el" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>.  <a href="classOpenBabel_1_1OBQueryAtom.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bond in an <a class="el" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>.  <a href="classOpenBabel_1_1OBQueryBond.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A substructure query.  <a href="classOpenBabel_1_1OBQuery.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used for internal random number generation <a class="el" href="classOpenBabel_1_1OBRandom.shtml" title="Random number generator.">OBRandom</a> (unless the system random generator is used)  <a href="structOpenBabel_1_1DoubleType.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Random number generator.  <a href="classOpenBabel_1_1OBRandom.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to store chemical reactions (i.e., reactants -&gt; products)  <a href="classOpenBabel_1_1OBReaction.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Residue information.  <a href="classOpenBabel_1_1OBResidue.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores information on rings in a molecule from SSSR perception.  <a href="classOpenBabel_1_1OBRing.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingSearch.shtml">OBRingSearch</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class to facilitate <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477" title="Find Smallest Set of Smallest Rings (see OBRing class for more details)">OBMol::FindSSSR()</a>  <a href="classOpenBabel_1_1OBRingSearch.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> search algorithms to create a search tree of <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> objects.  <a href="classOpenBabel_1_1OBRTree.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds.  <a href="classOpenBabel_1_1OBRotamerList.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A rule for torsional conformer searching, defined by a SMARTS pattern.  <a href="classOpenBabel_1_1OBRotorRule.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Database of default hybridization torsional rules and SMARTS-defined <a class="el" href="classOpenBabel_1_1OBRotorRule.shtml" title="A rule for torsional conformer searching, defined by a SMARTS pattern.">OBRotorRule</a> objects.  <a href="classOpenBabel_1_1OBRotorRules.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A single rotatable <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> as part of rotamer searching.  <a href="classOpenBabel_1_1OBRotor.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Given an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>, set up a list of possibly rotatable torsions,.  <a href="classOpenBabel_1_1OBRotorList.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorKeys.shtml">OBRotorKeys</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to generate all possible rotorKeys.  <a href="classOpenBabel_1_1OBRotorKeys.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml">OBSpectrophore</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to compute Spectrophores&trade;.  <a href="classOpenBabel_1_1OBSpectrophore.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml">OBText</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">An object containing just text.  <a href="classOpenBabel_1_1OBText.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1DeleteObject.shtml">DeleteObject</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Functor for deleting containers of pointers. Scott Meyers, Effective STL, Item 7.  <a href="structOpenBabel_1_1DeleteObject.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns atom types, hybridization, implicit valence and formal charges.  <a href="classOpenBabel_1_1OBAtomTyper.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns aromatic typing to atoms and bonds.  <a href="classOpenBabel_1_1OBAromaticTyper.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns ring types.  <a href="classOpenBabel_1_1OBRingTyper.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A subclass for conversion of XML formats.  <a href="classOpenBabel_1_1XMLConversion.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class containing common functionality for XML formats.  <a href="classOpenBabel_1_1XMLBaseFormat.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class for XML formats which represent molecules.  <a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAlign.shtml">OBAlign</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a least-squares alignment of two molecules or two vectors of <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> objects.  <a href="classOpenBabel_1_1OBAlign.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a real 3x3 matrix.  <a href="classOpenBabel_1_1matrix3x3.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1SpaceGroup.shtml">SpaceGroup</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle crystallographic space group symmetry.  <a href="classOpenBabel_1_1SpaceGroup.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Handle 3D transformations, such as space group definitions.  <a href="classOpenBabel_1_1transform3d.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a vector in 3-dimensional real space.  <a href="classOpenBabel_1_1vector3.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for handling and storing cis/trans stereochemistry.  <a href="classOpenBabel_1_1OBCisTransStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for handling and storing square planar stereochemistry.  <a href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Placeholder for enums &amp; Ref/Refs related functions.  <a href="structOpenBabel_1_1OBStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereoUnit.shtml">OBStereoUnit</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Struct representing a single stereogenic unit.  <a href="structOpenBabel_1_1OBStereoUnit.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml">OBStereoBase</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all stereochemistry classes.  <a href="classOpenBabel_1_1OBStereoBase.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoFacade.shtml">OBStereoFacade</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Facade to simplify retrieval of <a class="el" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a> derived objects.  <a href="classOpenBabel_1_1OBStereoFacade.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Class for handling and storing tetrahedral atom stereochemistry.  <a href="classOpenBabel_1_1OBTetrahedralStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for handling and storing non-planar stereochemistry with 4 reference atom ids.  <a href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OBTetraPlanarStereo</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for handling and storing planar stereochemistry with 4 reference atoms.  <a href="classOpenBabel_1_1OBTetraPlanarStereo.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CairoPainter.shtml">CairoPainter</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDepict.shtml">OBDepict</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">2D depiction of molecules using <a class="el" href="classOpenBabel_1_1OBPainter.shtml" title="Abstract painter base class used by OBDepict.">OBPainter</a>.  <a href="classOpenBabel_1_1OBDepict.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Color class used by <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter.">OBDepict</a>.  <a href="structOpenBabel_1_1OBColor.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Font metrics class used by <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter.">OBDepict</a>.  <a href="structOpenBabel_1_1OBFontMetrics.shtml#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml">OBPainter</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract painter base class used by <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter.">OBDepict</a>.  <a href="classOpenBabel_1_1OBPainter.shtml#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6">OBNodeBase</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce">OBEdgeBase</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5ae0fb6c3d3406efb549fbc9f8c26f0">RotorKeys</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6">OBPairInteger</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087">OBPairFloatingPoint</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <br class="typebreak"/>
<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga9373f6c3f788157de6f03c9403be34c4">Automorphism</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <br class="typebreak"/>
<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">OBIsomorphismMapper::Mappings</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef union <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef union <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; <a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a> * &gt;<br class="typebreak"/>
::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="structOpenBabel_1_1OBStereoUnit.shtml">OBStereoUnit</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">OBStereoUnitSetOfSets</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef union OpenBabel::_ByteCode&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <br class="typebreak"/>
<a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">OpenBabel::adjustedlist</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5f08cae8b4d627c8932dbfa639ce9205">neigbourlist</a> [NATOMSMAX]</td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> { <br/>
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048">any</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50">fileformatInput</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d">userInput</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392">perceived</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2">external</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23">local</a>
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> { <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">output</a>, 
<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>, 
<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810">calcvolume</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2f">score_t</a> { <a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4">Undefined</a> =  -1, 
<a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91">PLP</a>, 
<a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c">ChemScore</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9">obMessageLevel</a> { <br/>
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77">obError</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b">obWarning</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814">obInfo</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310">obAuditMsg</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce">obDebug</a>
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82">errorQualifier</a> { <a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5">always</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b">onceOnly</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaa9ec83f377b3c4e2b987789c1f273a8a3">SPACE_GROUP_ID</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaa732f4d3d79b99f8b9364cfc16e8003e6">SPACE_GROUP_HALL</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaac6dbb396b7703e533fee3676da46fec7">SPACE_GROUP_HM</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaa6150efae0567911e2f8c49bacdce6ffa">SPACE_GROUP_TRANSFORM</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="namespaceOpenBabel.shtml#af9bdc3014f3d54c426b6d2df10de4960a9d4d8b0b72fc2659da772d761a3c5ecb">Left</a>, 
<a class="el" href="namespaceOpenBabel.shtml#af9bdc3014f3d54c426b6d2df10de4960ad48f7af8c070184f3774c8e85854eb66">Right</a>, 
<a class="el" href="namespaceOpenBabel.shtml#af9bdc3014f3d54c426b6d2df10de4960a57a7edcbc04d6175683383cad5c3e0a2">Up</a>, 
<a class="el" href="namespaceOpenBabel.shtml#af9bdc3014f3d54c426b6d2df10de4960abcf8c79e9a5f5f9d606fb35645a0fb27">Down</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a456fbf388c19a1a63a95fe60d28dd869">OBReleaseVersion</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">Tanimoto</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">CanonicalLabels</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), int maxSeconds=5, bool onlyOne=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; double &gt; &amp;pot)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">construct_g_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">construct_c_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, bool ReZeroZ=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a07c3e3dff340f78121cc2c15da53cdb2">signed_volume</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">GetChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; int &gt; &amp;chirality)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7483e613b770424c7f1ff797900b9987">GetParity4Ref</a> (std::vector&lt; unsigned int &gt; pref)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">CorrectChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm, <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> i=input, <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> o=output)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aabfb2457435c6dd85d16016101b3e4d7">DoComparison</a> (char ch1, char ch2, T &amp;val, T &amp;filterval)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga4edd651fb377c60f3b7ac2f48b7f5e57">MapsTo</a> (const <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &amp;map, unsigned int queryIndex, unsigned int &amp;queriedIndex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga16841a730cf92c8e51a804ad8d746307">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &gt; &amp;aut, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), std::size_t maxMemory=3000000)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga7753422526ba34488edf393803aabad7">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &gt; &amp;aut, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), std::size_t maxMemory=3000000)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml">OBIsomorphismMapper::Functor</a> &amp;functor, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab5741f7ec581130f899f17f4d9477aea">print_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab323a3745c477d9eb4c796786db39075">print_matrix_f</a> (double *m, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac09eff5e59b6a7dd424dc71f4a37e464">print_matrix_ff</a> (double **m, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3b2b9be34ace132aa9506d9ee043824f">mult_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a067494738d0f55b9df745866cdc3fe56">mult_matrix_f</a> (double *c, double *a, double *b, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37830c949ab96aad9b5041a82895ba8e">mult_matrix_ff</a> (double **c, double **a, double **b, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e5ee2fd1515457cb4a6e9394a5a14ff">invert_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afb96cdaafd5073c2e806d36ec4e7eef4">invert_matrix_f</a> (double *m, double &amp;det, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afa4aad5bde182eebe57cedcf1727b2fc">invert_matrix_ff</a> (double **m, double &amp;det, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8580b3fa2a0435b2d073c22097d1d35e">convert_matrix_f</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab06c9b9e02affa91406755a0b9fb28e1">convert_matrix_ff</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b2a8069e01dd4287fb85f90a991972c">convert_matrix_f</a> (double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a050184ff6264447d6923e1be4df061b3">convert_matrix_ff</a> (double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8a3508df81e444f875d5f493a1bcbe28">convert_matrix_ff_f</a> (double **src, double *dst, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acbf2348ce7eae39aca355a630f06484c">convert_matrix_f_ff</a> (double *src, double **dst, int rows, int cols)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a> (int na)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a> (int na)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a54363eb76ba264ec754bece9848198c8">alternate</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, const int nH[], int bondOrders[])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate</a> (const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a827934a434ef208e2644aecb679ec930">generateDiagram</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">generateDiagram</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::ostream &amp;ofs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *query, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *structure)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa0561905f67fffeb3fae74b786fab642">fragmentSearch</a> (const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f">equivalenceList</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::vector&lt; int &gt; &amp;eqList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e78d25ada5c11fba4e216e1d782e5b7">equivalenceList</a> (const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">addFragment</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *molecule, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abce282c45ee77ea965aaacd47b4e8d72">createStereoLists</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[<a class="el" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a>][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo</a> (std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">groupRedraw</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int bondN, int atomN, bool atomNInGroup)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a82011594cefb0a924a4cc938800de614">canonizeMCDL</a> (const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula</a> (const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aaa14c59df78025ce6e8dfd3f27feb106">prepareTest</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::ostream &amp;ofs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a> (char *str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac9aac27fe3b12d7201f8eb7cb95a3c57">ThrowError</a> (std::string &amp;str)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">CartesianToInternal</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">InternalToCartesian</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac1c62bdae6cf7a9195c470e7d0e29883">NewExtension</a> (string &amp;src, char *ext)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a> (double *, double *, double *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a> (double mat[3][3], double rmat[9])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (double *r, double *f, int size, double u[3][3])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a> (double *, double *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a60625165cc16932d1c2f34976dbc54dd">rotate_coords</a> (double *, double m[3][3], unsigned)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a25d610b9255993505f2dbdd9690d068f">calc_rms</a> (double *r, double *f, unsigned int N)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4216f2e0672bf6a9ee72d3029838a213">OBCompareInt</a> (const int &amp;a, const int &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abb48ec7a1b3301248a1147cf2dbbe600">OBCompareUnsigned</a> (const unsigned int &amp;a, const unsigned int &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51">IsNear</a> (const double &amp;a, const double &amp;b, const double epsilon)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29e51098e105d63b04b5517299d1b772">IsNearZero</a> (const double &amp;a, const double epsilon)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a227ab5b29e8122dd6d8ac76d2b58778a">IsNan</a> (const double &amp;a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">IsNegligible</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">IsApprox_pos</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95b1c21368d148cb45ac6f604984c357">CanBeSquared</a> (const double &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen</a> (std::ifstream &amp;fs, const char *filename)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0d523299532d6b282919923e731771ee">SafeOpen</a> (std::ofstream &amp;fs, const char *filename)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b397e6876fbb7f13d0e4a3cac7edfdc">SmartsLexReplace</a> (std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga7a0297c3c2a3fa58bbd5e321b900ddec">EnableStaticPlugins</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">CompileMoleculeQuery</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">CompileSmilesQuery</a> (const std::string &amp;smiles, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a28466e08c61853737ac9bdeaeee495cc">DoubleMultiply</a> (unsigned int, unsigned int, <a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7fe18b3a86010f2fbbeeda7a6ed635a4">DoubleAdd</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa995f2456608bb27a86fef9460f9e8e0">DoubleModulus</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a> (const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *, const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8b1ba3c73d4038fd69729fbeb588008a">Swab</a> (int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1607444ae7cfbd6dcae449f9cb77b0e3">tokenize</a> (std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a932114672402053a4208861b2b600506">tokenize</a> (std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n\r&quot;, int limit=-1)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae8d9d7dd615b5fa7b533c075fe744d8f">Trim</a> (std::string &amp;txt)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac6af450f7e3ad5ffd27fb56461dcd177">toString</a> (T val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9858bede3a0f272573c0173a947bea18">ignore</a> (std::istream &amp;ifs, const std::string &amp;txt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#add34ce6b9be332e5d87fd5087d4dc38d">OpenDatafile</a> (std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af1a9769dcdfc9bb77a3747a3c89c3d03">center_coords</a> (double *, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt;</a> (std::ostream &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">operator+</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8bcf1e708be0fbc503f83952c3a99cd4">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">operator*</a> (const double &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac5dcc9191fa15d332a546a975cb72952">operator*</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">operator/</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">cross</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">Point2Line</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">ApplyRotMatToBond</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a48ed8b37310a8d7153a64309f09901a0">operator|</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a327b6158a69368530d30de5ce06cc7a5">operator&amp;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa2cf1233a6c6ce53b79f94b7a60d2d2a">operator^</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a682eec6ce003f48a6098d6700e3cedba">operator-</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3ba5fcca1ecb1241049411be7017186d">operator&lt;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a42db9af61dccd8f586f358058b78d1cc">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a69c4665c3756720ac6f0d62b2488fdd6">GetCorrectedBondVector</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom2, int bondOrder=1)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac166197716f00da13cdac1c0cee85975">CompareBondPairSecond</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a723b609c4e82a3b0ae91f4aa44196740">addNbrs</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fragment, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;metalloceneBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a04fb8cae80f1866e2921853c509b07b4">getFragment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;metalloceneBonds=std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;())</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0e3ffef22e9d0e3a960e1ddc3c7a3af0">getFragment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *skip, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">isFerroceneBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0e9fff5044095331af29c5b0781557c4">findMetalloceneBonds</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;bonds, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a818fd93f0aa1e1f5b3c63bbbc8013cca">AllocateByteCode</a> (int type)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acc9426f6c6d58198a97d8c726660559d">DeleteByteCode</a> (<a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a59c2e046bb935ac3eba0d3b003d10176">FatalMemoryError</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes</a> (<a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> **node, int resid, int curr, int prev, int bond)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1ea11acf2b1952b517470849055dd9d9">Toupper</a> (string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1853c7aae336e34aaf9e3bf5098f6998">Tolower</a> (string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a399f52de3bc4ed70a70547a39416dff4">Reweight</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;rotorWeights, std::vector&lt; int &gt; rotorKey, double bonus)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab30451b430cbfd12c3cc861985766628">transformedFractionalCoordinate</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> originalCoordinate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0876587a9edcb8d17a70923e424e3169">CompareUnsigned</a> (const unsigned int &amp;a, const unsigned int &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a669ac61cfe4be78e8624b31b39179a9c">ComparePairFirst</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">ComparePairSecond</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfcd0e581453354d7c779541ec58c491">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc71eb19ad3b4c729264738f6d69d1d3">operator&gt;&gt;</a> (istream &amp;is, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5c3704ad0910c8279aa1e1e79c300369">print_vector</a> (const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abfb2d29563ee1a81f2e70a51d55c83cf">CompileAutomorphismQuery</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; unsigned int &gt; &amp;symClasses)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;maps, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, std::size_t maxMemory)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4e9dbdc3dacbdf4b8ac6e48baba7bc35">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;maps, const std::vector&lt; unsigned int &gt; &amp;symClasses, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, std::size_t maxMemory)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">expand_cycle</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;cvisit, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;potAromBonds, int rootIdx, Timeout &amp;timeout, int prevAtomIdx, int depth)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, Timeout &amp;timeout)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">expand_kekulize_lssr</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;lssr, std::vector&lt; bool &gt; &amp;lssrAssigned, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;bondsThisRing)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8a423a9a023698abe77ee30550619f54">count_assigned_bonds</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;bondsThisRing, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b44d43b56950aff23fbca88664ad996">isPotentialAromaticAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">potentialAromaticBonds</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adbf96b6f2307d00a5f525ecc3a4c5bca">get_bonds_of_ring</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *ring, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;ring_bonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67f559671aa9d68ce3888baab8f7fc1a">has_leftover_electrons</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a07faa5acbed4a3cbbfd0d711321c0439">has_leftover_electrons</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa57c0c18ebfc17ba6f962725101ab5b3">restoreDoubleBonds</a> (TEditedMolecule &amp;sm, bool putEither)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">intToStr</a> (int k)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5eeac49565ab1fdcb863f31f41ec2f5f">xDistPoint</a> (double x1, double y1, double x2, double y2, double x0, double y0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acb3b0f424f25beb57a312c1a679f3b0c">overlapped</a> (double x1A, double y1A, double x2A, double y2A, double x1B, double y1B, double x2B, double y2B, double delta)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac6d5144b33c27a6dce66dff86c4ebdde">compareAtoms</a> (int a1, int a2, const std::vector&lt; std::vector&lt; int &gt; * &gt; aeqList)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1c632244490414023578336c8528c613">incrementValues</a> (std::vector&lt; int &gt; &amp;currentValues, const std::vector&lt; int &gt; maxValues)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2eda090453a9a538b9295e4fd2ba4366">CompareRotor</a> (const pair&lt; int, int &gt; &amp;a, const pair&lt; int, int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95f6327fcb8303f8d4fbb309a20e3f2b">deleteIntElement</a> (std::vector&lt; int &gt; *source, int index)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a24ad6fc920fa2699d472547ec4d1721a">findAlternateSinglets</a> (const std::vector&lt; int &gt;iA1, const std::vector&lt; int &gt;iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a78600823bb7358bc592f05fa5039936d">makeAssignment</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; bondAssignment, const std::vector&lt; int &gt; specialFlag, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds, int &amp;nAss)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aaf79bb3ded26c6df1bcb8008c76afac6">analyzeOK</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; maxValency, const std::vector&lt; int &gt; bondOrder, const std::vector&lt; int &gt; atomCheckFlag, int nAtoms, int nBonds, int &amp;nGtMax, int &amp;nNEH, int &amp;nOddEven, bool testExceedHydrogen, bool oddEvenCheck)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b40d2265cd8cf97dc199e8059d13ff0">incrementAssignment</a> (std::vector&lt; int &gt; &amp;bondAssignment, int nAss)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; maxValency, std::vector&lt; int &gt; &amp;bondOrder, std::vector&lt; int &gt; &amp;hydrogenValency, int nAtoms, int nBonds, bool oddEvenViolate)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, const std::vector&lt; int &gt; nH, std::vector&lt; int &gt; &amp;bondOrders)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8184977f057db3afea953ff0d97355d">ptInRect</a> (const Rect r, const Point p)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af3acf0818f209ed2426163c90b6d1440">compareStringsNumbers</a> (string s1, string s2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0c4710d7911172f59b1f9caf9192d2d6">getAtomSymbol</a> (TSimpleMolecule &amp;sm, int atAtom, int atEx, int priority, string ndData)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a49950c5bac5703c9a3c7efea3d4a41f4">getAtomSymbol</a> (TSimpleMolecule &amp;sm, int atAtom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa5a5e94e5040b9aa439f4f658f0741d4">indexOf</a> (const string instring, const string substring, int fromPos=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac2c0520f21b12e9bfae93e4e425e26c9">removeZeroeth</a> (std::string instring)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a79d8fe626950346aaaeabec7cfdce123">analizeParity</a> (string data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac6b2a0b35248f073b86a96fbef99f461">analizeParityBond</a> (string data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a53b6e688d17496385f69834ed1014dc8">changeParity</a> (std::string data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af2ed9f300b95cff9ffc0fbc34cacc578">changeParityBond</a> (std::string data)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1da27ac0556550ed29812976e41e97b9">sproduct</a> (TSimpleMolecule &amp;sm, int br, int i1, int i2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aee1209411864c8c11729145e25e4bd2c">bondEquivalent</a> (int bn1, int bn2, const std::vector&lt; int &gt; eqList, TSimpleMolecule &amp;sm)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae55766527e16c454a28332c2b9f51bab">addZeroeth</a> (std::string instring, std::string stringAdd)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8499ac47df50a86298d88a5079a544f6">setUpDownBonds</a> (int atomNo, int parity, TSimpleMolecule &amp;sm, std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a74797fbdbf190ac9522db1f2d582581b">SortVVInt</a> (const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac44ee11ab4413a4b1cb20b5bd24f183f">SortAtomZ</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4da122a7830becd4fa38b8792671cdd">OBComparePairSecond</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a83d991b1e233b11b794e4ab3f87b52cc">OBComparePairFirst</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abe5da6d31a3fcc23a2efd77085c8c2d4">ClassCount</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8e455dc2d94f2394a21dd76db3af8325">ValenceSum</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">KekulePropagate</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">GetCurrentValence</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5d65e3449d4d6a0a7a35ea4e13039f16">ExpandKekule</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;va, vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">CorrectBadResonanceForm</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7654363e339f0fe07323c9f7e542d4db">WriteTitles</a> (ostream &amp;ofs, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aabfd0c1c9630002b16c782ad7d39790f">center_coords</a> (double *c, unsigned int size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a037d5f246395ec725489c655344a958a">rotate_coords</a> (double *c, double m[3][3], unsigned int size)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95b4ba35439691534ac9c74c47a4b688">SetRotorToAngle</a> (double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a034c6dd9973dc10ecb7cab1e58a683fa">SafeOpen</a> (std::ifstream &amp;fs, const string &amp;filename)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab9bfc815426ab3c657b97c198aee9f3e">SafeOpen</a> (std::ofstream &amp;fs, const string &amp;filename)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2e30f35d0b3984ff969fed0eadc3a848">InvertCase</a> (std::string &amp;s, unsigned int start)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a867d77834ebf14f88224f0dd7e7e0e61">SolveLinear</a> (double A, double B)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad37b2e597a6a0115fa09fc4903665c9d">SolveQuadratic</a> (double A, double B, double C)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a637e2cd6fd74982c574e513d729b29bc">CubeRoot</a> (double X)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic</a> (double A, double B, double C, double D)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa7ec675d10f9071757b87d4952938b65">get_roots_3_3</a> (double mat[3][3], double roots[3])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b5986b1238c63b45e7fb0fdfdfc4ed0">GetVectorBinding</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *, int, int vb=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError</a> (const char *ptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa06090c65ac9acea8044a078064142d6">AllocAtomExpr</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac86a92f114ff5ab6ee7357352682922c">CopyAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae445247649429e110f031d235bc4d465">FreeAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9cf9b8eaac01d8b3edecdc32e0d73512">BuildAtomLeaf</a> (int prop, int val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a03cacdaa8b1851aa9f927a8108b9e3ea">BuildAtomNot</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a61fd91da70225bf05011639396d23b10">BuildAtomBin</a> (int op, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c7a4877081dd4f7ab5966e1cb506895">BuildAtomRecurs</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7d8b74f86bd19e5c64c5cfafbc0f5fc8">GenerateElement</a> (int elem)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adf5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem</a> (int elem, int flag)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8d298e86b8ff500e158a8410aa5aa732">IsInvalidAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac80b9ed98f3d3d577e051b6dd2870cef">AllocBondExpr</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a308583e0ca7df091c7a7e3b9fb321805">CopyBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62e1c3bdf62c95fbff1b64cb4996eccb">EquivalentBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr1, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec5ad77869a83b4b1f65bcfcb065d98f">FreeBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab0f9c1d3ab7ba35f0083c342db724359">BuildBondLeaf</a> (int prop, int val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a558423c98a7710dccb8d9234a8c0d2cc">BuildBondNot</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6fc2b0b41adf46651940ca2c9410ed0d">BuildBondBin</a> (int op, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a17874fdfb56af286f64cbf9471772daa">AllocPattern</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr, int src, int dst)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac16aac0b5b4c8698863437383b747a5c">MarkGrowBonds</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a308bf98f43b9e6d709f17b2e83617d6f">GetChiralFlag</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac613f2b30f871cd23e63b8573372b2a4">IsBooleanAtomLeaf</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a93043bdcf295c9daa7efb45bc31182ce">IsNegatingAtomLeaf</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a19b1b9103d86b579bb44d777db593c73">EqualAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a40de5efd81cb1bca8ff737a1507deeb0">OrderAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a58b602c6be0aa88f69fbaecd71a82b7a">AtomLeafConflict</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6419b054750512355f620886990ae725">AtomExprConflict</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afe1606ae8fc8753791a06f48e1beaf4f">AtomLeafImplies</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a53bb1c96f3be289fbe52bdb65afe3b13">AtomExprImplied</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5efeaba0de04686b85e1cd11296bb76f">AtomExprImplies</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aafea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *recur, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a44c137e83dc2832887a5db79ceb19dbf">OrAtomExprLeaf</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acc7a90098a2f71e1480986f513426244">GetExprOrder</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1be5369686428b6311fc8f79baf855c5">SmartsLexReplace</a> (std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acf0cdead441d34bce09b5dffbd031e94">isqrt</a> (unsigned int val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4d8217756622db102e25941df848d37">IsOddPrime</a> (unsigned int x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a83b9098df014b7fce40c3d29eb240240">RelativelyPrime</a> (unsigned int x, unsigned int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9c9b5a925bb477e9cf899d8705defc60">LeadingZeros</a> (unsigned int x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency</a> (unsigned int m, unsigned int a)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5e5d2c394de2985154659ef73adddea6">DetermineFactors</a> (unsigned int x, unsigned int *factors)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a368951c5db9d79bad24d0632dbaf23d4">DetermineIncrement</a> (unsigned int m)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence</a> (unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence</a> (unsigned int p, unsigned int m, unsigned int a, unsigned int c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber</a> (const char *atomid)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber</a> (const char *res)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a91a8965770cf999c120602edb0c09bcd">SetResidueKeys</a> (const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">DetermineFRJ</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a902077219ff1df4935790b354a00909b">BuildOBRTreeVector</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *, vector&lt; <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">atomRingToBondRing</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; int &gt; &amp;atoms)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">visitRing</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *ring, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;rlist, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;rignored)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0bc08c11af150479f14d23684fab908f">FindRings</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, vector&lt; int &gt; &amp;path, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bvisit, int natom, int depth)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9f0ec6e80141edbb924cfc4839117c94">rint</a> (double x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3d3039fda855c4c8c37c8345f0b51a64">SetRotorToAngle</a> (double *c, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> **ref, double ang, vector&lt; int &gt; atoms)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a69a83bcbc3a172e306c4556518aa0999">PackCoordinate</a> (double c[3], double max[3])</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3180afc2c45b337a776dcc164e99e89a">UnpackCoordinate</a> (double c[3], double max[3], int tmp)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">GetDFFVector</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, vector&lt; int &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfad2bce1feae52028bcf69d6b5de37a">CompareRotor</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;, const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29e21802967a71af8d4f4828d979676b">MinimumPairRMS</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, double *, double *, bool &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab1efa641b2fa046a6c00f729818933d6">trim_spaces</a> (char *string)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a41d8538809cb689100fa8a0807510128">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;A, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;B)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a30703c4e70c6142f64ceb67f1888b6e2">SQUARE</a> (double x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a590374f29c633247d07b75e43ae89f9d">operator&lt;&lt;</a> (ostream &amp;co, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a12c13a3449bb5bffa3436d7dda6f217c">RemoveWhiteSpaceUnderscore</a> (const string &amp;in)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad8081070ab0409c71d9abfe43902881f">VZero</a> (0.0, 0.0, 0.0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a71fd9d70c392449514d7a263d94e0ed1">VX</a> (1.0, 0.0, 0.0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac43607459a7e61f202515f641ff57508">VY</a> (0.0, 1.0, 0.0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abe3ca6a519f7aa7bcade3fb6d2b927f6">VZ</a> (0.0, 0.0, 1.0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static cairo_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acfcb21e667eaa6f03208c8ece10eff16">writeFunction</a> (void *closure, const unsigned char *data, unsigned int length)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static cairo_surface_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afb8d46302ca2fbb28a38a7b5ad59a9c3">scale_surface</a> (cairo_surface_t *old_surface, int old_width, int old_height, int new_width, int new_height)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">GetLabelAlignment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">GetAtomSymClass</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr><td colspan="2"><div class="groupHeader">String conversion utilities</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aae157b7c5a3145dff9e938888d41d46f">ToUpper</a> (std::string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47cc993bd022dfca052b2b18f5cd89ea">ToUpper</a> (char *cptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8e8df618618aa53bf4cf202b0230c7ac">ToLower</a> (std::string &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47e5132fa26acd9f575c6c34e6337348">ToLower</a> (char *cptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae254bae8e13592739edfdf24b917a943">InvertCase</a> (std::string &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a02a81294407df471b68048bb2bcfd503">InvertCase</a> (char *cptr)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae7fd604c6cfd7cbb0067721106af8ca9">CleanAtomType</a> (char *)</td></tr>
<tr><td colspan="2"><div class="groupHeader">High level functions</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gae7aedffc6994cf26d16524389c56bdac">PerceiveStereo</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, bool force=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga305c9600a3a336da16683baa395e20f4">StereoFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; *updown=NULL, bool force=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gaebcf38fd76c5d76fffbae808b8571f9b">StereoFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, bool force=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">StereoFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Low level functions</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector<br class="typebreak"/>
&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga35e07645a245db366b115f0dc20542fd">TetrahedralFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector<br class="typebreak"/>
&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gab85c5ef4c9416ee7af02b21658fe9de2">TetrahedralFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector<br class="typebreak"/>
&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gac3049b86debe9059b851825b29b1557c">TetrahedralFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga7e1ba3a4ac33b0c6404b0d960cc53d00">CisTransFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga98528c3002ed718695ccfaf031ca3f04">CisTransFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, const std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; *updown=NULL, bool addToMol=true)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga182a53150e1793ac1ec14958afb05f17">TetStereoToWedgeHash</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; &amp;updown, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> &gt; &amp;from)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::set&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga63e739a42d88ac64ed77c07d73866a45">GetUnspecifiedCisTrans</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga9b44683d071146220a97390283944f70">StereoRefToImplicit</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> atomId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gac74fff254a639ede4d92a59fa44318a6">CisTransFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Stereogenic unit identification</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga0f62e73467d2059ad28d544633634862">FindStereogenicUnits</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses, const <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;automorphisms)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a> = 0x7883</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a94007d911a76e1404494fd9b1785f22b">RateData</a> = 55555</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4c2b0b854dea9451bf30f7b37353c877">ThermoData</a> = 55556</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af9a30f985504c4a70fd08aa72c0cd16a">obLocale</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a> = 300</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">MAXFRAGS</a> = 200</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">MAXCHARS</a> = 1000</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a> = 10</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">NELEMMAX</a> = 120</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">etab</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">isotab</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">chainsparser</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">resdat</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">NoId</a> = <a class="el" href="structOpenBabel_1_1detail_1_1max__value.shtml">detail::max_value</a>&lt;unsigned long&gt;::result</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1c64f54dc7b18535a4e9cc581199e26a">Residue</a> [MAXRES][4]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ada1d79ef0dec356ea0ae9c1d4e654ca2">ElemDesc</a> [MAXELEM][4]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4a6dc069703276b9476ce6b7c5f018e">ResNo</a> = MINRES</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a508adcc5794ff87b21a2e5fc0d752b17">ElemNo</a> = MINELEM</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">VZero</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">VX</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">VY</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">VZ</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4a64fa5669b273a31330641abe62978">phmodel</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a384eab3fdca5eabacaf7c1167d8fbbe8">bitsoff</a> [SETWORD]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37764b678471578b5f9441bd6f130fd8">nibble_bit_count</a> [0x10]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aba95148bad1cac8e3abb51a485c17cac">bondtyper</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a26e55b55a5d9997fa7e9326cd603fcdd">Peptide</a> [MAXPEPTIDE]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab4cf89b53bf070dafd1717b69e89d8a0">Nucleotide</a> [MAXNUCLEIC]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">ChainsAtomName</a> [ATOMMAX][4]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static ResidType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0f1fa68f20787eefe51bc205d70bf141">AminoAcids</a> [AMINOMAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static ResidType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2326ccdc5fd0c0b5cfd5842cf4c7da03">Nucleotides</a> [NUCLEOMAX]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static MonoAtomType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6d27c5a78720907303f7345d7f972f36">MonoAtom</a> [MaxMonoAtom]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static MonoBondType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a424ffb435ce72308ed456dd1c8e5de60">MonoBond</a> [MaxMonoBond]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4f891e27abe7998822f22e513182317a">MonoAtomCount</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afe6df7aef6454d16dfbde0b74a516b63">MonoBondCount</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static StackType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9e0089655dc8a4d83d40dcbe519ca9bb">Stack</a> [STACKSIZE]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5e019437eb125244e080ac8bee696b05">StackPtr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a08aed91cf3c0528c11e2c383078b9e52">AtomIndex</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8cd0fea55be4772aece582108b664c9">BondIndex</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4e7dde6c2732deca11bff4c63c46372">StrictFlag</a> = false</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a> = &quot;\033[1;31m&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a> = &quot;\033[1;32m&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acee835767e8d4be32f5ad94a2e90a45f">yellow</a> = &quot;\033[1;33m&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a> = &quot;\033[1;34m&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae70ea9d1800f7ec86a2db16c71c42e21">normal</a> = &quot;\033[0m&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a007ca25767fb63a9b52010d40c8888df">hVal</a> [NELEMMCDL]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6eb8f9135e86a8fd55d2293c4fe7b811">maxVal</a> [NELEMMCDL]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0d7409371f9cf6d7f50a3fda440d871a">chargeVal</a> [NELEMMCDL]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a010272f11ab71479f636c0327b5843a8">aSymb</a> [NELEMMCDL]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1b7de377338f7ac7700315efbba80ae2">exactAtom</a> [NEXACTATOMS] = {6,14,5,50,82,8,16,34,52,7,15,33,51,9,17,35,53,32,13,26,80}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e4dd9241c1923f5a16e445d29e040e2">alkaly</a> [NALKALYATOMS] = {3,11,19,37,55}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67d14372d5486c87fba4d1347e98677c">alkalyEarth</a> [NALKALYEARTHATOMS] = {4,12,20,38,56}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37351982a79ec5e7505f20f8d706dd0f">trivalent</a> [NTRIVALENTATOMS] = {21,31,39,49,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,81,89,90,91,92,93,94,95,96,97,98,99}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c1f49db7daefd6995a8bd194e3ac0ef">titan</a> [NTITANATOMS] = {22,40,72}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac5ecc60b7d1b91afa310c0c6379b909c">vanadium</a> [NVANADIUMATOMS] = {23,41,73}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a18359deca081005601d5e234fee87a5f">cromium</a> [NCHROMIUMATOMS] = {24,42,74}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b27e665d816bd4edca018692a03ee1e">manganeze</a> [NMANGANESEATOMS] = {25,43,75}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e38b8674bb78cdd93818c4f569d3317">likeFe</a> [NLIKEFEATOMS] = {27,28}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab280567064a5940906303e0f95b673d3">platinum</a> [NPLATINUMATOMS] = {44,45,46,76,77,78}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af395a23311a093c6c9ba174c91bb00fe">copper</a> [NCOPPERATOMS] = {29,47,79}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a790d50110edd641cf164ef702acd67c2">zink</a> [NZINKATOMS] = {30,48}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32e0599f9cf6f751a89279c86f703e47">possibleAromatic</a> [NAROMMAX] = {7,8,15,16,33,34,51,52,HETERO_ATOM}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a174dbce034c042d7961ad4b02dd4f344">metals</a> [NMETALS]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa6724f0a1ae8f22fa59505cb00498565">lightMetals</a> [NLIGHT_METALS]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1dddb327de910ca9d524dc76a68090a3">heavyMetals</a> [NHEAVY_METALS]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acb826f58b78c49d8732fb29a0b325f9e">halogens</a> [NHALOGENS] = {9,17,35,53,85}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec7f886140fb13e79a6823f3bf78b5cf">hetero</a> [NHETERO] = {7,8,14,15,16,33,34,51,52,84}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac1e24d8c0684f30e0835a9ca5cf6d1b9">strData</a> [NDATABASE_MOLECULES]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4e78cb542837e6c77dcd5da5765833f">bondValence</a> [NBONDTYPES] = {1,2,3,1,1,0,0,0,1,1,1}</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8fc4e404ce6dc298048b5bdf5deb3124">fsastart</a> = &quot;{SA:&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5d29a62c474c707d84973a8ecb1f62a3">fsbstart</a> = &quot;{SB:&quot;</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0afcf921bfdabceef6c6cf00836ae203">SwabInt</a> = (<a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a19c1a2a80cf2af5131ca597d0ce38192">Roots</a> [4]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9bb7a6b653e299a7918cf66e3a7be057">N_parsed_bonds</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">POINT_GROUP&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a856b116adc145026ec1c182e9145c818">PointGroups</a> []</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adddfd42867b5aaa0caaa3a793a8f69e2">primes</a> [MAXPRIMES]</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae5fd3b39a867e164de9f433a78d9d09f">ringtyper</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a> = 0x00000001</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a> = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static SpaceGroups&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3463c4c11680aefbcce3a25305211efa">_SpaceGroups</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Global namespace for all Open Babel code. </p>
</div><hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ac0863bf2485bd66ba3afa6e50ddc20f6"></a><!-- doxytag: member="OpenBabel::OBNodeBase" ref="ac0863bf2485bd66ba3afa6e50ddc20f6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> <a class="el" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6">OBNodeBase</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>OBNodeBase is declared for backwards-compatibility with 2.0 and earlier code. </p>

</div>
</div>
<a class="anchor" id="a54495d3eb8f9749d0237e6bda59e0abe"></a><!-- doxytag: member="OpenBabel::OBBondIterator" ref="a54495d3eb8f9749d0237e6bda59e0abe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A standard iterator over a vector of bonds. </p>

</div>
</div>
<a class="anchor" id="aed11ccd81d7abaccbdf10486a5ae0402"></a><!-- doxytag: member="OpenBabel::OBAtomIterator" ref="aed11ccd81d7abaccbdf10486a5ae0402" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A standard iterator over a vector of atoms. </p>

</div>
</div>
<a class="anchor" id="ad5ca88aa35c43da1b791c7703ec8978d"></a><!-- doxytag: member="OpenBabel::OBDataIterator" ref="ad5ca88aa35c43da1b791c7703ec8978d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A standard iterator over vectors of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> (e.g., inherited from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>) </p>

</div>
</div>
<a class="anchor" id="ad30fc0fda0a0c8a6f7d22b8202af0dce"></a><!-- doxytag: member="OpenBabel::OBEdgeBase" ref="ad30fc0fda0a0c8a6f7d22b8202af0dce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> <a class="el" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce">OBEdgeBase</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>OBEdgeBase is declared for backwards-compatibility with 2.0 and earlier code. </p>

</div>
</div>
<a class="anchor" id="a8eff09d0456c2308e2afb34e824d9c33"></a><!-- doxytag: member="OpenBabel::Template" ref="a8eff09d0456c2308e2afb34e824d9c33" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">OpenBabel::Template</a> <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Structure template for atomic patterns in residues for <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a>. </p>

</div>
</div>
<a class="anchor" id="a087fe4bdc2d57b56addb4b9fd7fc0415"></a><!-- doxytag: member="OpenBabel::RotorKey" ref="a087fe4bdc2d57b56addb4b9fd7fc0415" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;int&gt; <a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad5ae0fb6c3d3406efb549fbc9f8c26f0"></a><!-- doxytag: member="OpenBabel::RotorKeys" ref="ad5ae0fb6c3d3406efb549fbc9f8c26f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a>&gt; <a class="el" href="namespaceOpenBabel.shtml#ad5ae0fb6c3d3406efb549fbc9f8c26f0">RotorKeys</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0bdf8334aad62a6bb7ad50f58060c9b6"></a><!-- doxytag: member="OpenBabel::OBPairInteger" ref="a0bdf8334aad62a6bb7ad50f58060c9b6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt;int&gt; <a class="el" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6">OBPairInteger</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Store arbitrary key/value integer data like <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>. </p>

</div>
</div>
<a class="anchor" id="a5ba6d4475315df1100427dc98074c087"></a><!-- doxytag: member="OpenBabel::OBPairFloatingPoint" ref="a5ba6d4475315df1100427dc98074c087" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt;double&gt; <a class="el" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087">OBPairFloatingPoint</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Store arbitrary key/value floating point data like <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>. </p>

</div>
</div>
<a class="anchor" id="a8f32238b69be1e83980d0ff3a90b206f"></a><!-- doxytag: member="OpenBabel::Formatpos" ref="a8f32238b69be1e83980d0ff3a90b206f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> <a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8df92ddf377e8839e49c4c1d4a617f1e"></a><!-- doxytag: member="OpenBabel::AtomExpr" ref="a8df92ddf377e8839e49c4c1d4a617f1e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>  <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac7bd9a9f7066eb36f2cfa568d180cb80"></a><!-- doxytag: member="OpenBabel::BondExpr" ref="ac7bd9a9f7066eb36f2cfa568d180cb80" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>  <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa52bc907b6b29c913a85671c48ff8ad7"></a><!-- doxytag: member="OpenBabel::OBResidueIterator" ref="aa52bc907b6b29c913a85671c48ff8ad7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*&gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A standard iterator over a vector of residues. </p>

</div>
</div>
<a class="anchor" id="a434f394d0613a8ef6c119670ff49710f"></a><!-- doxytag: member="OpenBabel::OBRotorIterator" ref="a434f394d0613a8ef6c119670ff49710f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a>*&gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A standard iterator over a vector of rotors. </p>

</div>
</div>
<a class="anchor" id="a7ae0ba0c317c360c22eaa4b481e2dc87"></a><!-- doxytag: member="OpenBabel::transform3dIterator" ref="a7ae0ba0c317c360c22eaa4b481e2dc87" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt;<a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a>*&gt;::const_iterator <a class="el" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abcd91e4b018d533740f00f35ae44e4f3"></a><!-- doxytag: member="OpenBabel::ByteCode" ref="abcd91e4b018d533740f00f35ae44e4f3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union OpenBabel::_ByteCode  <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Chemical graph matching virtual machine. </p>

</div>
</div>
<a class="anchor" id="a84aaa93d3e94f64164e85131f205e919"></a><!-- doxytag: member="OpenBabel::adjustedlist" ref="a84aaa93d3e94f64164e85131f205e919" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">OpenBabel::adjustedlist</a>  <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5f08cae8b4d627c8932dbfa639ce9205"></a><!-- doxytag: member="OpenBabel::neigbourlist" ref="a5f08cae8b4d627c8932dbfa639ce9205" args="[NATOMSMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a> <a class="el" href="namespaceOpenBabel.shtml#a5f08cae8b4d627c8932dbfa639ce9205">neigbourlist</a>[NATOMSMAX]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a87d90c5296e904e126b8520e1daacc14"></a><!-- doxytag: member="OpenBabel::DataOrigin" ref="a87d90c5296e904e126b8520e1daacc14" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048"></a><!-- doxytag: member="any" ref="a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048" args="" -->any</em>&nbsp;</td><td>
<p>Undefined or unspecified (default) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50"></a><!-- doxytag: member="fileformatInput" ref="a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50" args="" -->fileformatInput</em>&nbsp;</td><td>
<p>Read from an input file. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d"></a><!-- doxytag: member="userInput" ref="a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d" args="" -->userInput</em>&nbsp;</td><td>
<p>Added by the user. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392"></a><!-- doxytag: member="perceived" ref="a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392" args="" -->perceived</em>&nbsp;</td><td>
<p>Perceived by Open Babel library methods. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2"></a><!-- doxytag: member="external" ref="a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2" args="" -->external</em>&nbsp;</td><td>
<p>Added by an external program. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23"></a><!-- doxytag: member="local" ref="a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23" args="" -->local</em>&nbsp;</td><td>
<p>Not for routine external use (e.g. in sdf or cml properties) </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="aa88341c74a59194a8884e929f97b87b8"></a><!-- doxytag: member="OpenBabel::atomreftype" ref="aa88341c74a59194a8884e929f97b87b8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545"></a><!-- doxytag: member="output" ref="aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545" args="" -->output</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528"></a><!-- doxytag: member="input" ref="aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528" args="" -->input</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810"></a><!-- doxytag: member="calcvolume" ref="aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810" args="" -->calcvolume</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="ad5725304290545e0b3b549501893ce2f"></a><!-- doxytag: member="OpenBabel::score_t" ref="ad5725304290545e0b3b549501893ce2f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2f">score_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4"></a><!-- doxytag: member="Undefined" ref="ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4" args="" -->Undefined</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91"></a><!-- doxytag: member="PLP" ref="ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91" args="" -->PLP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c"></a><!-- doxytag: member="ChemScore" ref="ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c" args="" -->ChemScore</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="acf195409ac7024002db5c178f20862d9"></a><!-- doxytag: member="OpenBabel::obMessageLevel" ref="acf195409ac7024002db5c178f20862d9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9">obMessageLevel</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Levels of error and audit messages to allow filtering. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77"></a><!-- doxytag: member="obError" ref="acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77" args="" -->obError</em>&nbsp;</td><td>
<p>for critical errors (e.g., cannot read a file) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b"></a><!-- doxytag: member="obWarning" ref="acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b" args="" -->obWarning</em>&nbsp;</td><td>
<p>for non-critical problems (e.g., molecule appears empty) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814"></a><!-- doxytag: member="obInfo" ref="acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814" args="" -->obInfo</em>&nbsp;</td><td>
<p>for informative messages (e.g., file is a non-standard format) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310"></a><!-- doxytag: member="obAuditMsg" ref="acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310" args="" -->obAuditMsg</em>&nbsp;</td><td>
<p>for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce"></a><!-- doxytag: member="obDebug" ref="acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce" args="" -->obDebug</em>&nbsp;</td><td>
<p>for messages only useful for debugging purposes </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="a91e6912277f7537a670952698f7b2d82"></a><!-- doxytag: member="OpenBabel::errorQualifier" ref="a91e6912277f7537a670952698f7b2d82" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82">errorQualifier</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5"></a><!-- doxytag: member="always" ref="a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5" args="" -->always</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b"></a><!-- doxytag: member="onceOnly" ref="a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b" args="" -->onceOnly</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="a6b7b47dd702d9e331586d485013fd1ea"></a><!-- doxytag: member="OpenBabel::@18" ref="a6b7b47dd702d9e331586d485013fd1ea" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a6b7b47dd702d9e331586d485013fd1eaa9ec83f377b3c4e2b987789c1f273a8a3"></a><!-- doxytag: member="SPACE_GROUP_ID" ref="a6b7b47dd702d9e331586d485013fd1eaa9ec83f377b3c4e2b987789c1f273a8a3" args="" -->SPACE_GROUP_ID</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a6b7b47dd702d9e331586d485013fd1eaa732f4d3d79b99f8b9364cfc16e8003e6"></a><!-- doxytag: member="SPACE_GROUP_HALL" ref="a6b7b47dd702d9e331586d485013fd1eaa732f4d3d79b99f8b9364cfc16e8003e6" args="" -->SPACE_GROUP_HALL</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a6b7b47dd702d9e331586d485013fd1eaac6dbb396b7703e533fee3676da46fec7"></a><!-- doxytag: member="SPACE_GROUP_HM" ref="a6b7b47dd702d9e331586d485013fd1eaac6dbb396b7703e533fee3676da46fec7" args="" -->SPACE_GROUP_HM</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a6b7b47dd702d9e331586d485013fd1eaa6150efae0567911e2f8c49bacdce6ffa"></a><!-- doxytag: member="SPACE_GROUP_TRANSFORM" ref="a6b7b47dd702d9e331586d485013fd1eaa6150efae0567911e2f8c49bacdce6ffa" args="" -->SPACE_GROUP_TRANSFORM</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="af9bdc3014f3d54c426b6d2df10de4960"></a><!-- doxytag: member="OpenBabel::@19" ref="af9bdc3014f3d54c426b6d2df10de4960" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="af9bdc3014f3d54c426b6d2df10de4960a9d4d8b0b72fc2659da772d761a3c5ecb"></a><!-- doxytag: member="Left" ref="af9bdc3014f3d54c426b6d2df10de4960a9d4d8b0b72fc2659da772d761a3c5ecb" args="" -->Left</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af9bdc3014f3d54c426b6d2df10de4960ad48f7af8c070184f3774c8e85854eb66"></a><!-- doxytag: member="Right" ref="af9bdc3014f3d54c426b6d2df10de4960ad48f7af8c070184f3774c8e85854eb66" args="" -->Right</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af9bdc3014f3d54c426b6d2df10de4960a57a7edcbc04d6175683383cad5c3e0a2"></a><!-- doxytag: member="Up" ref="af9bdc3014f3d54c426b6d2df10de4960a57a7edcbc04d6175683383cad5c3e0a2" args="" -->Up</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af9bdc3014f3d54c426b6d2df10de4960abcf8c79e9a5f5f9d606fb35645a0fb27"></a><!-- doxytag: member="Down" ref="af9bdc3014f3d54c426b6d2df10de4960abcf8c79e9a5f5f9d606fb35645a0fb27" args="" -->Down</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a456fbf388c19a1a63a95fe60d28dd869"></a><!-- doxytag: member="OpenBabel::OBReleaseVersion" ref="a456fbf388c19a1a63a95fe60d28dd869" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OBReleaseVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the version of the Open Babel library for feature-detection (e.g. "2.3.1") </dd></dl>

</div>
</div>
<a class="anchor" id="aeb3b137500bda8573ee1aa5757011a66"></a><!-- doxytag: member="OpenBabel::Tanimoto" ref="aeb3b137500bda8573ee1aa5757011a66" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The Tanimoto coefficient, which may be regarded as the proportion of the "on-bits" which are shared. </p>
<p>The Tanimoto coefficient may be regarded as the proportion of the "on-bits" which are shared. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>the first bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>the second bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the ratio of shared bits to bits which either vector has set. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1FastSearch.shtml#aff36c0fb2899c7d30277788ddc536340">FastSearch::FindSimilar()</a>.</p>

</div>
</div>
<a class="anchor" id="a62d602f9ffb93ae1f37c2d3bbf010d77"></a><!-- doxytag: member="OpenBabel::CanonicalLabels" ref="a62d602f9ffb93ae1f37c2d3bbf010d77" args="(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const OBBitVec &amp;mask=OBBitVec(), int maxSeconds=5, bool onlyOne=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CanonicalLabels </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symmetry_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>canonical_labels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code>OBBitVec()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxSeconds</em> = <code>5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>onlyOne</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calculate the canonical labels for the molecule. Stereochemistry is included in the algorithm and the canonical labels. The result will be stored in <code>canonical_labels</code>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule. </td></tr>
    <tr><td class="paramname">symmetry_classes</td><td>The symmetry_classes for the molecule. These can be obtained using the <a class="el" href="classOpenBabel_1_1OBGraphSym.shtml" title="Handle and perceive graph symmtery for canonical numbering .">OBGraphSym</a> class. </td></tr>
    <tr><td class="paramname">canonical_labels</td><td>Reference to the object to store the results in. </td></tr>
    <tr><td class="paramname">mask</td><td>The fragment to label. When the bit for an atom is set, it is included in the fragment. If no bits are set, all atoms will be included. Atoms are indexed from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </td></tr>
    <tr><td class="paramname">maxSeconds</td><td>Timeout in seconds. </td></tr>
    <tr><td class="paramname">onlyOne</td><td>If true, the first found labels are returned. These are canonical labels without considering stereochemistry and other attributes not included in the symmetry classes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The canonical labels for the molecule in <code>canonical_labels</code>.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="canonical_code_algorithm.shtml">Canonical Coding Algorithm</a> </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>2.3 </dd></dl>

</div>
</div>
<a class="anchor" id="af4c135379236431c7436651de978ef32"></a><!-- doxytag: member="OpenBabel::GraphPotentials" ref="af4c135379236431c7436651de978ef32" args="(OBMol &amp;mol, std::vector&lt; double &gt; &amp;pot)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GraphPotentials </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>pot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the Graph Potentials of a molecule. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000026">Deprecated:</a></b></dt><dd></dd></dl>
<p>based on V.E. and Rozenblit, A.B. Golender <em>Logical and Combinatorial Algorithms for Drug Design</em>. <br/>
 For an example see: Walters, W. P., Yalkowsky, S. H., <em>JCICS</em>, 1996, 36(5), 1015-1017. <a href="http://dx.doi.org/10.1021/ci950278o">DOI: 10.1021/ci950278o</a> </p>

</div>
</div>
<a class="anchor" id="a49d9094d3843107b37a072e7e4597fc3"></a><!-- doxytag: member="OpenBabel::construct_g_matrix" ref="a49d9094d3843107b37a072e7e4597fc3" args="(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_g_matrix </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000027">Deprecated:</a></b></dt><dd></dd></dl>
<p>Construct the matrix G, which puts each atoms valence+1 on the diagonal and and -1 on the off diagonal if two atoms are connected. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a class="anchor" id="ae050b0cbe133308c07688d2438155504"></a><!-- doxytag: member="OpenBabel::construct_c_matrix" ref="ae050b0cbe133308c07688d2438155504" args="(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_c_matrix </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000028">Deprecated:</a></b></dt><dd></dd></dl>
<p>Construct the matrix C, which is simply a column vector consisting of the valence for each atom </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a class="anchor" id="ac8f591b34d70fd0063b836ddf6d8cdbc"></a><!-- doxytag: member="OpenBabel::CalcSignedVolume" ref="ac8f591b34d70fd0063b836ddf6d8cdbc" args="(OBMol &amp;mol, OBAtom *, bool ReZeroZ=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcSignedVolume </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ReZeroZ</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000029">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>
<p>Calculate the signed volume for an atom. If the atom has a valence of 3 the coordinates of an attached hydrogen are calculated Puts attached Hydrogen last at the moment, like mol V3000 format. If ReZero=false (the default is true) always make pseudo z coords and leave them in mol </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">GetChirality()</a>.</p>

</div>
</div>
<a class="anchor" id="a07c3e3dff340f78121cc2c15da53cdb2"></a><!-- doxytag: member="OpenBabel::signed_volume" ref="a07c3e3dff340f78121cc2c15da53cdb2" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double signed_volume </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate a signed volume given a set of 4 coordinates. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000030">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>.</p>

</div>
</div>
<a class="anchor" id="ad7009a91e72c28783be5346611efde3e"></a><!-- doxytag: member="OpenBabel::GetChirality" ref="ad7009a91e72c28783be5346611efde3e" args="(OBMol &amp;mol, std::vector&lt; int &gt; &amp;chirality)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetChirality </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>chirality</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000031">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

</div>
</div>
<a class="anchor" id="a7483e613b770424c7f1ff797900b9987"></a><!-- doxytag: member="OpenBabel::GetParity4Ref" ref="a7483e613b770424c7f1ff797900b9987" args="(std::vector&lt; unsigned int &gt; pref)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetParity4Ref </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>pref</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000032">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">CorrectChirality()</a>.</p>

</div>
</div>
<a class="anchor" id="abefbf418290927a56b3d124d3cc646d7"></a><!-- doxytag: member="OpenBabel::CorrectChirality" ref="abefbf418290927a56b3d124d3cc646d7" args="(OBMol &amp;mol, OBAtom *atm, atomreftype i=input, atomreftype o=output)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectChirality </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">atomreftype&#160;</td>
          <td class="paramname"><em>i</em> = <code>input</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">atomreftype&#160;</td>
          <td class="paramname"><em>o</em> = <code>output</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000033">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

</div>
</div>
<a class="anchor" id="aabfb2457435c6dd85d16016101b3e4d7"></a><!-- doxytag: member="OpenBabel::DoComparison" ref="aabfb2457435c6dd85d16016101b3e4d7" args="(char ch1, char ch2, T &amp;val, T &amp;filterval)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::DoComparison </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>filterval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349">OBDescriptor::Compare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">OBDescriptor::CompareStringWithFilter()</a>.</p>

</div>
</div>
<a class="anchor" id="ab5741f7ec581130f899f17f4d9477aea"></a><!-- doxytag: member="OpenBabel::print_matrix" ref="ab5741f7ec581130f899f17f4d9477aea" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab323a3745c477d9eb4c796786db39075"></a><!-- doxytag: member="OpenBabel::print_matrix_f" ref="ab323a3745c477d9eb4c796786db39075" args="(double *m, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac09eff5e59b6a7dd424dc71f4a37e464"></a><!-- doxytag: member="OpenBabel::print_matrix_ff" ref="ac09eff5e59b6a7dd424dc71f4a37e464" args="(double **m, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3b2b9be34ace132aa9506d9ee043824f"></a><!-- doxytag: member="OpenBabel::mult_matrix" ref="a3b2b9be34ace132aa9506d9ee043824f" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a class="anchor" id="a067494738d0f55b9df745866cdc3fe56"></a><!-- doxytag: member="OpenBabel::mult_matrix_f" ref="a067494738d0f55b9df745866cdc3fe56" args="(double *c, double *a, double *b, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a37830c949ab96aad9b5041a82895ba8e"></a><!-- doxytag: member="OpenBabel::mult_matrix_ff" ref="a37830c949ab96aad9b5041a82895ba8e" args="(double **c, double **a, double **b, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6e5ee2fd1515457cb4a6e9394a5a14ff"></a><!-- doxytag: member="OpenBabel::invert_matrix" ref="a6e5ee2fd1515457cb4a6e9394a5a14ff" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a class="anchor" id="afb96cdaafd5073c2e806d36ec4e7eef4"></a><!-- doxytag: member="OpenBabel::invert_matrix_f" ref="afb96cdaafd5073c2e806d36ec4e7eef4" args="(double *m, double &amp;det, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afa4aad5bde182eebe57cedcf1727b2fc"></a><!-- doxytag: member="OpenBabel::invert_matrix_ff" ref="afa4aad5bde182eebe57cedcf1727b2fc" args="(double **m, double &amp;det, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8580b3fa2a0435b2d073c22097d1d35e"></a><!-- doxytag: member="OpenBabel::convert_matrix_f" ref="a8580b3fa2a0435b2d073c22097d1d35e" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab06c9b9e02affa91406755a0b9fb28e1"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff" ref="ab06c9b9e02affa91406755a0b9fb28e1" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6b2a8069e01dd4287fb85f90a991972c"></a><!-- doxytag: member="OpenBabel::convert_matrix_f" ref="a6b2a8069e01dd4287fb85f90a991972c" args="(double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a050184ff6264447d6923e1be4df061b3"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff" ref="a050184ff6264447d6923e1be4df061b3" args="(double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8a3508df81e444f875d5f493a1bcbe28"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff_f" ref="a8a3508df81e444f875d5f493a1bcbe28" args="(double **src, double *dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff_f </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acbf2348ce7eae39aca355a630f06484c"></a><!-- doxytag: member="OpenBabel::convert_matrix_f_ff" ref="acbf2348ce7eae39aca355a630f06484c" args="(double *src, double **dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f_ff </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a47053116206f7c8cf7b278aec7e35cb1"></a><!-- doxytag: member="OpenBabel::hydrogenValency" ref="a47053116206f7c8cf7b278aec7e35cb1" args="(int na)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hydrogenValency </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>na</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a class="anchor" id="aa51b217d32346d4f341a227be63de160"></a><!-- doxytag: member="OpenBabel::maxValency" ref="aa51b217d32346d4f341a227be63de160" args="(int na)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int maxValency </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>na</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a class="anchor" id="a54363eb76ba264ec754bece9848198c8"></a><!-- doxytag: member="OpenBabel::alternate" ref="a54363eb76ba264ec754bece9848198c8" args="(OBMol *pmol, const int nH[], int bondOrders[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::alternate </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nH</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondOrders</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a207029ffc607d34863546dddbe014d6b"></a><!-- doxytag: member="OpenBabel::alternate" ref="a207029ffc607d34863546dddbe014d6b" args="(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int alternate </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPosition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aCharge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aRad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nHydr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrders</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aec2830d51995ac9802efa4aad43121ca"></a><!-- doxytag: member="OpenBabel::generateDiagram" ref="aec2830d51995ac9802efa4aad43121ca" args="(OBMol *pmol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a class="anchor" id="a827934a434ef208e2644aecb679ec930"></a><!-- doxytag: member="OpenBabel::generateDiagram" ref="a827934a434ef208e2644aecb679ec930" args="(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a742566d425db558fa968c725f8a708cc"></a><!-- doxytag: member="OpenBabel::generateDiagram" ref="a742566d425db558fa968c725f8a708cc" args="(OBMol *pmol, std::ostream &amp;ofs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a60aab5dcc934001076e5079960cb9be4"></a><!-- doxytag: member="OpenBabel::fragmentSearch" ref="a60aab5dcc934001076e5079960cb9be4" args="(OBMol *query, OBMol *structure)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fragmentSearch </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>structure</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa0561905f67fffeb3fae74b786fab642"></a><!-- doxytag: member="OpenBabel::fragmentSearch" ref="aa0561905f67fffeb3fae74b786fab642" args="(const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fragmentSearch </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPositionQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1Query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2Query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypesQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPositionStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1Structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2Structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypesStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtomsQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBondsQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtomsStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBondsStructure</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a16e9982dc3b96f14397fe55ede7b8f1f"></a><!-- doxytag: member="OpenBabel::equivalenceList" ref="a16e9982dc3b96f14397fe55ede7b8f1f" args="(OBMol *pmol, std::vector&lt; int &gt; &amp;eqList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equivalenceList </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Equivalence list generation. </p>

</div>
</div>
<a class="anchor" id="a6e78d25ada5c11fba4e216e1d782e5b7"></a><!-- doxytag: member="OpenBabel::equivalenceList" ref="a6e78d25ada5c11fba4e216e1d782e5b7" args="(const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equivalenceList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPosition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aCharge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aRad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adaa889d3747ea9e2ba1a83207556dce3"></a><!-- doxytag: member="OpenBabel::addFragment" ref="adaa889d3747ea9e2ba1a83207556dce3" args="(OBMol *molecule, OBMol *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void addFragment </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>molecule</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>fragment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>molAN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fragAN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>molBN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fragBN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isAddition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abce282c45ee77ea965aaacd47b4e8d72"></a><!-- doxytag: member="OpenBabel::createStereoLists" ref="abce282c45ee77ea965aaacd47b4e8d72" args="(OBMol *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void createStereoLists </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a29e765f8943f7aa7b50aca9380196e96"></a><!-- doxytag: member="OpenBabel::getAtomMCDL" ref="a29e765f8943f7aa7b50aca9380196e96" args="(OBMol *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getAtomMCDL </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ntatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>ix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atomStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acd680ed8783717254f074205cd6b24a4"></a><!-- doxytag: member="OpenBabel::getBondMCDL" ref="acd680ed8783717254f074205cd6b24a4" args="(OBMol *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[MAXBONDS][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getBondMCDL </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nbStore</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ntatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>ix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bonds</em>[MAXBONDS][4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3c50491b940d1a3d368bf7eba3bebfa1"></a><!-- doxytag: member="OpenBabel::implementAtomStereo" ref="a3c50491b940d1a3d368bf7eba3bebfa1" args="(std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void implementAtomStereo </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>stereoBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>acount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bcount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>astereo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a417a2925a2ec60c86ff3edc04ce4142c"></a><!-- doxytag: member="OpenBabel::implementBondStereo" ref="a417a2925a2ec60c86ff3edc04ce4142c" args="(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void implementBondStereo </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>acount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bcount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>bstereo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a23997cd29f45df86f90e4f7de02baccd"></a><!-- doxytag: member="OpenBabel::groupRedraw" ref="a23997cd29f45df86f90e4f7de02baccd" args="(OBMol *pmol, int bondN, int atomN, bool atomNInGroup)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int groupRedraw </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>atomNInGroup</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a82011594cefb0a924a4cc938800de614"></a><!-- doxytag: member="OpenBabel::canonizeMCDL" ref="a82011594cefb0a924a4cc938800de614" args="(const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int canonizeMCDL </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>atomBlock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>structureList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6a41a690c691e47bc63facef0e2e449d"></a><!-- doxytag: member="OpenBabel::parseFormula" ref="a6a41a690c691e47bc63facef0e2e449d" args="(const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool parseFormula </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>formulaString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>enumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>valency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aaa14c59df78025ce6e8dfd3f27feb106"></a><!-- doxytag: member="OpenBabel::prepareTest" ref="aaa14c59df78025ce6e8dfd3f27feb106" args="(OBMol *pmol, std::ostream &amp;ofs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void prepareTest </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a32ba50e0b43cb1dfdf1978d1e72099c5"></a><!-- doxytag: member="OpenBabel::ThrowError" ref="a32ba50e0b43cb1dfdf1978d1e72099c5" args="(char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Deprecated: use the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> class instead </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000091">Deprecated:</a></b></dt><dd>Throw an error through the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OpenBabel::OBMessageHandler</a> class </dd></dl>

</div>
</div>
<a class="anchor" id="ac9aac27fe3b12d7201f8eb7cb95a3c57"></a><!-- doxytag: member="OpenBabel::ThrowError" ref="ac9aac27fe3b12d7201f8eb7cb95a3c57" args="(std::string &amp;str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Deprecated: use the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> class instead </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000092">Deprecated:</a></b></dt><dd>Throw an error through the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OpenBabel::OBMessageHandler</a> class </dd></dl>

</div>
</div>
<a class="anchor" id="a7145217d4de73e243d2d3888dac404ba"></a><!-- doxytag: member="OpenBabel::CartesianToInternal" ref="a7145217d4de73e243d2d3888dac404ba" args="(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CartesianToInternal </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBInternalCoord * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert Cartesian XYZ to a set of <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> coordinates. </p>
<p>Use the supplied <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> and its Cartesian coordinates to generate a set of internal (z-matrix) coordinates as supplied in the vector&lt;OBInternalCoord*&gt; argument. Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#cartesianCoordinatesIntoZmatrixCoordinates">blue-obelisk:cartesianCoordinatesIntoZmatrixCoordinates</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af5afa8a0742e0238f3fd92ada82f079d">OBMol::GetInternalCoord()</a>.</p>

</div>
</div>
<a class="anchor" id="ae82e7b7b74e5212eada681c15afb77f4"></a><!-- doxytag: member="OpenBabel::InternalToCartesian" ref="ae82e7b7b74e5212eada681c15afb77f4" args="(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InternalToCartesian </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBInternalCoord * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert set of <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> coordinates into Cartesian XYZ. </p>
<p>Transform the supplied vector&lt;OBInternalCoord*&gt; into cartesian and update the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> accordingly. The size of supplied internal coordinate vector has to be the same as the number of atoms in molecule (+ NULL in the beginning). Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#zmatrixCoordinatesIntoCartesianCoordinates">blue-obelisk:zmatrixCoordinatesIntoCartesianCoordinates</a> </p>

</div>
</div>
<a class="anchor" id="ac1c62bdae6cf7a9195c470e7d0e29883"></a><!-- doxytag: member="OpenBabel::NewExtension" ref="ac1c62bdae6cf7a9195c470e7d0e29883" args="(string &amp;src, char *ext)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string NewExtension </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Utility function: replace the last extension in string &amp;src with new extension char *ext. </p>

</div>
</div>
<a class="anchor" id="a8aa7959b427e1c630f14732c2ad642c8"></a><!-- doxytag: member="OpenBabel::get_rmat" ref="a8aa7959b427e1c630f14732c2ad642c8" args="(double *, double *, double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_rmat </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>rvec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7e02cd2874a2a4826c8587da507f62ef"></a><!-- doxytag: member="OpenBabel::ob_make_rmat" ref="a7e02cd2874a2a4826c8587da507f62ef" args="(double mat[3][3], double rmat[9])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ob_make_rmat </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>rmat</em>[9]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa7ec675d10f9071757b87d4952938b65">get_roots_3_3()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">OBMol::ToInertialFrame()</a>.</p>

</div>
</div>
<a class="anchor" id="a594933a93529376dbae80405cf23afa8"></a><!-- doxytag: member="OpenBabel::qtrfit" ref="a594933a93529376dbae80405cf23afa8" args="(double *r, double *f, int size, double u[3][3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qtrfit </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>u</em>[3][3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2c5374c2c0b42dee2fd36cd475a3cb1c"></a><!-- doxytag: member="OpenBabel::superimpose" ref="a2c5374c2c0b42dee2fd36cd475a3cb1c" args="(double *, double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double superimpose </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a60625165cc16932d1c2f34976dbc54dd"></a><!-- doxytag: member="OpenBabel::rotate_coords" ref="a60625165cc16932d1c2f34976dbc54dd" args="(double *, double m[3][3], unsigned)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a25d610b9255993505f2dbdd9690d068f"></a><!-- doxytag: member="OpenBabel::calc_rms" ref="a25d610b9255993505f2dbdd9690d068f" args="(double *r, double *f, unsigned int N)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double calc_rms </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>N</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the RMS deviation between the first N coordinates of *r and *f. </p>

</div>
</div>
<a class="anchor" id="aae157b7c5a3145dff9e938888d41d46f"></a><!-- doxytag: member="OpenBabel::ToUpper" ref="aae157b7c5a3145dff9e938888d41d46f" args="(std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shift the supplied string to uppercase. </p>

</div>
</div>
<a class="anchor" id="a47cc993bd022dfca052b2b18f5cd89ea"></a><!-- doxytag: member="OpenBabel::ToUpper" ref="a47cc993bd022dfca052b2b18f5cd89ea" args="(char *cptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shift the supplied char* to uppercase. </p>

</div>
</div>
<a class="anchor" id="a8e8df618618aa53bf4cf202b0230c7ac"></a><!-- doxytag: member="OpenBabel::ToLower" ref="a8e8df618618aa53bf4cf202b0230c7ac" args="(std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shift the supplied string to lowercase. </p>

</div>
</div>
<a class="anchor" id="a47e5132fa26acd9f575c6c34e6337348"></a><!-- doxytag: member="OpenBabel::ToLower" ref="a47e5132fa26acd9f575c6c34e6337348" args="(char *cptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shift the supplied char* to lowercase. </p>

</div>
</div>
<a class="anchor" id="ae254bae8e13592739edfdf24b917a943"></a><!-- doxytag: member="OpenBabel::InvertCase" ref="ae254bae8e13592739edfdf24b917a943" args="(std::string &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::InvertCase </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a02a81294407df471b68048bb2bcfd503"></a><!-- doxytag: member="OpenBabel::InvertCase" ref="a02a81294407df471b68048bb2bcfd503" args="(char *cptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InvertCase </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shift the supplied char*: lowercase to upper, and upper to lower. </p>

</div>
</div>
<a class="anchor" id="ae7fd604c6cfd7cbb0067721106af8ca9"></a><!-- doxytag: member="OpenBabel::CleanAtomType" ref="ae7fd604c6cfd7cbb0067721106af8ca9" args="(char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CleanAtomType </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>"Clean" the supplied atom type </p>
<p>"Clean" the supplied atom type, shifting the first character to uppercase, the second character (if it's a letter) to lowercase, and terminating with a NULL to strip off any trailing characters </p>

</div>
</div>
<a class="anchor" id="a4216f2e0672bf6a9ee72d3029838a213"></a><!-- doxytag: member="OpenBabel::OBCompareInt" ref="a4216f2e0672bf6a9ee72d3029838a213" args="(const int &amp;a, const int &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareInt </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Comparison -- returns true if first parameter less than second </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <code>a</code> &lt; <code>b</code>, False otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="abb48ec7a1b3301248a1147cf2dbbe600"></a><!-- doxytag: member="OpenBabel::OBCompareUnsigned" ref="abb48ec7a1b3301248a1147cf2dbbe600" args="(const unsigned int &amp;a, const unsigned int &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareUnsigned </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Comparison -- returns true if first parameter less than second </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <code>a</code> &lt; <code>b</code>, False otherwise. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a362770307f86a3b9acd494d9ccbbcf51"></a><!-- doxytag: member="OpenBabel::IsNear" ref="a362770307f86a3b9acd494d9ccbbcf51" args="(const double &amp;a, const double &amp;b, const double epsilon)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNear </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>2e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Comparison for doubles: returns fabs(a - b) &lt; epsilon. </p>
<p>"Safe" comparison for floats/doubles: returns fabs(a - b) &lt; epsilon This function really doesn't make any sense w.r.t. floating-point representation, so you should never use it. It is provided only for backwards compatibility. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000062">Deprecated:</a></b></dt><dd>Use <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#af648d58ec31e39dff6af003f8e6b5ca4">OBConformerSearch::Search()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aabf7fa941ffdd2106f5f82f2afefa33f">OBForceField::WeightedRotorSearch()</a>.</p>

</div>
</div>
<a class="anchor" id="a29e51098e105d63b04b5517299d1b772"></a><!-- doxytag: member="OpenBabel::IsNearZero" ref="a29e51098e105d63b04b5517299d1b772" args="(const double &amp;a, const double epsilon)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNearZero </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>2e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Comparison for doubles: returns fabs(a) &lt; epsilon. </p>
<p>"Safe" comparison for floats/doubles: true if a is less than epsilon This function really doesn't make any sense w.r.t. floating-point representation, so you should never use it. It is provided only for backwards compatibility. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000063">Deprecated:</a></b></dt><dd></dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a735079ca73080f12512074483776d7ef">OBForceField::Newton2NumLineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a66aab9d4399b8502d330872181f51429">OBForceField::VectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#af031c62775e4d3374c0504d7af515ee0">OBForceField::VectorOOP()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5a156d1eea0507509cbb7f245999a31b">OBForceField::VectorTorsion()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a227ab5b29e8122dd6d8ac76d2b58778a"></a><!-- doxytag: member="OpenBabel::IsNan" ref="a227ab5b29e8122dd6d8ac76d2b58778a" args="(const double &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNan </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Comparison for nan (not a number) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">OBDescriptor::CompareStringWithFilter()</a>.</p>

</div>
</div>
<a class="anchor" id="ae3802301a4e7c389095313a77861a959"></a><!-- doxytag: member="OpenBabel::IsNegligible" ref="ae3802301a4e7c389095313a77861a959" args="(const double &amp;a, const double &amp;b, const double precision=1e&#45;11)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsNegligible </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>true if <em>a</em> is much smaller than <em>b</em>. More precisely: <div class="fragment"><pre class="fragment">   <span class="keywordflow">return</span>( fabs(a) &lt;= precision * fabs(b) );
</pre></div> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#ab7ad19aad80b487369bcafe789fd8c04">vector3::createOrthoVector()</a>, and <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#af6fefdc3ee1db949d064e63eabb5fdaa">matrix3x3::isDiagonal()</a>.</p>

</div>
</div>
<a class="anchor" id="af464b3279bc3db8c58ca552ddb0e8e79"></a><!-- doxytag: member="OpenBabel::IsApprox" ref="af464b3279bc3db8c58ca552ddb0e8e79" args="(const double &amp;a, const double &amp;b, const double precision=1e&#45;11)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsApprox </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Safe comparison for floats/doubles: true if fabs(a - b) &lt;= precision * std::min( fabs(a), fabs(b) ) The parameter precision plays the role of 10^-N where N is the number of significant digits to consider. This is the correct way to replace operator== for doubles. For new code, use this function instead of the old <a class="el" href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51" title="Comparison for doubles: returns fabs(a - b) &lt; epsilon.">IsNear()</a> function.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>To check if x is zero, use <div class="fragment"><pre class="fragment">   <a class="code" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">IsNegligible</a>( x, 1.0)
</pre></div> instead of <div class="fragment"><pre class="fragment">   <a class="code" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a>( x, 0.0 )
</pre></div> </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a95568e46d8e27b457e2ee1bcaba5daa5">OBUnitCell::GetLatticeType()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a17ea6953708a00e57d99aaf52495f62a">matrix3x3::isSymmetric()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#aa95d7e7bec24e89ad8ff73a47607b1f8">matrix3x3::isUnitMatrix()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a470b9e69978e49f27b85b48077bd7c72"></a><!-- doxytag: member="OpenBabel::IsApprox_pos" ref="a470b9e69978e49f27b85b48077bd7c72" args="(const double &amp;a, const double &amp;b, const double precision=1e&#45;11)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsApprox_pos </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Same as <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox()</a>, but only for positive numbers. Faster. </p>

</div>
</div>
<a class="anchor" id="a95b1c21368d148cb45ac6f604984c357"></a><!-- doxytag: member="OpenBabel::CanBeSquared" ref="a95b1c21368d148cb45ac6f604984c357" args="(const double &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CanBeSquared </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tests whether its argument can be squared without triggering an overflow or underflow. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a42a186aba6d262b1ce632ee90fb25e60">vector3::CanBeNormalized()</a>.</p>

</div>
</div>
<a class="anchor" id="a1e68658ca81568e214ebedb8f6c4bd10"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="a1e68658ca81568e214ebedb8f6c4bd10" args="(std::ifstream &amp;fs, const char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> error log if it fails. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a034c6dd9973dc10ecb7cab1e58a683fa">SafeOpen()</a>.</p>

</div>
</div>
<a class="anchor" id="a0d523299532d6b282919923e731771ee"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="a0d523299532d6b282919923e731771ee" args="(std::ofstream &amp;fs, const char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ofstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> error log if it fails. </p>

</div>
</div>
<a class="anchor" id="a6b397e6876fbb7f13d0e4a3cac7edfdc"></a><!-- doxytag: member="OpenBabel::SmartsLexReplace" ref="a6b397e6876fbb7f13d0e4a3cac7edfdc" args="(std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a28466e08c61853737ac9bdeaeee495cc"></a><!-- doxytag: member="OpenBabel::DoubleMultiply" ref="a28466e08c61853737ac9bdeaeee495cc" args="(unsigned int, unsigned int, DoubleType *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleMultiply </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DoubleType *&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency()</a>, <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a class="anchor" id="a7fe18b3a86010f2fbbeeda7a6ed635a4"></a><!-- doxytag: member="OpenBabel::DoubleAdd" ref="a7fe18b3a86010f2fbbeeda7a6ed635a4" args="(DoubleType *, unsigned int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleAdd </td>
          <td>(</td>
          <td class="paramtype">DoubleType *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a class="anchor" id="aa995f2456608bb27a86fef9460f9e8e0"></a><!-- doxytag: member="OpenBabel::DoubleModulus" ref="aa995f2456608bb27a86fef9460f9e8e0" args="(DoubleType *, unsigned int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int DoubleModulus </td>
          <td>(</td>
          <td class="paramtype">DoubleType *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency()</a>, <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a class="anchor" id="a8ae850aac19b7a1ff3c02b6f3c17d36f"></a><!-- doxytag: member="OpenBabel::CompareRingSize" ref="a8ae850aac19b7a1ff3c02b6f3c17d36f" args="(const OBRing *, const OBRing *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRingSize </td>
          <td>(</td>
          <td class="paramtype">const OBRing *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBRing *&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Comparison function for rings, used by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503" title="Sort ring sizes from smallest to largest.">OBRingSearch::SortRings()</a> </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if a.size() &gt; b.size() </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">OBRingSearch::SortRings()</a>.</p>

</div>
</div>
<a class="anchor" id="a8b1ba3c73d4038fd69729fbeb588008a"></a><!-- doxytag: member="OpenBabel::Swab" ref="a8b1ba3c73d4038fd69729fbeb588008a" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Swab </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Swap Byte instruction (i.e., handle transfers between endian forms) </p>

</div>
</div>
<a class="anchor" id="a1607444ae7cfbd6dcae449f9cb77b0e3"></a><!-- doxytag: member="OpenBabel::tokenize" ref="a1607444ae7cfbd6dcae449f9cb77b0e3" args="(std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \t\n\r&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delimstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1patty.shtml#a55dcef5a39d6765d545e79cff377d332">patty::assign_rules()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classDLHandler.shtml#afbc430181268f2ea18cf3f5a9a6198ab">DLHandler::findFiles()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ae59fef8af62e52629bf2576e34a26801">OBRotorRules::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBIsotopeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBTypeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#ae59fef8af62e52629bf2576e34a26801">OBResidueData::ParseLine()</a>, and <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>.</p>

</div>
</div>
<a class="anchor" id="a932114672402053a4208861b2b600506"></a><!-- doxytag: member="OpenBabel::tokenize" ref="a932114672402053a4208861b2b600506" args="(std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n\r&quot;, int limit=&#45;1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delimstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>limit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) Only breaks at most 'limit' tokens and the last item in the vector may include un-parsed tokens. </p>

</div>
</div>
<a class="anchor" id="ae8d9d7dd615b5fa7b533c075fe744d8f"></a><!-- doxytag: member="OpenBabel::Trim" ref="ae8d9d7dd615b5fa7b533c075fe744d8f" args="(std::string &amp;txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string &amp; Trim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove leading and trailing whitespace from a string (docs in <a class="el" href="tokenst_8cpp.shtml" title="Tokenize a string.">tokenst.cpp</a>) </p>
<p>Removes white space from front and back of string. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">OBMol::GetSpacedFormula()</a>, <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#a71ec30c014852fe90aed06daa76e378b">OBCommentData::SetData()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">OBMol::SetTitle()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6af450f7e3ad5ffd27fb56461dcd177"></a><!-- doxytag: member="OpenBabel::toString" ref="ac6af450f7e3ad5ffd27fb56461dcd177" args="(T val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::toString </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a9858bede3a0f272573c0173a947bea18"></a><!-- doxytag: member="OpenBabel::ignore" ref="a9858bede3a0f272573c0173a947bea18" args="(std::istream &amp;ifs, const std::string &amp;txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream &amp; ignore </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read and discard all characters from input stream up to, and including, a string. </p>
<p>Read and discard all characters from input stream upto the occurence of a string </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ifs</td><td>The input file stream. </td></tr>
    <tr><td class="paramname">txt</td><td>(which is also discarded), or the end of the stream. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the stream. </dd></dl>

</div>
</div>
<a class="anchor" id="add34ce6b9be332e5d87fd5087d4dc38d"></a><!-- doxytag: member="OpenBabel::OpenDatafile" ref="add34ce6b9be332e5d87fd5087d4dc38d" args="(std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenDatafile </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>envvar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Opens a datafile in a directory where <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> expects to find it. </p>
<p>Opens the filestream with the first file called <code>filename</code> found by looking successively in the following directories:</p>
<ul>
<li>the current directory</li>
<li>in a subdirectory (of the directory below) with the version of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> as its name</li>
<li>the parent directory specified by the environment variable named <code>envvar</code> or "BABEL_DATADIR" if <code>envvar</code> is not specified, or the compiled-in macro BABEL_DATADIR if the environment variable is not set</li>
</ul>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ifs</td><td>Stream to load </td></tr>
    <tr><td class="paramname">filename</td><td>Name of the data file to load </td></tr>
    <tr><td class="paramname">envvar</td><td>Name of the environment variable</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the name of the file that was opened. This includes the path unless it is in current directory </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>.</p>

</div>
</div>
<a class="anchor" id="af1a9769dcdfc9bb77a3747a3c89c3d03"></a><!-- doxytag: member="OpenBabel::center_coords" ref="af1a9769dcdfc9bb77a3747a3c89c3d03" args="(double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::center_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a70c653ee69fdbd27f77d430e4aed3cad"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="a70c653ee69fdbd27f77d430e4aed3cad" args="(std::ostream &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Prints a representation of the vector as a row vector of the form "&lt;0.1,1,2&gt;". </p>

</div>
</div>
<a class="anchor" id="adc7b25b0ba45ce8f90a2519c03322e4a"></a><!-- doxytag: member="OpenBabel::operator+" ref="adc7b25b0ba45ce8f90a2519c03322e4a" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator+ </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector addition. </p>

</div>
</div>
<a class="anchor" id="aa2e0e5d4e59766809b5b61ab9b513a2e"></a><!-- doxytag: member="OpenBabel::operator&#45;" ref="aa2e0e5d4e59766809b5b61ab9b513a2e" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Vector subtraction. </p>

</div>
</div>
<a class="anchor" id="a8bcf1e708be0fbc503f83952c3a99cd4"></a><!-- doxytag: member="OpenBabel::operator&#45;" ref="a8bcf1e708be0fbc503f83952c3a99cd4" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unary minus. </p>

</div>
</div>
<a class="anchor" id="a56b20579149ab8b5807475d4302c33a2"></a><!-- doxytag: member="OpenBabel::operator*" ref="a56b20579149ab8b5807475d4302c33a2" args="(const double &amp;c, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Multiplication with a scalar. </p>

</div>
</div>
<a class="anchor" id="ac5dcc9191fa15d332a546a975cb72952"></a><!-- doxytag: member="OpenBabel::operator*" ref="ac5dcc9191fa15d332a546a975cb72952" args="(const vector3 &amp;v, const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Multiplication with a scalar. </p>

</div>
</div>
<a class="anchor" id="af855844c28abaaafbf21c5835a8e81d4"></a><!-- doxytag: member="OpenBabel::operator/" ref="af855844c28abaaafbf21c5835a8e81d4" args="(const vector3 &amp;v, const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator/ </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Division by a scalar. </p>

</div>
</div>
<a class="anchor" id="a2ed22257c15dc44557c1c275c99d127d"></a><!-- doxytag: member="OpenBabel::operator*" ref="a2ed22257c15dc44557c1c275c99d127d" args="(const matrix3x3 &amp;m, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Multiplication of matrix and vector. </p>
<p>Matrix-vector multiplication.</p>
<p>Calculates the product m*v of the matrix m and the column vector represented by v </p>

</div>
</div>
<a class="anchor" id="a32a70eb5e04f4e10a386089723f05b2a"></a><!-- doxytag: member="OpenBabel::dot" ref="a32a70eb5e04f4e10a386089723f05b2a" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::dot </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Dot product of two vectors. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a68dc2c35a1e58febaa9e13cd82e3a50f"></a><!-- doxytag: member="OpenBabel::cross" ref="a68dc2c35a1e58febaa9e13cd82e3a50f" args="(const vector3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> cross </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Cross product of two vectors. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">InternalToCartesian()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">Point2Line()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a00e2879019f2fb0fc689a7e5cb5d2008"></a><!-- doxytag: member="OpenBabel::vectorAngle" ref="a00e2879019f2fb0fc689a7e5cb5d2008" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double vectorAngle </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the angle between vectors (in degrees) </p>
<p>This method calculates the angle between two vectors</p>
<dl class="warning"><dt><b>Warning:</b></dt><dd>If length() of any of the two vectors is == 0.0, this method will divide by zero. If the product of the length() of the two vectors is very close to 0.0, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the length()es are in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000097">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000015">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the angle in degrees (0-360) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae9468871377da00c7b949b20d6d17f3d">OBAtom::AverageBondAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a6897ba879a5e0f5ac4ac5aefeb94601d">OBUnitCell::GetAlpha()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a8b788f95c3fa1f2cc9aedaa1b92b78a1">OBUnitCell::GetBeta()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a53b3c98860a330a6b95074945fc2895f">OBUnitCell::GetGamma()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aa087a37fcd1c8b08d5d58277caefbc9a">OBUnitCell::SetData()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a83db73f33e51b011f21358bd5a0463ff">OBAtom::SmallestBondAngle()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a62d62b3487ca8969bdfbd7c434da564e"></a><!-- doxytag: member="OpenBabel::CalcTorsionAngle" ref="a62d62b3487ca8969bdfbd7c434da564e" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcTorsionAngle </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the torsion angle between vectors (in degrees) </p>
<p>This function calculates the torsion angle of three vectors, represented by four points A--B--C--D, i.e. B and C are vertexes, but none of A--B, B--C, and C--D are colinear. A "torsion angle" is the amount of "twist" or torsion needed around the B--C axis to bring A--B into the same plane as B--C--D. The torsion is measured by "looking down" the vector B--C so that B is superimposed on C, then noting how far you'd have to rotate A--B to superimpose A over D. Angles are + in theanticlockwise direction. The operation is symmetrical in that if you reverse the image (look from C to B and rotate D over A), you get the same answer. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a401a725a0efbc20c49783f176d78e6a7">OBMol::GetTorsion()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#aed0dfa6939f68b337f13fbcf4e0f3da7">OBBond::IsDoubleBondGeometry()</a>.</p>

</div>
</div>
<a class="anchor" id="a1fa4ebe11664cfe4759ea7ccaa3abbb9"></a><!-- doxytag: member="OpenBabel::Point2PlaneSigned" ref="a1fa4ebe11664cfe4759ea7ccaa3abbb9" args="(vector3 a, vector3 b, vector3 c, vector3 d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2PlaneSigned </td>
          <td>(</td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the signed distance of point a to the plane determined by b,c,d. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane()</a>.</p>

</div>
</div>
<a class="anchor" id="ad0e0c09ef7c92973447c46d3ad3f3f8d"></a><!-- doxytag: member="OpenBabel::Point2Plane" ref="ad0e0c09ef7c92973447c46d3ad3f3f8d" args="(vector3 a, vector3 b, vector3 c, vector3 d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2Plane </td>
          <td>(</td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the distance of point a to the plane determined by b,c,d. </p>

</div>
</div>
<a class="anchor" id="a29227290e6e6931c009942836a21e5df"></a><!-- doxytag: member="OpenBabel::Point2PlaneAngle" ref="a29227290e6e6931c009942836a21e5df" args="(const vector3 a, const vector3 b, const vector3 c, const vector3 d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2PlaneAngle </td>
          <td>(</td>
          <td class="paramtype">const vector3&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the angle between point a and the plane determined by b,c,d. </p>

</div>
</div>
<a class="anchor" id="a32827b2955824019ff9a7e0a4ebfcd64"></a><!-- doxytag: member="OpenBabel::Point2Line" ref="a32827b2955824019ff9a7e0a4ebfcd64" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2Line </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate the distance of a point a to a line determined by b and c. </p>

</div>
</div>
<a class="anchor" id="a56bd19e6ce3d11cd0ccdc0420e91ada3"></a><!-- doxytag: member="OpenBabel::ApplyRotMatToBond" ref="a56bd19e6ce3d11cd0ccdc0420e91ada3" args="(OBMol &amp;mol, matrix3x3 &amp;m, OBAtom *a1, OBAtom *a2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ApplyRotMatToBond </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>a2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="a48ed8b37310a8d7153a64309f09901a0"></a><!-- doxytag: member="OpenBabel::operator|" ref="a48ed8b37310a8d7153a64309f09901a0" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator| </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return a bit vector of the results of Or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a327b6158a69368530d30de5ce06cc7a5"></a><!-- doxytag: member="OpenBabel::operator&amp;" ref="a327b6158a69368530d30de5ce06cc7a5" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return a bit vector of the results of And-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="aa2cf1233a6c6ce53b79f94b7a60d2d2a"></a><!-- doxytag: member="OpenBabel::operator^" ref="aa2cf1233a6c6ce53b79f94b7a60d2d2a" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator^ </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return a bit vector of the results of Exclusive-or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="a682eec6ce003f48a6098d6700e3cedba"></a><!-- doxytag: member="OpenBabel::operator&#45;" ref="a682eec6ce003f48a6098d6700e3cedba" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return a bit vector of the results of clearing each bit in <code>bv1</code> which is set in <code>bv2</code> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div>
<a class="anchor" id="ac001b331f648fbbd8590576f59d4d2ab"></a><!-- doxytag: member="OpenBabel::operator==" ref="ac001b331f648fbbd8590576f59d4d2ab" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::operator== </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return true if <code>bv1</code> and <code>bv2</code> are equivalent Not that they may be of different size, and still equivalent provided that the extra bits are all zero. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a3ba5fcca1ecb1241049411be7017186d"></a><!-- doxytag: member="OpenBabel::operator&lt;" ref="a3ba5fcca1ecb1241049411be7017186d" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Return true if <code>bv1</code> i less than <code>bv2</code> Lexicographical order, with bit vectors written LSB first. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a54358a339fc06df028bb5fbe403b0032"></a><!-- doxytag: member="OpenBabel::operator&gt;&gt;" ref="a54358a339fc06df028bb5fbe403b0032" args="(std::istream &amp;is, OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; OpenBabel::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sets bits on, listed as a string of character-represented integers in a stream Only reads one line of input The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE or HTAB For example "[ 1 5 6 9 ]" </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">is</td><td>The input stream </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">bv</td><td>The bit vector to contain the result </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a42db9af61dccd8f586f358058b78d1cc"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="a42db9af61dccd8f586f358058b78d1cc" args="(std::ostream &amp;os, const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Output this bit vector to a stream The format is "[ n0 n1 n2 n3 ... ]". The whitespace is SPACE For example "[ 1 5 6 9 ]" </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>The output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>The bit vector to be output </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a69c4665c3756720ac6f0d62b2488fdd6"></a><!-- doxytag: member="OpenBabel::GetCorrectedBondVector" ref="a69c4665c3756720ac6f0d62b2488fdd6" args="(OBAtom *atom1, OBAtom *atom2, int bondOrder=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::GetCorrectedBondVector </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondOrder</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a class="anchor" id="ac166197716f00da13cdac1c0cee85975"></a><!-- doxytag: member="OpenBabel::CompareBondPairSecond" ref="ac166197716f00da13cdac1c0cee85975" args="(const std::pair&lt; OBBond *, unsigned int &gt; &amp;a, const std::pair&lt; OBBond *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareBondPairSecond </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; OBBond *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; OBBond *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a723b609c4e82a3b0ae91f4aa44196740"></a><!-- doxytag: member="OpenBabel::addNbrs" ref="a723b609c4e82a3b0ae91f4aa44196740" args="(OBBitVec &amp;fragment, OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::addNbrs </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>fragment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>metalloceneBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Helper function for getFragment below. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a04fb8cae80f1866e2921853c509b07b4">getFragment()</a>.</p>

</div>
</div>
<a class="anchor" id="a04fb8cae80f1866e2921853c509b07b4"></a><!-- doxytag: member="OpenBabel::getFragment" ref="a04fb8cae80f1866e2921853c509b07b4" args="(OBAtom *atom, const OBBitVec &amp;mask, const std::vector&lt; OBBond * &gt; &amp;metalloceneBonds=std::vector&lt; OBBond * &gt;())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> getFragment </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>metalloceneBonds</em> = <code>std::vector&lt;&#160;OBBond&#160;*&#160;&gt;()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create an <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> objects with bets set for the fragment consisting of all atoms for which there is a path to atom without going through skip. These fragment bitvecs are indexed by atom idx (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a80892a7fdfc7180a85160279c1186952">OBAtom::GetIdx()</a>). </p>

<p>Referenced by <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">FindAutomorphisms()</a>.</p>

</div>
</div>
<a class="anchor" id="a0e3ffef22e9d0e3a960e1ddc3c7a3af0"></a><!-- doxytag: member="OpenBabel::getFragment" ref="a0e3ffef22e9d0e3a960e1ddc3c7a3af0" args="(OBAtom *atom, OBAtom *skip, const OBBitVec &amp;mask)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::getFragment </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>skip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="add2cdb4d7ec3918bac8fa18eb32d4d4c"></a><!-- doxytag: member="OpenBabel::isFerroceneBond" ref="add2cdb4d7ec3918bac8fa18eb32d4d4c" args="(OBBond *bond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isFerroceneBond </td>
          <td>(</td>
          <td class="paramtype">OBBond *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abfb2d29563ee1a81f2e70a51d55c83cf">CompileAutomorphismQuery()</a>.</p>

</div>
</div>
<a class="anchor" id="a0e9fff5044095331af29c5b0781557c4"></a><!-- doxytag: member="OpenBabel::findMetalloceneBonds" ref="a0e9fff5044095331af29c5b0781557c4" args="(std::vector&lt; OBBond * &gt; &amp;bonds, OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::findMetalloceneBonds </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>bonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symmetry_classes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">CanonicalLabels()</a>.</p>

</div>
</div>
<a class="anchor" id="a818fd93f0aa1e1f5b3c63bbbc8013cca"></a><!-- doxytag: member="OpenBabel::AllocateByteCode" ref="a818fd93f0aa1e1f5b3c63bbbc8013cca" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a>* OpenBabel::AllocateByteCode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="acc9426f6c6d58198a97d8c726660559d"></a><!-- doxytag: member="OpenBabel::DeleteByteCode" ref="acc9426f6c6d58198a97d8c726660559d" args="(ByteCode *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::DeleteByteCode </td>
          <td>(</td>
          <td class="paramtype">ByteCode *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Free a ByteCode and all corresponding data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a59c2e046bb935ac3eba0d3b003d10176"></a><!-- doxytag: member="OpenBabel::FatalMemoryError" ref="a59c2e046bb935ac3eba0d3b003d10176" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalMemoryError </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a1748035db13037545433f80148a7c928"></a><!-- doxytag: member="OpenBabel::GenerateByteCodes" ref="a1748035db13037545433f80148a7c928" args="(ByteCode **node, int resid, int curr, int prev, int bond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateByteCodes </td>
          <td>(</td>
          <td class="paramtype">ByteCode **&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>curr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1ea11acf2b1952b517470849055dd9d9"></a><!-- doxytag: member="OpenBabel::Toupper" ref="a1ea11acf2b1952b517470849055dd9d9" args="(string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Toupper </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1853c7aae336e34aaf9e3bf5098f6998"></a><!-- doxytag: member="OpenBabel::Tolower" ref="a1853c7aae336e34aaf9e3bf5098f6998" args="(string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Tolower </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a399f52de3bc4ed70a70547a39416dff4"></a><!-- doxytag: member="OpenBabel::Reweight" ref="a399f52de3bc4ed70a70547a39416dff4" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;rotorWeights, std::vector&lt; int &gt; rotorKey, double bonus)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Reweight </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>rotorWeights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>rotorKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>bonus</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aabf7fa941ffdd2106f5f82f2afefa33f">OBForceField::WeightedRotorSearch()</a>.</p>

</div>
</div>
<a class="anchor" id="ab30451b430cbfd12c3cc861985766628"></a><!-- doxytag: member="OpenBabel::transformedFractionalCoordinate" ref="ab30451b430cbfd12c3cc861985766628" args="(vector3 originalCoordinate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::transformedFractionalCoordinate </td>
          <td>(</td>
          <td class="paramtype">vector3&#160;</td>
          <td class="paramname"><em>originalCoordinate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>.</p>

</div>
</div>
<a class="anchor" id="a0876587a9edcb8d17a70923e424e3169"></a><!-- doxytag: member="OpenBabel::CompareUnsigned" ref="a0876587a9edcb8d17a70923e424e3169" args="(const unsigned int &amp;a, const unsigned int &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareUnsigned </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Functions for use by the sort() method of a vector. </p>

</div>
</div>
<a class="anchor" id="a669ac61cfe4be78e8624b31b39179a9c"></a><!-- doxytag: member="OpenBabel::ComparePairFirst" ref="a669ac61cfe4be78e8624b31b39179a9c" args="(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ComparePairFirst </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a76bfba8476b7512138a477265edc4476"></a><!-- doxytag: member="OpenBabel::ComparePairSecond" ref="a76bfba8476b7512138a477265edc4476" args="(const std::pair&lt; OBAtom *, unsigned int &gt; &amp;a, const std::pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ComparePairSecond </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adfcd0e581453354d7c779541ec58c491"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="adfcd0e581453354d7c779541ec58c491" args="(ostream &amp;os, const OBFloatGrid &amp;fg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBFloatGrid &amp;&#160;</td>
          <td class="paramname"><em>fg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adc71eb19ad3b4c729264738f6d69d1d3"></a><!-- doxytag: member="OpenBabel::operator&gt;&gt;" ref="adc71eb19ad3b4c729264738f6d69d1d3" args="(istream &amp;is, OBFloatGrid &amp;fg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">istream&amp; OpenBabel::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBFloatGrid &amp;&#160;</td>
          <td class="paramname"><em>fg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5c3704ad0910c8279aa1e1e79c300369"></a><!-- doxytag: member="OpenBabel::print_vector" ref="a5c3704ad0910c8279aa1e1e79c300369" args="(const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::print_vector </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>label</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abfb2d29563ee1a81f2e70a51d55c83cf"></a><!-- doxytag: member="OpenBabel::CompileAutomorphismQuery" ref="abfb2d29563ee1a81f2e70a51d55c83cf" args="(OBMol *mol, const OBBitVec &amp;mask, const std::vector&lt; unsigned int &gt; &amp;symClasses)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>* OpenBabel::CompileAutomorphismQuery </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symClasses</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">FindAutomorphisms()</a>.</p>

</div>
</div>
<a class="anchor" id="a6239f809ba8a88712a94f2a6bb90a485"></a><!-- doxytag: member="OpenBabel::FindAutomorphisms" ref="a6239f809ba8a88712a94f2a6bb90a485" args="(OBMol *mol, Automorphisms &amp;maps, const OBBitVec &amp;mask, std::size_t maxMemory)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::FindAutomorphisms </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Automorphisms &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>maxMemory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4e9dbdc3dacbdf4b8ac6e48baba7bc35"></a><!-- doxytag: member="OpenBabel::FindAutomorphisms" ref="a4e9dbdc3dacbdf4b8ac6e48baba7bc35" args="(OBMol *mol, Automorphisms &amp;maps, const std::vector&lt; unsigned int &gt; &amp;symClasses, const OBBitVec &amp;mask, std::size_t maxMemory)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::FindAutomorphisms </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Automorphisms &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symClasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>maxMemory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a31ce8b089ca36508940585406a2f93f1"></a><!-- doxytag: member="OpenBabel::expand_cycle" ref="a31ce8b089ca36508940585406a2f93f1" args="(OBMol *mol, OBAtom *atom, OBBitVec &amp;avisit, OBBitVec &amp;cvisit, const OBBitVec &amp;potAromBonds, int rootIdx, Timeout &amp;timeout, int prevAtomIdx, int depth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int expand_cycle </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>cvisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>potAromBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rootIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Timeout &amp;&#160;</td>
          <td class="paramname"><em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prevAtomIdx</em> = <code>-1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em> = <code>MAX_DEPTH</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Recursively find the aromatic atoms with an aromatic bond to the current atom. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a62de79552e98ffdb88a9b8509a705158"></a><!-- doxytag: member="OpenBabel::expandKekulize" ref="a62de79552e98ffdb88a9b8509a705158" args="(OBMol *mol, int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, Timeout &amp;timeout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool expandKekulize </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Timeout &amp;&#160;</td>
          <td class="paramname"><em>timeout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400">OBMol::expand_kekulize()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a9645071cedc98dac304402a63e32d700"></a><!-- doxytag: member="OpenBabel::expand_kekulize_lssr" ref="a9645071cedc98dac304402a63e32d700" args="(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, std::vector&lt; OBRing * &gt; &amp;lssr, std::vector&lt; bool &gt; &amp;lssrAssigned, std::vector&lt; OBBond * &gt; &amp;bondsThisRing)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool expand_kekulize_lssr </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; OBRing * &gt; &amp;&#160;</td>
          <td class="paramname"><em>lssr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>lssrAssigned</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondsThisRing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>NEW ANALYSIS methods: rely on LSSR methods to only target one ring. Works much faster on fullerens, graphene, etc. </p>
<p>Recursive function to find a sensible kekule assignment of single and double bonds for an aromatic ring system. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a class="anchor" id="a8a423a9a023698abe77ee30550619f54"></a><!-- doxytag: member="OpenBabel::count_assigned_bonds" ref="a8a423a9a023698abe77ee30550619f54" args="(std::vector&lt; OBBond * &gt; &amp;bondsThisRing, std::vector&lt; int &gt; &amp;bondState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::count_assigned_bonds </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondsThisRing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">expand_kekulize_lssr()</a>.</p>

</div>
</div>
<a class="anchor" id="a7b44d43b56950aff23fbca88664ad996"></a><!-- doxytag: member="OpenBabel::isPotentialAromaticAtom" ref="a7b44d43b56950aff23fbca88664ad996" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::isPotentialAromaticAtom </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">potentialAromaticBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a7e62ffcac6073c5fb792d2f5bc62c522"></a><!-- doxytag: member="OpenBabel::potentialAromaticBonds" ref="a7e62ffcac6073c5fb792d2f5bc62c522" args="(OBMol *mol, OBBitVec &amp;bonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::potentialAromaticBonds </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>atom is temp crash prevention </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="adbf96b6f2307d00a5f525ecc3a4c5bca"></a><!-- doxytag: member="OpenBabel::get_bonds_of_ring" ref="adbf96b6f2307d00a5f525ecc3a4c5bca" args="(OBMol *mol, OBRing *ring, std::vector&lt; OBBond * &gt; &amp;ring_bonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::get_bonds_of_ring </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBRing *&#160;</td>
          <td class="paramname"><em>ring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; OBBond * &gt; &amp;&#160;</td>
          <td class="paramname"><em>ring_bonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Returns a vector of the bonds in a ring, in circular order around the ring, </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">expand_kekulize_lssr()</a>.</p>

</div>
</div>
<a class="anchor" id="a67f559671aa9d68ce3888baab8f7fc1a"></a><!-- doxytag: member="OpenBabel::has_leftover_electrons" ref="a67f559671aa9d68ce3888baab8f7fc1a" args="(OBMol *mol, std::vector&lt; int &gt; &amp;atomState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::has_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a9645071cedc98dac304402a63e32d700">expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8300dbbf33e0da417f98d846442e6b1">OBMol::has_no_leftover_electrons()</a>.</p>

</div>
</div>
<a class="anchor" id="a07faa5acbed4a3cbbfd0d711321c0439"></a><!-- doxytag: member="OpenBabel::has_leftover_electrons" ref="a07faa5acbed4a3cbbfd0d711321c0439" args="(OBMol *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::has_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa57c0c18ebfc17ba6f962725101ab5b3"></a><!-- doxytag: member="OpenBabel::restoreDoubleBonds" ref="aa57c0c18ebfc17ba6f962725101ab5b3" args="(TEditedMolecule &amp;sm, bool putEither)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool restoreDoubleBonds </td>
          <td>(</td>
          <td class="paramtype">TEditedMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>putEither</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">generateDiagram()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>.</p>

</div>
</div>
<a class="anchor" id="ae4c78efdf4d582451d8d0c323d98f205"></a><!-- doxytag: member="OpenBabel::intToStr" ref="ae4c78efdf4d582451d8d0c323d98f205" args="(int k)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string OpenBabel::intToStr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a5eeac49565ab1fdcb863f31f41ec2f5f"></a><!-- doxytag: member="OpenBabel::xDistPoint" ref="a5eeac49565ab1fdcb863f31f41ec2f5f" args="(double x1, double y1, double x2, double y2, double x0, double y0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::xDistPoint </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acb3b0f424f25beb57a312c1a679f3b0c">overlapped()</a>.</p>

</div>
</div>
<a class="anchor" id="acb3b0f424f25beb57a312c1a679f3b0c"></a><!-- doxytag: member="OpenBabel::overlapped" ref="acb3b0f424f25beb57a312c1a679f3b0c" args="(double x1A, double y1A, double x2A, double y2A, double x1B, double y1B, double x2B, double y2B, double delta)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::overlapped </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac6d5144b33c27a6dce66dff86c4ebdde"></a><!-- doxytag: member="OpenBabel::compareAtoms" ref="ac6d5144b33c27a6dce66dff86c4ebdde" args="(int a1, int a2, const std::vector&lt; std::vector&lt; int &gt; * &gt; aeqList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::compareAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; int &gt; * &gt;&#160;</td>
          <td class="paramname"><em>aeqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1c632244490414023578336c8528c613"></a><!-- doxytag: member="OpenBabel::incrementValues" ref="a1c632244490414023578336c8528c613" args="(std::vector&lt; int &gt; &amp;currentValues, const std::vector&lt; int &gt; maxValues)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::incrementValues </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>currentValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValues</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2eda090453a9a538b9295e4fd2ba4366"></a><!-- doxytag: member="OpenBabel::CompareRotor" ref="a2eda090453a9a538b9295e4fd2ba4366" args="(const pair&lt; int, int &gt; &amp;a, const pair&lt; int, int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareRotor </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; int, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; int, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<a class="anchor" id="a95f6327fcb8303f8d4fbb309a20e3f2b"></a><!-- doxytag: member="OpenBabel::deleteIntElement" ref="a95f6327fcb8303f8d4fbb309a20e3f2b" args="(std::vector&lt; int &gt; *source, int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::deleteIntElement </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a24ad6fc920fa2699d472547ec4d1721a"></a><!-- doxytag: member="OpenBabel::findAlternateSinglets" ref="a24ad6fc920fa2699d472547ec4d1721a" args="(const std::vector&lt; int &gt;iA1, const std::vector&lt; int &gt;iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::findAlternateSinglets </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a78600823bb7358bc592f05fa5039936d">makeAssignment()</a>.</p>

</div>
</div>
<a class="anchor" id="a78600823bb7358bc592f05fa5039936d"></a><!-- doxytag: member="OpenBabel::makeAssignment" ref="a78600823bb7358bc592f05fa5039936d" args="(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; bondAssignment, const std::vector&lt; int &gt; specialFlag, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds, int &amp;nAss)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::makeAssignment </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondAssignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>specialFlag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nAss</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a class="anchor" id="aaf79bb3ded26c6df1bcb8008c76afac6"></a><!-- doxytag: member="OpenBabel::analyzeOK" ref="aaf79bb3ded26c6df1bcb8008c76afac6" args="(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; hydrogenValency, const std::vector&lt; int &gt; maxValency, const std::vector&lt; int &gt; bondOrder, const std::vector&lt; int &gt; atomCheckFlag, int nAtoms, int nBonds, int &amp;nGtMax, int &amp;nNEH, int &amp;nOddEven, bool testExceedHydrogen, bool oddEvenCheck)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::analyzeOK </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atomCheckFlag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nGtMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nNEH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nOddEven</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>testExceedHydrogen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>oddEvenCheck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a class="anchor" id="a6b40d2265cd8cf97dc199e8059d13ff0"></a><!-- doxytag: member="OpenBabel::incrementAssignment" ref="a6b40d2265cd8cf97dc199e8059d13ff0" args="(std::vector&lt; int &gt; &amp;bondAssignment, int nAss)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::incrementAssignment </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondAssignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAss</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a class="anchor" id="aef260e06b0c46b10fe3be453e1362ee5"></a><!-- doxytag: member="OpenBabel::determineBondsOrder" ref="aef260e06b0c46b10fe3be453e1362ee5" args="(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; maxValency, std::vector&lt; int &gt; &amp;bondOrder, std::vector&lt; int &gt; &amp;hydrogenValency, int nAtoms, int nBonds, bool oddEvenViolate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::determineBondsOrder </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>oddEvenViolate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a class="anchor" id="a656a12d74df6452be30fd76d3860bca6"></a><!-- doxytag: member="OpenBabel::alternate" ref="a656a12d74df6452be30fd76d3860bca6" args="(OBMol *pmol, const std::vector&lt; int &gt; nH, std::vector&lt; int &gt; &amp;bondOrders)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::alternate </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrders</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab8184977f057db3afea953ff0d97355d"></a><!-- doxytag: member="OpenBabel::ptInRect" ref="ab8184977f057db3afea953ff0d97355d" args="(const Rect r, const Point p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ptInRect </td>
          <td>(</td>
          <td class="paramtype">const Rect&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Point&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af3acf0818f209ed2426163c90b6d1440"></a><!-- doxytag: member="OpenBabel::compareStringsNumbers" ref="af3acf0818f209ed2426163c90b6d1440" args="(string s1, string s2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::compareStringsNumbers </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>s2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a79d8fe626950346aaaeabec7cfdce123">analizeParity()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac6b2a0b35248f073b86a96fbef99f461">analizeParityBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>.</p>

</div>
</div>
<a class="anchor" id="a0c4710d7911172f59b1f9caf9192d2d6"></a><!-- doxytag: member="OpenBabel::getAtomSymbol" ref="a0c4710d7911172f59b1f9caf9192d2d6" args="(TSimpleMolecule &amp;sm, int atAtom, int atEx, int priority, string ndData)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::getAtomSymbol </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atAtom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atEx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>priority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>ndData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>nepravil'no </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a49950c5bac5703c9a3c7efea3d4a41f4"></a><!-- doxytag: member="OpenBabel::getAtomSymbol" ref="a49950c5bac5703c9a3c7efea3d4a41f4" args="(TSimpleMolecule &amp;sm, int atAtom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::getAtomSymbol </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atAtom</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa5a5e94e5040b9aa439f4f658f0741d4"></a><!-- doxytag: member="OpenBabel::indexOf" ref="aa5a5e94e5040b9aa439f4f658f0741d4" args="(const string instring, const string substring, int fromPos=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::indexOf </td>
          <td>(</td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>instring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>substring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fromPos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ae55766527e16c454a28332c2b9f51bab">addZeroeth()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac2c0520f21b12e9bfae93e4e425e26c9">removeZeroeth()</a>.</p>

</div>
</div>
<a class="anchor" id="ac2c0520f21b12e9bfae93e4e425e26c9"></a><!-- doxytag: member="OpenBabel::removeZeroeth" ref="ac2c0520f21b12e9bfae93e4e425e26c9" args="(std::string instring)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::removeZeroeth </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>instring</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a79d8fe626950346aaaeabec7cfdce123"></a><!-- doxytag: member="OpenBabel::analizeParity" ref="a79d8fe626950346aaaeabec7cfdce123" args="(string data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::analizeParity </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6b2a0b35248f073b86a96fbef99f461"></a><!-- doxytag: member="OpenBabel::analizeParityBond" ref="ac6b2a0b35248f073b86a96fbef99f461" args="(string data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::analizeParityBond </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a53b6e688d17496385f69834ed1014dc8"></a><!-- doxytag: member="OpenBabel::changeParity" ref="a53b6e688d17496385f69834ed1014dc8" args="(std::string data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::changeParity </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="af2ed9f300b95cff9ffc0fbc34cacc578"></a><!-- doxytag: member="OpenBabel::changeParityBond" ref="af2ed9f300b95cff9ffc0fbc34cacc578" args="(std::string data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::changeParityBond </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a1da27ac0556550ed29812976e41e97b9"></a><!-- doxytag: member="OpenBabel::sproduct" ref="a1da27ac0556550ed29812976e41e97b9" args="(TSimpleMolecule &amp;sm, int br, int i1, int i2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::sproduct </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>br</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#aa57c0c18ebfc17ba6f962725101ab5b3">restoreDoubleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="aee1209411864c8c11729145e25e4bd2c"></a><!-- doxytag: member="OpenBabel::bondEquivalent" ref="aee1209411864c8c11729145e25e4bd2c" args="(int bn1, int bn2, const std::vector&lt; int &gt; eqList, TSimpleMolecule &amp;sm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::bondEquivalent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bn1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bn2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="ae55766527e16c454a28332c2b9f51bab"></a><!-- doxytag: member="OpenBabel::addZeroeth" ref="ae55766527e16c454a28332c2b9f51bab" args="(std::string instring, std::string stringAdd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::addZeroeth </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>instring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>stringAdd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>.</p>

</div>
</div>
<a class="anchor" id="a8499ac47df50a86298d88a5079a544f6"></a><!-- doxytag: member="OpenBabel::setUpDownBonds" ref="a8499ac47df50a86298d88a5079a544f6" args="(int atomNo, int parity, TSimpleMolecule &amp;sm, std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::setUpDownBonds </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomNo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>parity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>stereoBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>!! By unknown reason inversion of configuration took place. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>.</p>

</div>
</div>
<a class="anchor" id="a74797fbdbf190ac9522db1f2d582581b"></a><!-- doxytag: member="OpenBabel::SortVVInt" ref="a74797fbdbf190ac9522db1f2d582581b" args="(const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SortVVInt </td>
          <td>(</td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>.</p>

</div>
</div>
<a class="anchor" id="ac44ee11ab4413a4b1cb20b5bd24f183f"></a><!-- doxytag: member="OpenBabel::SortAtomZ" ref="ac44ee11ab4413a4b1cb20b5bd24f183f" args="(const pair&lt; OBAtom *, double &gt; &amp;a, const pair&lt; OBAtom *, double &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SortAtomZ </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, double &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, double &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="af4da122a7830becd4fa38b8792671cdd"></a><!-- doxytag: member="OpenBabel::OBComparePairSecond" ref="af4da122a7830becd4fa38b8792671cdd" args="(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairSecond </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abe5da6d31a3fcc23a2efd77085c8c2d4">ClassCount()</a>.</p>

</div>
</div>
<a class="anchor" id="a83d991b1e233b11b794e4ab3f87b52cc"></a><!-- doxytag: member="OpenBabel::OBComparePairFirst" ref="a83d991b1e233b11b794e4ab3f87b52cc" args="(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairFirst </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="abe5da6d31a3fcc23a2efd77085c8c2d4"></a><!-- doxytag: member="OpenBabel::ClassCount" ref="abe5da6d31a3fcc23a2efd77085c8c2d4" args="(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ClassCount </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>counts the number of unique symmetry classes in a list </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a8f302cc167630d63e3ca5a4c4d86e41b"></a><!-- doxytag: member="OpenBabel::CreateNewClassVector" ref="a8f302cc167630d63e3ca5a4c4d86e41b" args="(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::CreateNewClassVector </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>creates a new vector of symmetry classes base on an existing vector helper routine to GetGIDVector </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a8e455dc2d94f2394a21dd76db3af8325"></a><!-- doxytag: member="OpenBabel::ValenceSum" ref="a8e455dc2d94f2394a21dd76db3af8325" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::ValenceSum </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">KekulePropagate()</a>.</p>

</div>
</div>
<a class="anchor" id="a8d72e30a8da1c39c9906a27ef62dd5f6"></a><!-- doxytag: member="OpenBabel::KekulePropagate" ref="a8d72e30a8da1c39c9906a27ef62dd5f6" args="(OBAtom *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::KekulePropagate </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>visit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>ival</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad87b019400c810f14603c6532435030b"></a><!-- doxytag: member="OpenBabel::GetCurrentValence" ref="ad87b019400c810f14603c6532435030b" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetCurrentValence </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a5d65e3449d4d6a0a7a35ea4e13039f16">ExpandKekule()</a>.</p>

</div>
</div>
<a class="anchor" id="a5d65e3449d4d6a0a7a35ea4e13039f16"></a><!-- doxytag: member="OpenBabel::ExpandKekule" ref="a5d65e3449d4d6a0a7a35ea4e13039f16" args="(OBMol &amp;mol, vector&lt; OBAtom * &gt; &amp;va, vector&lt; OBAtom * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ExpandKekule </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBAtom * &gt; &amp;&#160;</td>
          <td class="paramname"><em>va</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBAtom * &gt;::iterator&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>maxv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>secondpass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a13eb26f56a8a475622fba5fc01d4d50e"></a><!-- doxytag: member="OpenBabel::CorrectBadResonanceForm" ref="a13eb26f56a8a475622fba5fc01d4d50e" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::CorrectBadResonanceForm </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a7654363e339f0fe07323c9f7e542d4db"></a><!-- doxytag: member="OpenBabel::WriteTitles" ref="a7654363e339f0fe07323c9f7e542d4db" args="(ostream &amp;ofs, OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::WriteTitles </td>
          <td>(</td>
          <td class="paramtype">ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aabfd0c1c9630002b16c782ad7d39790f"></a><!-- doxytag: member="OpenBabel::center_coords" ref="aabfd0c1c9630002b16c782ad7d39790f" args="(double *c, unsigned int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::center_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the geometric centroid to an array of coordinates in double* format and center the coordinates to the origin. Operates on the first "size" coordinates in the array. </dd></dl>

</div>
</div>
<a class="anchor" id="a037d5f246395ec725489c655344a958a"></a><!-- doxytag: member="OpenBabel::rotate_coords" ref="a037d5f246395ec725489c655344a958a" args="(double *c, double m[3][3], unsigned int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Rotates the coordinate set *c by the transformation matrix m[3][3] Operates on the first "size" coordinates in the array. </p>

</div>
</div>
<a class="anchor" id="a95b4ba35439691534ac9c74c47a4b688"></a><!-- doxytag: member="OpenBabel::SetRotorToAngle" ref="a95b4ba35439691534ac9c74c47a4b688" args="(double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SetRotorToAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>tor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Rotate the coordinates of 'atoms' such that tor == ang - atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a3f0fbaf701b38d36aaa0a225de04841d">OBRotamerList::CreateConformerList()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#af0ec970ded1e0a8721469b45c58e4451">OBRotamerList::SetCurrentCoordinates()</a>.</p>

</div>
</div>
<a class="anchor" id="a034c6dd9973dc10ecb7cab1e58a683fa"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="a034c6dd9973dc10ecb7cab1e58a683fa" args="(std::ifstream &amp;fs, const string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> error log if it fails. </p>

</div>
</div>
<a class="anchor" id="ab9bfc815426ab3c657b97c198aee9f3e"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="ab9bfc815426ab3c657b97c198aee9f3e" args="(std::ofstream &amp;fs, const string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ofstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> error log if it fails. </p>

</div>
</div>
<a class="anchor" id="a2e30f35d0b3984ff969fed0eadc3a848"></a><!-- doxytag: member="OpenBabel::InvertCase" ref="a2e30f35d0b3984ff969fed0eadc3a848" args="(std::string &amp;s, unsigned int start)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::InvertCase </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Shift the supplied string: lowercase to upper, and upper to lower </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- The string to switch case </td></tr>
    <tr><td class="paramname">start</td><td>- The position to start inverting case </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a867d77834ebf14f88224f0dd7e7e0e61"></a><!-- doxytag: member="OpenBabel::SolveLinear" ref="a867d77834ebf14f88224f0dd7e7e0e61" args="(double A, double B)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveLinear </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad37b2e597a6a0115fa09fc4903665c9d">SolveQuadratic()</a>.</p>

</div>
</div>
<a class="anchor" id="ad37b2e597a6a0115fa09fc4903665c9d"></a><!-- doxytag: member="OpenBabel::SolveQuadratic" ref="ad37b2e597a6a0115fa09fc4903665c9d" args="(double A, double B, double C)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveQuadratic </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>C</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic()</a>.</p>

</div>
</div>
<a class="anchor" id="a637e2cd6fd74982c574e513d729b29bc"></a><!-- doxytag: member="OpenBabel::CubeRoot" ref="a637e2cd6fd74982c574e513d729b29bc" args="(double X)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::CubeRoot </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>X</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic()</a>.</p>

</div>
</div>
<a class="anchor" id="af0ca115b10493da91f7a1c65f5b44ef6"></a><!-- doxytag: member="OpenBabel::SolveCubic" ref="af0ca115b10493da91f7a1c65f5b44ef6" args="(double A, double B, double C, double D)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveCubic </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>D</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa7ec675d10f9071757b87d4952938b65"></a><!-- doxytag: member="OpenBabel::get_roots_3_3" ref="aa7ec675d10f9071757b87d4952938b65" args="(double mat[3][3], double roots[3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::get_roots_3_3 </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>roots</em>[3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose()</a>.</p>

</div>
</div>
<a class="anchor" id="a7b5986b1238c63b45e7fb0fdfdfc4ed0"></a><!-- doxytag: member="OpenBabel::GetVectorBinding" ref="a7b5986b1238c63b45e7fb0fdfdfc4ed0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetVectorBinding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a5ef07c8230811964a209e423abea11d2"></a><!-- doxytag: member="OpenBabel::CreateAtom" ref="a5ef07c8230811964a209e423abea11d2" args="(Pattern *, AtomExpr *, int, int vb=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int CreateAtom </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vb</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa53209ef174b454eb99e269ef59ebbe0">OBMol::AddAtom()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad2762de927ca28384c48bf618603aab2">OBMol::NewAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="afb8652b972f454e6ab6a58c7ffa46380"></a><!-- doxytag: member="OpenBabel::FatalAllocationError" ref="afb8652b972f454e6ab6a58c7ffa46380" args="(const char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalAllocationError </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a17874fdfb56af286f64cbf9471772daa">AllocPattern()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond()</a>.</p>

</div>
</div>
<a class="anchor" id="adda2fb3f1a00bdee06b36a3a56ecab0a"></a><!-- doxytag: member="OpenBabel::FreePattern" ref="adda2fb3f1a00bdee06b36a3a56ecab0a" args="(Pattern *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void FreePattern </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aafea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae445247649429e110f031d235bc4d465">FreeAtomExpr()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">OBSmartsPattern::SMARTSError()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a45c009ff3b4002e84b8f6cc4adbc1a49">OBSmartsPattern::~OBSmartsPattern()</a>.</p>

</div>
</div>
<a class="anchor" id="a1fea358f643e1a4c2969fe9fc367372b"></a><!-- doxytag: member="OpenBabel::CopyPattern" ref="a1fea358f643e1a4c2969fe9fc367372b" args="(Pattern *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * CopyPattern </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac86a92f114ff5ab6ee7357352682922c">CopyAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="aa06090c65ac9acea8044a078064142d6"></a><!-- doxytag: member="OpenBabel::AllocAtomExpr" ref="aa06090c65ac9acea8044a078064142d6" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::AllocAtomExpr </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a61fd91da70225bf05011639396d23b10">BuildAtomBin()</a>, <a class="el" href="namespaceOpenBabel.shtml#a9cf9b8eaac01d8b3edecdc32e0d73512">BuildAtomLeaf()</a>, <a class="el" href="namespaceOpenBabel.shtml#a03cacdaa8b1851aa9f927a8108b9e3ea">BuildAtomNot()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2c7a4877081dd4f7ab5966e1cb506895">BuildAtomRecurs()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac86a92f114ff5ab6ee7357352682922c">CopyAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="ac86a92f114ff5ab6ee7357352682922c"></a><!-- doxytag: member="OpenBabel::CopyAtomExpr" ref="ac86a92f114ff5ab6ee7357352682922c" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::CopyAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>.</p>

</div>
</div>
<a class="anchor" id="ae445247649429e110f031d235bc4d465"></a><!-- doxytag: member="OpenBabel::FreeAtomExpr" ref="ae445247649429e110f031d235bc4d465" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>, <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5efeaba0de04686b85e1cd11296bb76f">AtomExprImplies()</a>, <a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern()</a>, <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>, <a class="el" href="namespaceOpenBabel.shtml#aecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a9cf9b8eaac01d8b3edecdc32e0d73512"></a><!-- doxytag: member="OpenBabel::BuildAtomLeaf" ref="a9cf9b8eaac01d8b3edecdc32e0d73512" args="(int prop, int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomLeaf </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>, <a class="el" href="namespaceOpenBabel.shtml#aafea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion()</a>, <a class="el" href="namespaceOpenBabel.shtml#adf5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7d8b74f86bd19e5c64c5cfafbc0f5fc8">GenerateElement()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>.</p>

</div>
</div>
<a class="anchor" id="a03cacdaa8b1851aa9f927a8108b9e3ea"></a><!-- doxytag: member="OpenBabel::BuildAtomNot" ref="a03cacdaa8b1851aa9f927a8108b9e3ea" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomNot </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a61fd91da70225bf05011639396d23b10"></a><!-- doxytag: member="OpenBabel::BuildAtomBin" ref="a61fd91da70225bf05011639396d23b10" args="(int op, AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomBin </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>, <a class="el" href="namespaceOpenBabel.shtml#adf5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem()</a>, <a class="el" href="namespaceOpenBabel.shtml#a44c137e83dc2832887a5db79ceb19dbf">OrAtomExprLeaf()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a2c7a4877081dd4f7ab5966e1cb506895"></a><!-- doxytag: member="OpenBabel::BuildAtomRecurs" ref="a2c7a4877081dd4f7ab5966e1cb506895" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomRecurs </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>.</p>

</div>
</div>
<a class="anchor" id="a7d8b74f86bd19e5c64c5cfafbc0f5fc8"></a><!-- doxytag: member="OpenBabel::GenerateElement" ref="a7d8b74f86bd19e5c64c5cfafbc0f5fc8" args="(int elem)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::GenerateElement </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>elem</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="adf5c0e4e485dfa0a5b9854063d0e75be"></a><!-- doxytag: member="OpenBabel::GenerateAromElem" ref="adf5c0e4e485dfa0a5b9854063d0e75be" args="(int elem, int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::GenerateAromElem </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>elem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>.</p>

</div>
</div>
<a class="anchor" id="a8d298e86b8ff500e158a8410aa5aa732"></a><!-- doxytag: member="OpenBabel::IsInvalidAtom" ref="a8d298e86b8ff500e158a8410aa5aa732" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsInvalidAtom </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aafea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion()</a>.</p>

</div>
</div>
<a class="anchor" id="ac80b9ed98f3d3d577e051b6dd2870cef"></a><!-- doxytag: member="OpenBabel::AllocBondExpr" ref="ac80b9ed98f3d3d577e051b6dd2870cef" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::AllocBondExpr </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a6fc2b0b41adf46651940ca2c9410ed0d">BuildBondBin()</a>, <a class="el" href="namespaceOpenBabel.shtml#ab0f9c1d3ab7ba35f0083c342db724359">BuildBondLeaf()</a>, <a class="el" href="namespaceOpenBabel.shtml#a558423c98a7710dccb8d9234a8c0d2cc">BuildBondNot()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a308583e0ca7df091c7a7e3b9fb321805">CopyBondExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a308583e0ca7df091c7a7e3b9fb321805"></a><!-- doxytag: member="OpenBabel::CopyBondExpr" ref="a308583e0ca7df091c7a7e3b9fb321805" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::CopyBondExpr </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>.</p>

</div>
</div>
<a class="anchor" id="a62e1c3bdf62c95fbff1b64cb4996eccb"></a><!-- doxytag: member="OpenBabel::EquivalentBondExpr" ref="a62e1c3bdf62c95fbff1b64cb4996eccb" args="(BondExpr *expr1, BondExpr *expr2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::EquivalentBondExpr </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if two BondExpr objects are the same. This is used for ring closures to identify invalid SMARTS like:</p>
<p>C-1CCCCC#1 C=1CCCCC:1</p>
<p>However, the SMARTS below are valid and the bond expression next to the the second closure digit is used.</p>
<p>C1CCCCC#1 C1CCCCC=1 </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="aec5ad77869a83b4b1f65bcfcb065d98f"></a><!-- doxytag: member="OpenBabel::FreeBondExpr" ref="aec5ad77869a83b4b1f65bcfcb065d98f" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeBondExpr </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa944f62d90a19082249f5231412c6bb6">OBSmartsPattern::ParseSMARTSError()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="ab0f9c1d3ab7ba35f0083c342db724359"></a><!-- doxytag: member="OpenBabel::BuildBondLeaf" ref="ab0f9c1d3ab7ba35f0083c342db724359" args="(int prop, int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondLeaf </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad911e5f6baeec860288054e600b0d8e7">OBSmartsPattern::ParseBondPrimitive()</a>.</p>

</div>
</div>
<a class="anchor" id="a558423c98a7710dccb8d9234a8c0d2cc"></a><!-- doxytag: member="OpenBabel::BuildBondNot" ref="a558423c98a7710dccb8d9234a8c0d2cc" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondNot </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a6fc2b0b41adf46651940ca2c9410ed0d"></a><!-- doxytag: member="OpenBabel::BuildBondBin" ref="a6fc2b0b41adf46651940ca2c9410ed0d" args="(int op, BondExpr *lft, BondExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondBin </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="ad1d85b6d3bd9953ffd9a3ffc5545bcfc"></a><!-- doxytag: member="OpenBabel::GenerateDefaultBond" ref="ad1d85b6d3bd9953ffd9a3ffc5545bcfc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::GenerateDefaultBond </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a17874fdfb56af286f64cbf9471772daa"></a><!-- doxytag: member="OpenBabel::AllocPattern" ref="a17874fdfb56af286f64cbf9471772daa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::AllocPattern </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ae13bae2e9cf131660d957622c18280b8">OBSmartsPattern::ParseSMARTSPattern()</a>.</p>

</div>
</div>
<a class="anchor" id="a0dc584d0582e8f76b7c9873dc1ccf569"></a><!-- doxytag: member="OpenBabel::CreateBond" ref="a0dc584d0582e8f76b7c9873dc1ccf569" args="(Pattern *pat, BondExpr *expr, int src, int dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::CreateBond </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="ac16aac0b5b4c8698863437383b747a5c"></a><!-- doxytag: member="OpenBabel::MarkGrowBonds" ref="ac16aac0b5b4c8698863437383b747a5c" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::MarkGrowBonds </td>
          <td>(</td>
          <td class="paramtype">Pattern *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>.</p>

</div>
</div>
<a class="anchor" id="a308bf98f43b9e6d709f17b2e83617d6f"></a><!-- doxytag: member="OpenBabel::GetChiralFlag" ref="a308bf98f43b9e6d709f17b2e83617d6f" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetChiralFlag </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>.</p>

</div>
</div>
<a class="anchor" id="a67a769d9ce95278983a65764b363188c"></a><!-- doxytag: member="OpenBabel::NotAtomExpr" ref="a67a769d9ce95278983a65764b363188c" args="(AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * NotAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa31643b98610c21a70246529ae43a3c0"></a><!-- doxytag: member="OpenBabel::AndAtomExpr" ref="aa31643b98610c21a70246529ae43a3c0" args="(AtomExpr *, AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * AndAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aafea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="aecadd7da4b4879ed4274e628fc440f4f"></a><!-- doxytag: member="OpenBabel::OrAtomExpr" ref="aecadd7da4b4879ed4274e628fc440f4f" args="(AtomExpr *, AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * OrAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="ac613f2b30f871cd23e63b8573372b2a4"></a><!-- doxytag: member="OpenBabel::IsBooleanAtomLeaf" ref="ac613f2b30f871cd23e63b8573372b2a4" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsBooleanAtomLeaf </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a93043bdcf295c9daa7efb45bc31182ce"></a><!-- doxytag: member="OpenBabel::IsNegatingAtomLeaf" ref="a93043bdcf295c9daa7efb45bc31182ce" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsNegatingAtomLeaf </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a58b602c6be0aa88f69fbaecd71a82b7a">AtomLeafConflict()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a67a769d9ce95278983a65764b363188c">NotAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a19b1b9103d86b579bb44d777db593c73"></a><!-- doxytag: member="OpenBabel::EqualAtomExpr" ref="a19b1b9103d86b579bb44d777db593c73" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::EqualAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>, and <a class="el" href="namespaceOpenBabel.shtml#aecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a40de5efd81cb1bca8ff737a1507deeb0"></a><!-- doxytag: member="OpenBabel::OrderAtomExpr" ref="a40de5efd81cb1bca8ff737a1507deeb0" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::OrderAtomExpr </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>, and <a class="el" href="namespaceOpenBabel.shtml#aecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a58b602c6be0aa88f69fbaecd71a82b7a"></a><!-- doxytag: member="OpenBabel::AtomLeafConflict" ref="a58b602c6be0aa88f69fbaecd71a82b7a" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomLeafConflict </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a6419b054750512355f620886990ae725">AtomExprConflict()</a>.</p>

</div>
</div>
<a class="anchor" id="a6419b054750512355f620886990ae725"></a><!-- doxytag: member="OpenBabel::AtomExprConflict" ref="a6419b054750512355f620886990ae725" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomExprConflict </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>.</p>

</div>
</div>
<a class="anchor" id="afe1606ae8fc8753791a06f48e1beaf4f"></a><!-- doxytag: member="OpenBabel::AtomLeafImplies" ref="afe1606ae8fc8753791a06f48e1beaf4f" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomLeafImplies </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a53bb1c96f3be289fbe52bdb65afe3b13">AtomExprImplied()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a5efeaba0de04686b85e1cd11296bb76f">AtomExprImplies()</a>.</p>

</div>
</div>
<a class="anchor" id="a53bb1c96f3be289fbe52bdb65afe3b13"></a><!-- doxytag: member="OpenBabel::AtomExprImplied" ref="a53bb1c96f3be289fbe52bdb65afe3b13" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomExprImplied </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>.</p>

</div>
</div>
<a class="anchor" id="a5efeaba0de04686b85e1cd11296bb76f"></a><!-- doxytag: member="OpenBabel::AtomExprImplies" ref="a5efeaba0de04686b85e1cd11296bb76f" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::AtomExprImplies </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf()</a>.</p>

</div>
</div>
<a class="anchor" id="aec3b3cd6bc1ab563427c7a03d52d7c0c"></a><!-- doxytag: member="OpenBabel::AndAtomExprLeaf" ref="aec3b3cd6bc1ab563427c7a03d52d7c0c" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::AndAtomExprLeaf </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="aafea7a59ad4cbb9bda87187210befbc5"></a><!-- doxytag: member="OpenBabel::ConstrainRecursion" ref="aafea7a59ad4cbb9bda87187210befbc5" args="(AtomExpr *recur, AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::ConstrainRecursion </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>recur</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa31643b98610c21a70246529ae43a3c0">AndAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="a44c137e83dc2832887a5db79ceb19dbf"></a><!-- doxytag: member="OpenBabel::OrAtomExprLeaf" ref="a44c137e83dc2832887a5db79ceb19dbf" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::OrAtomExprLeaf </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr()</a>.</p>

</div>
</div>
<a class="anchor" id="acc7a90098a2f71e1480986f513426244"></a><!-- doxytag: member="OpenBabel::GetExprOrder" ref="acc7a90098a2f71e1480986f513426244" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetExprOrder </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6b86ace2bf7866c375372ff338fe0889">OBSmartsPattern::GetBond()</a>.</p>

</div>
</div>
<a class="anchor" id="a1be5369686428b6311fc8f79baf855c5"></a><!-- doxytag: member="OpenBabel::SmartsLexReplace" ref="a1be5369686428b6311fc8f79baf855c5" args="(std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vlex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acf0cdead441d34bce09b5dffbd031e94"></a><!-- doxytag: member="OpenBabel::isqrt" ref="acf0cdead441d34bce09b5dffbd031e94" args="(unsigned int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::isqrt </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4d8217756622db102e25941df848d37">IsOddPrime()</a>.</p>

</div>
</div>
<a class="anchor" id="af4d8217756622db102e25941df848d37"></a><!-- doxytag: member="OpenBabel::IsOddPrime" ref="af4d8217756622db102e25941df848d37" args="(unsigned int x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsOddPrime </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a5e5d2c394de2985154659ef73adddea6">DetermineFactors()</a>.</p>

</div>
</div>
<a class="anchor" id="a83b9098df014b7fce40c3d29eb240240"></a><!-- doxytag: member="OpenBabel::RelativelyPrime" ref="a83b9098df014b7fce40c3d29eb240240" args="(unsigned int x, unsigned int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::RelativelyPrime </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a368951c5db9d79bad24d0632dbaf23d4">DetermineIncrement()</a>.</p>

</div>
</div>
<a class="anchor" id="a9c9b5a925bb477e9cf899d8705defc60"></a><!-- doxytag: member="OpenBabel::LeadingZeros" ref="a9c9b5a925bb477e9cf899d8705defc60" args="(unsigned int x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::LeadingZeros </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa995f2456608bb27a86fef9460f9e8e0">DoubleModulus()</a>.</p>

</div>
</div>
<a class="anchor" id="ab39d4f554084f831800c2f18b5b0f017"></a><!-- doxytag: member="OpenBabel::DeterminePotency" ref="ab39d4f554084f831800c2f18b5b0f017" args="(unsigned int m, unsigned int a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DeterminePotency </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a class="anchor" id="a5e5d2c394de2985154659ef73adddea6"></a><!-- doxytag: member="OpenBabel::DetermineFactors" ref="a5e5d2c394de2985154659ef73adddea6" args="(unsigned int x, unsigned int *factors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DetermineFactors </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>factors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a class="anchor" id="a368951c5db9d79bad24d0632dbaf23d4"></a><!-- doxytag: member="OpenBabel::DetermineIncrement" ref="a368951c5db9d79bad24d0632dbaf23d4" args="(unsigned int m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::DetermineIncrement </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a class="anchor" id="ad3a7dadaa9b14b3d1a4a521f632a2477"></a><!-- doxytag: member="OpenBabel::DetermineSequence" ref="ad3a7dadaa9b14b3d1a4a521f632a2477" args="(unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::DetermineSequence </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRandom.shtml#aad105f775b284c16fdd4c649e227335f">OBRandom::OBRandom()</a>.</p>

</div>
</div>
<a class="anchor" id="adfc4a863d0839be0e62e9db9d585fd7e"></a><!-- doxytag: member="OpenBabel::GenerateSequence" ref="adfc4a863d0839be0e62e9db9d585fd7e" args="(unsigned int p, unsigned int m, unsigned int a, unsigned int c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateSequence </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a896fe2a9e9925cda30253ea47ab123c6"></a><!-- doxytag: member="OpenBabel::GetAtomIDNumber" ref="a896fe2a9e9925cda30253ea47ab123c6" args="(const char *atomid)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetAtomIDNumber </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>atomid</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a5af8c25998c59898195719eb90dcb226">OBResidue::GetAtomProperty()</a>.</p>

</div>
</div>
<a class="anchor" id="a822c0b4a40ee24e37bc3064b4e403458"></a><!-- doxytag: member="OpenBabel::GetResidueNumber" ref="a822c0b4a40ee24e37bc3064b4e403458" args="(const char *res)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetResidueNumber </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a91a8965770cf999c120602edb0c09bcd">SetResidueKeys()</a>.</p>

</div>
</div>
<a class="anchor" id="a91a8965770cf999c120602edb0c09bcd"></a><!-- doxytag: member="OpenBabel::SetResidueKeys" ref="a91a8965770cf999c120602edb0c09bcd" args="(const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::SetResidueKeys </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>residue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>reskey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>aakey</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a7cf274421c8b6705d6470aa7e57b41ab">OBResidue::SetName()</a>.</p>

</div>
</div>
<a class="anchor" id="a387eb9209ded6f58de6c672c06121ec8"></a><!-- doxytag: member="OpenBabel::DetermineFRJ" ref="a387eb9209ded6f58de6c672c06121ec8" args="(OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int DetermineFRJ </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>.</p>

</div>
</div>
<a class="anchor" id="a902077219ff1df4935790b354a00909b"></a><!-- doxytag: member="OpenBabel::BuildOBRTreeVector" ref="a902077219ff1df4935790b354a00909b" args="(OBAtom *, OBRTree *, vector&lt; OBRTree * &gt; &amp;, OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BuildOBRTreeVector </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBRTree *&#160;</td>
          <td class="paramname"><em>prv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBRTree * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>.</p>

</div>
</div>
<a class="anchor" id="acd603c36f7650b398cddf72b1b863b1f"></a><!-- doxytag: member="OpenBabel::atomRingToBondRing" ref="acd603c36f7650b398cddf72b1b863b1f" args="(OBMol *mol, const std::vector&lt; int &gt; &amp;atoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned int&gt; OpenBabel::atomRingToBondRing </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac932ad377c246fc19473d052ab3243a8">visitRing()</a>.</p>

</div>
</div>
<a class="anchor" id="ac932ad377c246fc19473d052ab3243a8"></a><!-- doxytag: member="OpenBabel::visitRing" ref="ac932ad377c246fc19473d052ab3243a8" args="(OBMol *mol, OBRing *ring, std::vector&lt; OBRing * &gt; &amp;rlist, std::vector&lt; OBRing * &gt; &amp;rignored)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::visitRing </td>
          <td>(</td>
          <td class="paramtype">OBMol *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBRing *&#160;</td>
          <td class="paramname"><em>ring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; OBRing * &gt; &amp;&#160;</td>
          <td class="paramname"><em>rlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; OBRing * &gt; &amp;&#160;</td>
          <td class="paramname"><em>rignored</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This function finds the LSSR containing all relevant cycles. A cycle is relevant if it belongs to at least one minimum cycle basis. Another description is more useful though:</p>
<p>A cycle (C) is relevant if:</p>
<ul>
<li>no smaller cycles C_i, ..., C_k exist such that C = C_1 + ... + C_k</li>
<li>both bonds &amp; atoms are checked</li>
</ul>
<p>This is based on lemma 1 from:</p>
<p>P. Vismara, Union of all the minimum cycle bases of a graph, The electronic journal of combinatorics, Vol. 4, 1997 <a href="http://www.emis.de/journals/EJC/Volume_4/PostScriptfiles/v4i1r9.ps">http://www.emis.de/journals/EJC/Volume_4/PostScriptfiles/v4i1r9.ps</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#a5e60e6aac8c448ba3216236693e6f28a">OBRingSearch::RemoveRedundant()</a>.</p>

</div>
</div>
<a class="anchor" id="a0bc08c11af150479f14d23684fab908f"></a><!-- doxytag: member="OpenBabel::FindRings" ref="a0bc08c11af150479f14d23684fab908f" args="(OBMol &amp;mol, vector&lt; int &gt; &amp;path, OBBitVec &amp;avisit, OBBitVec &amp;bvisit, int natom, int depth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void FindRings </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bvisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>natom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">OBMol::FindRingAtomsAndBonds()</a>.</p>

</div>
</div>
<a class="anchor" id="a9f0ec6e80141edbb924cfc4839117c94"></a><!-- doxytag: member="OpenBabel::rint" ref="a9f0ec6e80141edbb924cfc4839117c94" args="(double x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::rint </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>.</p>

</div>
</div>
<a class="anchor" id="a3d3039fda855c4c8c37c8345f0b51a64"></a><!-- doxytag: member="OpenBabel::SetRotorToAngle" ref="a3d3039fda855c4c8c37c8345f0b51a64" args="(double *c, OBAtom **ref, double ang, vector&lt; int &gt; atoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRotorToAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom **&#160;</td>
          <td class="paramname"><em>ref</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Rotate the coordinates of 'atoms' such that tor == ang. Atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate (ang is in degrees) </p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000012">Todo:</a></b></dt><dd>This code is identical to <a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">OBMol::SetTorsion()</a> and should be combined </dd></dl>

</div>
</div>
<a class="anchor" id="a69a83bcbc3a172e306c4556518aa0999"></a><!-- doxytag: member="OpenBabel::PackCoordinate" ref="a69a83bcbc3a172e306c4556518aa0999" args="(double c[3], double max[3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::PackCoordinate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max</em>[3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3180afc2c45b337a776dcc164e99e89a"></a><!-- doxytag: member="OpenBabel::UnpackCoordinate" ref="a3180afc2c45b337a776dcc164e99e89a" args="(double c[3], double max[3], int tmp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::UnpackCoordinate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>tmp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a534fe2a629963b79ffbd499f461ca5df"></a><!-- doxytag: member="OpenBabel::GetDFFVector" ref="a534fe2a629963b79ffbd499f461ca5df" args="(OBMol &amp;, vector&lt; int &gt; &amp;, OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetDFFVector </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>dffv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>.</p>

</div>
</div>
<a class="anchor" id="adfad2bce1feae52028bcf69d6b5de37a"></a><!-- doxytag: member="OpenBabel::CompareRotor" ref="adfad2bce1feae52028bcf69d6b5de37a" args="(const pair&lt; OBBond *, int &gt; &amp;, const pair&lt; OBBond *, int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRotor </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBBond *, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBBond *, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a29e21802967a71af8d4f4828d979676b"></a><!-- doxytag: member="OpenBabel::MinimumPairRMS" ref="a29e21802967a71af8d4f4828d979676b" args="(OBMol &amp;, double *, double *, bool &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double MinimumPairRMS </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>one2one</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>.</p>

</div>
</div>
<a class="anchor" id="ab1efa641b2fa046a6c00f729818933d6"></a><!-- doxytag: member="OpenBabel::trim_spaces" ref="ab1efa641b2fa046a6c00f729818933d6" args="(char *string)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* OpenBabel::trim_spaces </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Trim any trailing spaces at the end of the supplied string. </p>

</div>
</div>
<a class="anchor" id="a41d8538809cb689100fa8a0807510128"></a><!-- doxytag: member="OpenBabel::operator*" ref="a41d8538809cb689100fa8a0807510128" args="(const matrix3x3 &amp;A, const matrix3x3 &amp;B)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>B</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a30703c4e70c6142f64ceb67f1888b6e2"></a><!-- doxytag: member="OpenBabel::SQUARE" ref="a30703c4e70c6142f64ceb67f1888b6e2" args="(double x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double OpenBabel::SQUARE </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>.</p>

</div>
</div>
<a class="anchor" id="a590374f29c633247d07b75e43ae89f9d"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="a590374f29c633247d07b75e43ae89f9d" args="(ostream &amp;co, const matrix3x3 &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix3x3 &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print a text representation of the matrix in the standardized form: [ a, b, c ] <br/>
 [ d, e, f ] <br/>
 [ g, h, i ] <br/>
 where the letters represent the appropriate entries in the matrix. Uses the standard output format for the individual entries, separated by ", " for each column, and [ ] indicating each row. </p>

</div>
</div>
<a class="anchor" id="a12c13a3449bb5bffa3436d7dda6f217c"></a><!-- doxytag: member="OpenBabel::RemoveWhiteSpaceUnderscore" ref="a12c13a3449bb5bffa3436d7dda6f217c" args="(const string &amp;in)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::RemoveWhiteSpaceUnderscore </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to remove whitespaces from a string, returning a new string </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#adc5179fa55c4d176d458cadb7ffd2afe">SpaceGroup::Find()</a>, and <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a3053a7c0ada34598119f6768fdad5138">SpaceGroup::RegisterSpaceGroup()</a>.</p>

</div>
</div>
<a class="anchor" id="ad8081070ab0409c71d9abfe43902881f"></a><!-- doxytag: member="OpenBabel::VZero" ref="ad8081070ab0409c71d9abfe43902881f" args="(0.0, 0.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">OpenBabel::VZero</a> </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a71fd9d70c392449514d7a263d94e0ed1"></a><!-- doxytag: member="OpenBabel::VX" ref="a71fd9d70c392449514d7a263d94e0ed1" args="(1.0, 0.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">OpenBabel::VX</a> </td>
          <td>(</td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac43607459a7e61f202515f641ff57508"></a><!-- doxytag: member="OpenBabel::VY" ref="ac43607459a7e61f202515f641ff57508" args="(0.0, 1.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">OpenBabel::VY</a> </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abe3ca6a519f7aa7bcade3fb6d2b927f6"></a><!-- doxytag: member="OpenBabel::VZ" ref="abe3ca6a519f7aa7bcade3fb6d2b927f6" args="(0.0, 0.0, 1.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">OpenBabel::VZ</a> </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acfcb21e667eaa6f03208c8ece10eff16"></a><!-- doxytag: member="OpenBabel::writeFunction" ref="acfcb21e667eaa6f03208c8ece10eff16" args="(void *closure, const unsigned char *data, unsigned int length)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static cairo_status_t OpenBabel::writeFunction </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>closure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a4d4f4af7bb982d7292b4bf598f3f559f">CairoPainter::WriteImage()</a>.</p>

</div>
</div>
<a class="anchor" id="afb8d46302ca2fbb28a38a7b5ad59a9c3"></a><!-- doxytag: member="OpenBabel::scale_surface" ref="afb8d46302ca2fbb28a38a7b5ad59a9c3" args="(cairo_surface_t *old_surface, int old_width, int old_height, int new_width, int new_height)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static cairo_surface_t* OpenBabel::scale_surface </td>
          <td>(</td>
          <td class="paramtype">cairo_surface_t *&#160;</td>
          <td class="paramname"><em>old_surface</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>old_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>old_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>new_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>new_height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a4d4f4af7bb982d7292b4bf598f3f559f">CairoPainter::WriteImage()</a>.</p>

</div>
</div>
<a class="anchor" id="a474093accb1df03b02d17bc4b7f00377"></a><!-- doxytag: member="OpenBabel::GetLabelAlignment" ref="a474093accb1df03b02d17bc4b7f00377" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetLabelAlignment </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="a394447ad37adaf40565f53d07f5eed17"></a><!-- doxytag: member="OpenBabel::GetAtomSymClass" ref="a394447ad37adaf40565f53d07f5eed17" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int OpenBabel::GetAtomSymClass </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>.</p>

</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="af962a429bf8fe8b8f222ff1a6018c35e"></a><!-- doxytag: member="OpenBabel::AliasDataType" ref="af962a429bf8fe8b8f222ff1a6018c35e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a> = 0x7883</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>.</p>

</div>
</div>
<a class="anchor" id="a94007d911a76e1404494fd9b1785f22b"></a><!-- doxytag: member="OpenBabel::RateData" ref="a94007d911a76e1404494fd9b1785f22b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned <a class="el" href="namespaceOpenBabel.shtml#a94007d911a76e1404494fd9b1785f22b">RateData</a> = 55555</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4c2b0b854dea9451bf30f7b37353c877"></a><!-- doxytag: member="OpenBabel::ThermoData" ref="a4c2b0b854dea9451bf30f7b37353c877" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned <a class="el" href="namespaceOpenBabel.shtml#a4c2b0b854dea9451bf30f7b37353c877">ThermoData</a> = 55556</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a class="anchor" id="af9a30f985504c4a70fd08aa72c0cd16a"></a><!-- doxytag: member="OpenBabel::obLocale" ref="af9a30f985504c4a70fd08aa72c0cd16a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a> <a class="el" href="namespaceOpenBabel.shtml#af9a30f985504c4a70fd08aa72c0cd16a">obLocale</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBLocale.shtml" title="Handle the locale for numeric data parsing.">OBLocale</a> for setting and restoring locale information. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>.</p>

</div>
</div>
<a class="anchor" id="a82ccfbdf4943a4e74a708edafcced9f6"></a><!-- doxytag: member="OpenBabel::MAXBONDS" ref="a82ccfbdf4943a4e74a708edafcced9f6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a> = 300<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a22febe826ea2f93f69725fbef532c921"></a><!-- doxytag: member="OpenBabel::MAXFRAGS" ref="a22febe826ea2f93f69725fbef532c921" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">MAXFRAGS</a> = 200<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab91841d785674a38b34fcf2fd9685142"></a><!-- doxytag: member="OpenBabel::MAXCHARS" ref="ab91841d785674a38b34fcf2fd9685142" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">MAXCHARS</a> = 1000<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad087045047b2155479ef662be1be3abc"></a><!-- doxytag: member="OpenBabel::MAX_DEPTH" ref="ad087045047b2155479ef662be1be3abc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a> = 10<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad1eec14ce20cfaf366e19721f1f27090"></a><!-- doxytag: member="OpenBabel::NELEMMAX" ref="ad1eec14ce20cfaf366e19721f1f27090" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">NELEMMAX</a> = 120<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1e53ca6bf87ac2f6447c9ef2332c9418"></a><!-- doxytag: member="OpenBabel::etab" ref="a1e53ca6bf87ac2f6447c9ef2332c9418" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> <a class="el" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">etab</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a> for element properties. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a635bb1edc5190cbe33eda4a34843be9b">OBAtom::GetAtomicMass()</a>, <a class="el" href="namespaceOpenBabel.shtml#a69c4665c3756720ac6f0d62b2488fdd6">GetCorrectedBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a5a63a8b7f30958105ce72602da6715e9">OBBond::GetEquibLength()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a77cd52b60b431c19aa7debcd0d92e07d">OBMol::GetMolWt()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">OBMol::GetSpacedFormula()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a class="anchor" id="ab8d4d5690031703bcccb95ddbe7ebf0a"></a><!-- doxytag: member="OpenBabel::ttab" ref="ab8d4d5690031703bcccb95ddbe7ebf0a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> <a class="el" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Global <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table.">OBTypeTable</a> for translating between different atom types (e.g., Sybyl &lt;-&gt; MM2) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBAtom::GetType()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>.</p>

</div>
</div>
<a class="anchor" id="a35082995377e56142ee5a9fd351c7a70"></a><!-- doxytag: member="OpenBabel::isotab" ref="a35082995377e56142ee5a9fd351c7a70" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> <a class="el" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">isotab</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses.">OBIsotopeTable</a> for isotope properties. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a635bb1edc5190cbe33eda4a34843be9b">OBAtom::GetAtomicMass()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a10b7a478773fee2a1a2bcc04c5ae5d0b">OBAtom::GetExactMass()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7cac960f30506aa53d083983845032df">OBMol::GetExactMass()</a>.</p>

</div>
</div>
<a class="anchor" id="a36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="a36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds.">OBAromaticTyper</a> for detecting aromatic atoms and bonds. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ef863ca7ed29e266960966a66dc8fb8">OBBond::IsAromatic()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4ef863ca7ed29e266960966a66dc8fb8">OBAtom::IsAromatic()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a66926118e966d8cdb17a6ae23f2e89f4">OBBond::IsDouble()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa7c514e18d5bbe2873dc223a02df526e">OBBond::IsSingle()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#ae763d876fdca6bb00dd7d97574c9c1d0">OBBond::IsTriple()</a>.</p>

</div>
</div>
<a class="anchor" id="a717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="a717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">atomtyper</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4f510d8274d4d2a835c7c438aa794e57">OBAtom::GetHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ade9a7b6271ba3fb38bbaa20602d736ce">OBAtom::GetImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBAtom::GetType()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae09ed28481ac044dab3f31c8605b44a9">OBAtom::ImplicitHydrogenCount()</a>.</p>

</div>
</div>
<a class="anchor" id="ab81925dbd111f3bf1733a4cbba547131"></a><!-- doxytag: member="OpenBabel::chainsparser" ref="ab81925dbd111f3bf1733a4cbba547131" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> <a class="el" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">chainsparser</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a> for detecting macromolecular chains and residues. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#afac526c6de01759b568caddae4c4f2c3">OBAtom::GetResidue()</a>.</p>

</div>
</div>
<a class="anchor" id="a394eef44b3dd6a9174067715712c2d16"></a><!-- doxytag: member="OpenBabel::obErrorLog" ref="a394eef44b3dd6a9174067715712c2d16" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="el" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> error handler. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml#ad4714872089241b8d1b5bb6b714b5e5c">FastSearchIndexer::Add()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#aca994f4a7f7e175991a4f0c3c99f99d6">OBChiralData::AddAtomRef()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a2230dfc67c9b617df81f950e382844cc">OBDescriptor::AddProperties()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a946a73d3de978fd930793711f23e00b3">OBAlign::Align()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="namespaceOpenBabel.shtml#a818fd93f0aa1e1f5b3c63bbbc8013cca">AllocateByteCode()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#aef2ec72bd2c0b6c3846d20c1ba1fce3f">patty::assign_types()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a86b4345447c96d52bd0f44557729d285">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad85ec95d1f909843737b67d70638f3c9">OBMol::AssignSpinMultiplicity()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7145217d4de73e243d2d3888dac404ba">CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a39b6cebdf53672368cfa3edd8bc7740d">OBConversion::CheckForUnintendedBatch()</a>, <a class="el" href="structOpenBabel_1_1FptIndex.shtml#a682b05eef24f11179405526ff6f81095">FptIndex::CheckFP()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">OBMol::Clear()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349">OBDescriptor::Compare()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">OBDescriptor::CompareStringWithFilter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669">OBMol::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a568e42fdfa07962a14761bb9875ee138">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4e2ddc39752d20fabcda1afc1cc4e8e4">OBMol::DeleteHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a2993ead33ec2a4b15dd536d798ff844d">OBMol::DeleteNonPolarHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">OBMol::EndModify()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">expand_cycle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError()</a>, <a class="el" href="namespaceOpenBabel.shtml#a59c2e046bb935ac3eba0d3b003d10176">FatalMemoryError()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#adc5179fa55c4d176d458cadb7ffd2afe">SpaceGroup::Find()</a>, <a class="el" href="classOpenBabel_1_1FastSearch.shtml#a575cc7caa2b2a42bec8b47e7c0206a80">FastSearch::Find()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">OBMol::FindRingAtomsAndBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#aca77a345e848bcedd33f56b03844d014">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a9bbe06daca0e9e000492cc6a89d7dabd">OBFingerprint::Fold()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a0e38205f69ea775ac85766e8fa84aa09">OBBitVec::FromString()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a6a9ca08185bebf3307c4a1acd31e58c3">OBAlign::GetAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af2f78686dc35b7f79f44edc55b42d14a">OBMol::GetAtom()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a1f91ee5ea208d5d3038fb753dffafcfe">OBChiralData::GetAtom4Refs()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3e8b5af457f70a6f106be30b3375c7f5">OBMol::GetAtomById()</a>, <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#a4f3c95b233fb0842946292b984acf1a3">OBElementTable::GetAtomicNum()</a>, <a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a107ae45be73b2ef79045015f04cd73b1">OBChiralData::GetAtomRef()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2d4e8eb07783443a8d663057e5193ab">OBMol::GetBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6a6ff88d670f69d418f0ad0ad76771db">OBMol::GetBondById()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a9d1adeb0f4720b6af7f0fc5569a8bb3e">OBDescriptor::GetIdentifier()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afef672662f0f83abd8149e15cc531f01">OBMol::GetResidue()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a060c746a125272a535ec8f6b59f5338a">OBAlign::GetRMSD()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a53e6707da019dfa88df1e8c1aeeb6f67">OBAlign::GetRotMatrix()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a16086309583fe9a7f917a54b151a2cce">OBChiralData::GetSize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78d46b60f04702fa6f450ef6f8dae62">OBMol::GetTotalCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa431b859ed26f5a45e6ddc3448da1d1f">OBMol::GetTotalSpinMultiplicity()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">OBConversion::NumInputObjects()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classDLHandler.shtml#aace44b593957d50c6396a1e23d67189d">DLHandler::openLib()</a>, <a class="el" href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">operator&gt;&gt;()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ae59fef8af62e52629bf2576e34a26801">OBRotorRules::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBIsotopeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBTypeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ac41e9b3233ce576c2e4c5b242767eaec">OBDescriptor::ReadStringFromFilter()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">OBConversion::RegisterOptionParam()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afa417798ba7c13bf75a7ab04f2803cdb">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#ab2d7445256c698000dd2beab47a784e0">OBChiralData::SetAtom4Refs()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#a9b40b242258cc488f341d06412a1fb89">OBTypeTable::SetFromType()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a50a6320395d2466d277dc42f872c50f8">OBMol::SetInternalCoord()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">OBMol::SetTorsion()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#aeb07d37f2d18888127964d11e28c1c12">OBTypeTable::SetToType()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBRotorList::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">OBSmartsPattern::SMARTSError()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6d03ef3f811fa2c085694ccbf76051d4">OBMol::start_kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a89743304090380b06c920530f919a2fe">OBMol::StripSalts()</a>, <a class="el" href="classOpenBabel_1_1obLogBuf.shtml#a553fc1343cc7a747775864d1d124a5d5">obLogBuf::sync()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError()</a>, <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#ac6f1bf41e38b3e8b182fa57269046070">OBTetraNonPlanarStereo::ToConfig()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">OBMol::ToInertialFrame()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#a613e0ea0da4b4b0d26ea29439e3554a8">OBTypeTable::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#af574984ee6ea81537b5af994f7f590df">patty::type_to_int()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a3748ab33ffd81acda5060963bdae971a">OBAlign::UpdateCoords()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>, and <a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml#a4ad5fb826838fc07d9bee2c09b5ef039">FastSearchIndexer::~FastSearchIndexer()</a>.</p>

</div>
</div>
<a class="anchor" id="a30154f62f3bd1a1b8613a080444e69d7"></a><!-- doxytag: member="OpenBabel::resdat" ref="a30154f62f3bd1a1b8613a080444e69d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> <a class="el" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">resdat</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files).">OBResidueData</a> biomolecule residue database. </p>

</div>
</div>
<a class="anchor" id="a99dab86ea7c23d635f350a07644c16a6"></a><!-- doxytag: member="OpenBabel::NoId" ref="a99dab86ea7c23d635f350a07644c16a6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned long <a class="el" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">NoId</a> = <a class="el" href="structOpenBabel_1_1detail_1_1max__value.shtml">detail::max_value</a>&lt;unsigned long&gt;::result<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa53209ef174b454eb99e269ef59ebbe0">OBMol::AddAtom()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad12fd937da5f4b0c4562888252fe214b">OBAtom::Clear()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a class="anchor" id="a1c64f54dc7b18535a4e9cc581199e26a"></a><!-- doxytag: member="OpenBabel::Residue" ref="a1c64f54dc7b18535a4e9cc581199e26a" args="[MAXRES][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#a1c64f54dc7b18535a4e9cc581199e26a">Residue</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber()</a>.</p>

</div>
</div>
<a class="anchor" id="ada1d79ef0dec356ea0ae9c1d4e654ca2"></a><!-- doxytag: member="OpenBabel::ElemDesc" ref="ada1d79ef0dec356ea0ae9c1d4e654ca2" args="[MAXELEM][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#ada1d79ef0dec356ea0ae9c1d4e654ca2">ElemDesc</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber()</a>.</p>

</div>
</div>
<a class="anchor" id="af4a6dc069703276b9476ce6b7c5f018e"></a><!-- doxytag: member="OpenBabel::ResNo" ref="af4a6dc069703276b9476ce6b7c5f018e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="namespaceOpenBabel.shtml#af4a6dc069703276b9476ce6b7c5f018e">ResNo</a> = MINRES</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber()</a>.</p>

</div>
</div>
<a class="anchor" id="a508adcc5794ff87b21a2e5fc0d752b17"></a><!-- doxytag: member="OpenBabel::ElemNo" ref="a508adcc5794ff87b21a2e5fc0d752b17" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="namespaceOpenBabel.shtml#a508adcc5794ff87b21a2e5fc0d752b17">ElemNo</a> = MINELEM</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber()</a>.</p>

</div>
</div>
<a class="anchor" id="ace51dfd98be07acf3a9c75c21e8d8af2"></a><!-- doxytag: member="OpenBabel::VZero" ref="ace51dfd98be07acf3a9c75c21e8d8af2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">VZero</a>(0.0, 0.0, 0.0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The zero vector: &lt;0.0, 0.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#a1563b71f50c0192978cecaed6fc11fcb">OBScoreGrid::Center()</a>, <a class="el" href="namespaceOpenBabel.shtml#aabfd0c1c9630002b16c782ad7d39790f">center_coords()</a>, <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#af6996bda138d1b637cf36db2fab269d8">OBScoreGrid::CenterMol()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a9b1ae06b444f49a68b2e2c8ac9a0c534">OBChargeModel::GetDipoleMoment()</a>, <a class="el" href="classOpenBabel_1_1OBFFConstraint.shtml#aa72374f7ad0c140529a3b010e7daf8af">OBFFConstraint::GetGradient()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a class="anchor" id="a6ca3b632d31093a7110635452bccc7bd"></a><!-- doxytag: member="OpenBabel::VX" ref="a6ca3b632d31093a7110635452bccc7bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">VX</a>(1.0, 0.0, 0.0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The x unit vector: &lt;1.0, 0.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af20dd57788f4898cd7377dffe63986fc">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a class="anchor" id="a2d3d483edcdb477b3d15f19a001845ee"></a><!-- doxytag: member="OpenBabel::VY" ref="a2d3d483edcdb477b3d15f19a001845ee" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">VY</a>(0.0, 1.0, 0.0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The y unit vector: &lt;0.0, 1.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ae82e7b7b74e5212eada681c15afb77f4">InternalToCartesian()</a>.</p>

</div>
</div>
<a class="anchor" id="a08ec791bf0217b5df66e5879a9f9c95a"></a><!-- doxytag: member="OpenBabel::VZ" ref="a08ec791bf0217b5df66e5879a9f9c95a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">VZ</a>(0.0, 0.0, 1.0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The z unit vector: &lt;0.0, 0.0, 1.0&gt; </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a class="anchor" id="af4a64fa5669b273a31330641abe62978"></a><!-- doxytag: member="OpenBabel::phmodel" ref="af4a64fa5669b273a31330641abe62978" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a> <a class="el" href="namespaceOpenBabel.shtml#af4a64fa5669b273a31330641abe62978">phmodel</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669">OBMol::CorrectForPH()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a>.</p>

</div>
</div>
<a class="anchor" id="a384eab3fdca5eabacaf7c1167d8fbbe8"></a><!-- doxytag: member="OpenBabel::bitsoff" ref="a384eab3fdca5eabacaf7c1167d8fbbe8" args="[SETWORD]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#a384eab3fdca5eabacaf7c1167d8fbbe8">bitsoff</a>[SETWORD]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
    {
      0xFFFFFFFF,0xFFFFFFFE,0xFFFFFFFC,0xFFFFFFF8,0xFFFFFFF0,0xFFFFFFE0,0xFFFFFFC0,
      0xFFFFFF80,0xFFFFFF00,0xFFFFFE00,0xFFFFFC00,0xFFFFF800,0xFFFFF000,0xFFFFE000,
      0xFFFFC000,0xFFFF8000,0xFFFF0000,0xFFFE0000,0xFFFC0000,0xFFF80000,0xFFF00000,
      0xFFE00000,0xFFC00000,0xFF800000,0xFF000000,0xFE000000,0xFC000000,0xF8000000,
      0xF0000000,0xE0000000,0xC0000000,0x80000000
    }
</pre></div>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#ab8bac9f6bedd4c94792757d965945ac6">OBBitVec::NextBit()</a>.</p>

</div>
</div>
<a class="anchor" id="a37764b678471578b5f9441bd6f130fd8"></a><!-- doxytag: member="OpenBabel::nibble_bit_count" ref="a37764b678471578b5f9441bd6f130fd8" args="[0x10]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned <a class="el" href="namespaceOpenBabel.shtml#a37764b678471578b5f9441bd6f130fd8">nibble_bit_count</a>[0x10]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment">
    {
      0, 
      1, 
      1, 
      2, 
      1, 
      2, 
      2, 
      3, 
      1, 
      2, 
      2, 
      3, 
      2, 
      3, 
      3, 
      4  
    }
</pre></div>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#acf47ba30bf82aff0a9f03029917c5849">OBBitVec::CountBits()</a>.</p>

</div>
</div>
<a class="anchor" id="aba95148bad1cac8e3abb51a485c17cac"></a><!-- doxytag: member="OpenBabel::bondtyper" ref="aba95148bad1cac8e3abb51a485c17cac" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> <a class="el" href="namespaceOpenBabel.shtml#aba95148bad1cac8e3abb51a485c17cac">bondtyper</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml" title="Assigns bond types for file formats without bond information.">OBBondTyper</a> for perception of bond order assignment. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a class="anchor" id="a26e55b55a5d9997fa7e9326cd603fcdd"></a><!-- doxytag: member="OpenBabel::Peptide" ref="a26e55b55a5d9997fa7e9326cd603fcdd" args="[MAXPEPTIDE]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a> <a class="el" href="namespaceOpenBabel.shtml#a26e55b55a5d9997fa7e9326cd603fcdd">Peptide</a>[MAXPEPTIDE]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
        {  0x0001, 7, 2, 0x0030, 0x0100,      0, 0 }, 
        {  0x0002, 7, 1, 0x0030,      0,      0, 0 }, 
        {  0x0004, 7, 3, 0x0030, 0x0100,     -6, 0 }, 
        {  0x0008, 7, 2, 0x0030,     -6,      0, 0 }, 
        {  0x0010, 6, 3, 0x000F, 0x0700,     -6, 0 }, 
        {  0x0020, 6, 2, 0x0003, 0x0700,      0, 0 }, 
        {  0x0100, 6, 3, 0x0030, 0x1000, 0x0005, 0 }, 
        {  0x0200, 6, 2, 0x0030, 0x1000,      0, 0 }, 
        {  0x0400, 6, 3, 0x0030, 0x1000, 0x2000, 0 }, 
        {  0x1000, 8, 1, 0x0700,      0,      0, 0 }, 
        {  0x2000, 8, 1, 0x0400,      0,      0, 0 }  
  }
</pre></div><p>Generic template for peptide residue backbone. <br/>
 col 1: bitmask <br/>
 col 2: element number <br/>
 col 3: neighbour count <br/>
 col 4-7: 1-4 bitmasks for neighbour atoms (-6 means carbon) </p>

</div>
</div>
<a class="anchor" id="ab4cf89b53bf070dafd1717b69e89d8a0"></a><!-- doxytag: member="OpenBabel::Nucleotide" ref="ab4cf89b53bf070dafd1717b69e89d8a0" args="[MAXNUCLEIC]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a> <a class="el" href="namespaceOpenBabel.shtml#ab4cf89b53bf070dafd1717b69e89d8a0">Nucleotide</a>[MAXNUCLEIC]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
        {  0x0001, 15, 4, 0x0004, 0x0004, 0x0008, 0x0200 },
        {  0x0002, 15, 3, 0x0004, 0x0004, 0x0008,      0 },
        {  0x0004,  8, 1, 0x0003,      0,      0,      0 },
        {  0x0008,  8, 2, 0x0020, 0x0003,      0,      0 },
        {  0x0010,  8, 1, 0x0020,      0,      0,      0 },
        {  0x0020,  6, 2, 0x0018, 0x0040,      0,      0 },
        {  0x0040,  6, 3, 0x0020, 0x0080, 0x0100,      0 },
        {  0x0080,  8, 2, 0x0040, 0x4000,      0,      0 },
        {  0x0100,  6, 3, 0x0040, 0x0600, 0x1800,      0 },
        {  0x0200,  8, 2, 0x0100, 0x0001,      0,      0 },
        {  0x0400,  8, 1, 0x0100,      0,      0,      0 },
        {  0x0800,  6, 3, 0x0100, 0x4000, 0x2000,      0 },
        {  0x1000,  6, 2, 0x0100, 0x4000,      0,      0 },
        {  0x2000,  8, 1, 0x0800,      0,      0,      0 },
        {  0x4000,  6, 3, 0x0080, 0x1800,     -7,      0 }
  }
</pre></div>
<p>Generic template for peptide nucleotide backbone. </p>

</div>
</div>
<a class="anchor" id="a7b064978f82414d1a9805ac383a5cac5"></a><!-- doxytag: member="OpenBabel::ChainsAtomName" ref="a7b064978f82414d1a9805ac383a5cac5" args="[ATOMMAX][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">ChainsAtomName</a>[ATOMMAX][4]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>PDB atom types (i.e., columns 13-16 of a PDB file) index numbers from this array are used in the pseudo-SMILES format for side-chains in the AminoAcids[] &amp; Nucleotides[] global arrays below </p>

</div>
</div>
<a class="anchor" id="a0f1fa68f20787eefe51bc205d70bf141"></a><!-- doxytag: member="OpenBabel::AminoAcids" ref="a0f1fa68f20787eefe51bc205d70bf141" args="[AMINOMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ResidType <a class="el" href="namespaceOpenBabel.shtml#a0f1fa68f20787eefe51bc205d70bf141">AminoAcids</a>[AMINOMAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    { <span class="stringliteral">&quot;ILE&quot;</span>, <span class="stringliteral">&quot;1-4(-9-14)-10&quot;</span>                        },
    { <span class="stringliteral">&quot;VAL&quot;</span>, <span class="stringliteral">&quot;1-4(-9)-10&quot;</span>                           },
    { <span class="stringliteral">&quot;ALA&quot;</span>, <span class="stringliteral">&quot;1-4&quot;</span>                                  },
    { <span class="stringliteral">&quot;ASN&quot;</span>, <span class="stringliteral">&quot;1-4-7(=15)-19&quot;</span>                        },
    { <span class="stringliteral">&quot;ASP&quot;</span>, <span class="stringliteral">&quot;1-4-7(=15)-18&quot;</span>                        },
    { <span class="stringliteral">&quot;ARG&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-21-29(=34)-35&quot;</span>               },
    { <span class="stringliteral">&quot;CYS&quot;</span>, <span class="stringliteral">&quot;1-4-5&quot;</span>                                },
    { <span class="stringliteral">&quot;GLN&quot;</span>, <span class="stringliteral">&quot;1-4-7-11(=23)-27&quot;</span>                     },
    { <span class="stringliteral">&quot;GLU&quot;</span>, <span class="stringliteral">&quot;1-4-7-11(=23)-26&quot;</span>                     },
    { <span class="stringliteral">&quot;GLY&quot;</span>, <span class="stringliteral">&quot;1&quot;</span>                                    },
    { <span class="stringliteral">&quot;HIS&quot;</span>, <span class="stringliteral">&quot;1-4-7^16~22^27^17~7&quot;</span>                  },
    { <span class="stringliteral">&quot;HYP&quot;</span>, <span class="stringliteral">&quot;1-4-7(-12)-11-0&quot;</span>                      },
    { <span class="stringliteral">&quot;LEU&quot;</span>, <span class="stringliteral">&quot;1-4-7(-14)-17&quot;</span>                        },
    { <span class="stringliteral">&quot;LYS&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-20-30&quot;</span>                       },
    { <span class="stringliteral">&quot;MET&quot;</span>, <span class="stringliteral">&quot;1-4-7-13-20&quot;</span>                          },
    { <span class="stringliteral">&quot;PHE&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^22~29^25~17^7&quot;</span>               },
    { <span class="stringliteral">&quot;PRO&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-0&quot;</span>                           },
    { <span class="stringliteral">&quot;SER&quot;</span>, <span class="stringliteral">&quot;1-4-6&quot;</span>                                },
    { <span class="stringliteral">&quot;THR&quot;</span>, <span class="stringliteral">&quot;1-4(-8)-10&quot;</span>                           },
    { <span class="stringliteral">&quot;TRP&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^24^25~17(^7)^28~32^36~31^25&quot;</span> },
    { <span class="stringliteral">&quot;TYR&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^22~29(-33)^25~17^7&quot;</span>          }
  }
</pre></div><p>Side chains for recognized amino acids using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by <a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">OpenBabel::ChainsAtomName</a> global array above. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#aa593ab79033f0bec4605419515d00393">OBChainsParser::OBChainsParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a2326ccdc5fd0c0b5cfd5842cf4c7da03"></a><!-- doxytag: member="OpenBabel::Nucleotides" ref="a2326ccdc5fd0c0b5cfd5842cf4c7da03" args="[NUCLEOMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ResidType <a class="el" href="namespaceOpenBabel.shtml#a2326ccdc5fd0c0b5cfd5842cf4c7da03">Nucleotides</a>[NUCLEOMAX]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    { <span class="stringliteral">&quot;  A&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-56)-57-58-61-62(-53)-50&quot;</span>      },
    { <span class="stringliteral">&quot;  C&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-64)-65-67-57&quot;</span>               },
    { <span class="stringliteral">&quot;  G&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-55)-57-58(-60)-61-62(-53)-50&quot;</span> },
    { <span class="stringliteral">&quot;  T&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-63)-65(-66)-67-57&quot;</span>          },
    { <span class="stringliteral">&quot;  U&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-63)-65-67-57&quot;</span>               },
    { <span class="stringliteral">&quot;  I&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-55)-57-58-61-62(-53)-50&quot;</span>      }
  }
</pre></div><p>Side chains for recognized nucleotides using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by <a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">OpenBabel::ChainsAtomName</a> global array above. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#aa593ab79033f0bec4605419515d00393">OBChainsParser::OBChainsParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a6d27c5a78720907303f7345d7f972f36"></a><!-- doxytag: member="OpenBabel::MonoAtom" ref="a6d27c5a78720907303f7345d7f972f36" args="[MaxMonoAtom]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MonoAtomType <a class="el" href="namespaceOpenBabel.shtml#a6d27c5a78720907303f7345d7f972f36">MonoAtom</a>[MaxMonoAtom]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a424ffb435ce72308ed456dd1c8e5de60"></a><!-- doxytag: member="OpenBabel::MonoBond" ref="a424ffb435ce72308ed456dd1c8e5de60" args="[MaxMonoBond]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MonoBondType <a class="el" href="namespaceOpenBabel.shtml#a424ffb435ce72308ed456dd1c8e5de60">MonoBond</a>[MaxMonoBond]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a4f891e27abe7998822f22e513182317a"></a><!-- doxytag: member="OpenBabel::MonoAtomCount" ref="a4f891e27abe7998822f22e513182317a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#a4f891e27abe7998822f22e513182317a">MonoAtomCount</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="afe6df7aef6454d16dfbde0b74a516b63"></a><!-- doxytag: member="OpenBabel::MonoBondCount" ref="afe6df7aef6454d16dfbde0b74a516b63" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#afe6df7aef6454d16dfbde0b74a516b63">MonoBondCount</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a9e0089655dc8a4d83d40dcbe519ca9bb"></a><!-- doxytag: member="OpenBabel::Stack" ref="a9e0089655dc8a4d83d40dcbe519ca9bb" args="[STACKSIZE]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">StackType <a class="el" href="namespaceOpenBabel.shtml#a9e0089655dc8a4d83d40dcbe519ca9bb">Stack</a>[STACKSIZE]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a5e019437eb125244e080ac8bee696b05"></a><!-- doxytag: member="OpenBabel::StackPtr" ref="a5e019437eb125244e080ac8bee696b05" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#a5e019437eb125244e080ac8bee696b05">StackPtr</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a08aed91cf3c0528c11e2c383078b9e52"></a><!-- doxytag: member="OpenBabel::AtomIndex" ref="a08aed91cf3c0528c11e2c383078b9e52" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#a08aed91cf3c0528c11e2c383078b9e52">AtomIndex</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="ab8cd0fea55be4772aece582108b664c9"></a><!-- doxytag: member="OpenBabel::BondIndex" ref="ab8cd0fea55be4772aece582108b664c9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#ab8cd0fea55be4772aece582108b664c9">BondIndex</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="af4e7dde6c2732deca11bff4c63c46372"></a><!-- doxytag: member="OpenBabel::StrictFlag" ref="af4e7dde6c2732deca11bff4c63c46372" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespaceOpenBabel.shtml#af4e7dde6c2732deca11bff4c63c46372">StrictFlag</a> = false<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a class="anchor" id="a8759fc55507d155f4eb9fa303cfecc59"></a><!-- doxytag: member="OpenBabel::red" ref="a8759fc55507d155f4eb9fa303cfecc59" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a> = &quot;\033[1;31m&quot;<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a class="anchor" id="ac12598cc2108fbc1e3ba8d1c3c92bb12"></a><!-- doxytag: member="OpenBabel::green" ref="ac12598cc2108fbc1e3ba8d1c3c92bb12" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a> = &quot;\033[1;32m&quot;<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a class="anchor" id="acee835767e8d4be32f5ad94a2e90a45f"></a><!-- doxytag: member="OpenBabel::yellow" ref="acee835767e8d4be32f5ad94a2e90a45f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespaceOpenBabel.shtml#acee835767e8d4be32f5ad94a2e90a45f">yellow</a> = &quot;\033[1;33m&quot;<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a19b2b376a1bda5b375eca394cff7f129"></a><!-- doxytag: member="OpenBabel::blue" ref="a19b2b376a1bda5b375eca394cff7f129" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a> = &quot;\033[1;34m&quot;<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a class="anchor" id="ae70ea9d1800f7ec86a2db16c71c42e21"></a><!-- doxytag: member="OpenBabel::normal" ref="ae70ea9d1800f7ec86a2db16c71c42e21" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="namespaceOpenBabel.shtml#ae70ea9d1800f7ec86a2db16c71c42e21">normal</a> = &quot;\033[0m&quot;<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>.</p>

</div>
</div>
<a class="anchor" id="a007ca25767fb63a9b52010d40c8888df"></a><!-- doxytag: member="OpenBabel::hVal" ref="a007ca25767fb63a9b52010d40c8888df" args="[NELEMMCDL]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a007ca25767fb63a9b52010d40c8888df">hVal</a>[NELEMMCDL]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
        0,1,0,0,0,3,4,3,2,1,
        0,0,0,3,4,3,2,1,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,4,3,2,1,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        2,3,2,1,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,2,0,2,1,0,1,2,0,
        0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,1,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0}
</pre></div>
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>, <a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="a6eb8f9135e86a8fd55d2293c4fe7b811"></a><!-- doxytag: member="OpenBabel::maxVal" ref="a6eb8f9135e86a8fd55d2293c4fe7b811" args="[NELEMMCDL]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a6eb8f9135e86a8fd55d2293c4fe7b811">maxVal</a>[NELEMMCDL]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    0,1,0,1,2,4,4,5,3,1,
        0,1,2,4,4,6,6,7,0,1,
        2,3,4,5,6,7,6,4,4,2,
        2,3,4,5,6,7,8,1,2,3,
        4,5,6,7,8,6,6,2,2,3,
        4,5,6,7,8,1,2,3,4,4,
        3,3,3,3,3,4,3,3,3,3,
        3,3,4,5,6,7,8,6,6,3,
        2,3,4,5,6,7,8,1,2,3,
        4,5,6,6,6,6,3,4,3,3,
        3,3,1,1,1,0,0,0,0,0,
        0,8,1,8,5,0,0,0,0,0,0}
</pre></div>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml#a40222dcd3279681bde395d7f661779db">OBSpectrophore::_luDecompose()</a>, <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>, and <a class="el" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency()</a>.</p>

</div>
</div>
<a class="anchor" id="a0d7409371f9cf6d7f50a3fda440d871a"></a><!-- doxytag: member="OpenBabel::chargeVal" ref="a0d7409371f9cf6d7f50a3fda440d871a" args="[NELEMMCDL]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a0d7409371f9cf6d7f50a3fda440d871a">chargeVal</a>[NELEMMCDL]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {  
   0,-1,-1,-1,-1,-1,-1, 1, 1, 1,-1, 
  -1,-1,-1,-1, 1, 1, 1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 
  -1,-1, 1, 1, 1,-1,-1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 
   1, 1, 1,-1,-1,-1,-1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 
  -1,-1, 1, 1, 1,-1,-1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1}
</pre></div>
</div>
</div>
<a class="anchor" id="a010272f11ab71479f636c0327b5843a8"></a><!-- doxytag: member="OpenBabel::aSymb" ref="a010272f11ab71479f636c0327b5843a8" args="[NELEMMCDL]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceOpenBabel.shtml#a010272f11ab71479f636c0327b5843a8">aSymb</a>[NELEMMCDL]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {<span class="stringliteral">&quot;0&quot;</span>,
    <span class="stringliteral">&quot;H&quot;</span> ,<span class="stringliteral">&quot;He&quot;</span>,<span class="stringliteral">&quot;Li&quot;</span>,<span class="stringliteral">&quot;Be&quot;</span>,<span class="stringliteral">&quot;B&quot;</span> ,<span class="stringliteral">&quot;C&quot;</span> ,<span class="stringliteral">&quot;N&quot;</span> ,<span class="stringliteral">&quot;O&quot;</span> ,<span class="stringliteral">&quot;F&quot;</span> ,<span class="stringliteral">&quot;Ne&quot;</span>,
    <span class="stringliteral">&quot;Na&quot;</span>,<span class="stringliteral">&quot;Mg&quot;</span>,<span class="stringliteral">&quot;Al&quot;</span>,<span class="stringliteral">&quot;Si&quot;</span>,<span class="stringliteral">&quot;P&quot;</span> ,<span class="stringliteral">&quot;S&quot;</span> ,<span class="stringliteral">&quot;Cl&quot;</span>,<span class="stringliteral">&quot;Ar&quot;</span>,<span class="stringliteral">&quot;K&quot;</span> ,<span class="stringliteral">&quot;Ca&quot;</span>,
    <span class="stringliteral">&quot;Sc&quot;</span>,<span class="stringliteral">&quot;Ti&quot;</span>,<span class="stringliteral">&quot;V&quot;</span> ,<span class="stringliteral">&quot;Cr&quot;</span>,<span class="stringliteral">&quot;Mn&quot;</span>,<span class="stringliteral">&quot;Fe&quot;</span>,<span class="stringliteral">&quot;Co&quot;</span>,<span class="stringliteral">&quot;Ni&quot;</span>,<span class="stringliteral">&quot;Cu&quot;</span>,<span class="stringliteral">&quot;Zn&quot;</span>,
    <span class="stringliteral">&quot;Ga&quot;</span>,<span class="stringliteral">&quot;Ge&quot;</span>,<span class="stringliteral">&quot;As&quot;</span>,<span class="stringliteral">&quot;Se&quot;</span>,<span class="stringliteral">&quot;Br&quot;</span>,<span class="stringliteral">&quot;Kr&quot;</span>,<span class="stringliteral">&quot;Rb&quot;</span>,<span class="stringliteral">&quot;Sr&quot;</span>,<span class="stringliteral">&quot;Y&quot;</span> ,<span class="stringliteral">&quot;Zr&quot;</span>,
    <span class="stringliteral">&quot;Nb&quot;</span>,<span class="stringliteral">&quot;Mo&quot;</span>,<span class="stringliteral">&quot;Tc&quot;</span>,<span class="stringliteral">&quot;Ru&quot;</span>,<span class="stringliteral">&quot;Rh&quot;</span>,<span class="stringliteral">&quot;Pd&quot;</span>,<span class="stringliteral">&quot;Ag&quot;</span>,<span class="stringliteral">&quot;Cd&quot;</span>,<span class="stringliteral">&quot;In&quot;</span>,<span class="stringliteral">&quot;Sn&quot;</span>,
    <span class="stringliteral">&quot;Sb&quot;</span>,<span class="stringliteral">&quot;Te&quot;</span>,<span class="stringliteral">&quot;I&quot;</span> ,<span class="stringliteral">&quot;Xe&quot;</span>,<span class="stringliteral">&quot;Cs&quot;</span>,<span class="stringliteral">&quot;Ba&quot;</span>,<span class="stringliteral">&quot;La&quot;</span>,<span class="stringliteral">&quot;Ce&quot;</span>,<span class="stringliteral">&quot;Pr&quot;</span>,<span class="stringliteral">&quot;Nd&quot;</span>,
    <span class="stringliteral">&quot;Pm&quot;</span>,<span class="stringliteral">&quot;Sm&quot;</span>,<span class="stringliteral">&quot;Eu&quot;</span>,<span class="stringliteral">&quot;Gd&quot;</span>,<span class="stringliteral">&quot;Tb&quot;</span>,<span class="stringliteral">&quot;Dy&quot;</span>,<span class="stringliteral">&quot;Ho&quot;</span>,<span class="stringliteral">&quot;Er&quot;</span>,<span class="stringliteral">&quot;Tm&quot;</span>,<span class="stringliteral">&quot;Yb&quot;</span>,
    <span class="stringliteral">&quot;Lu&quot;</span>,<span class="stringliteral">&quot;Hf&quot;</span>,<span class="stringliteral">&quot;Ta&quot;</span>,<span class="stringliteral">&quot;W&quot;</span> ,<span class="stringliteral">&quot;Re&quot;</span>,<span class="stringliteral">&quot;Os&quot;</span>,<span class="stringliteral">&quot;Ir&quot;</span>,<span class="stringliteral">&quot;Pt&quot;</span>,<span class="stringliteral">&quot;Au&quot;</span>,<span class="stringliteral">&quot;Hg&quot;</span>,
    <span class="stringliteral">&quot;Tl&quot;</span>,<span class="stringliteral">&quot;Pb&quot;</span>,<span class="stringliteral">&quot;Bi&quot;</span>,<span class="stringliteral">&quot;Po&quot;</span>,<span class="stringliteral">&quot;At&quot;</span>,<span class="stringliteral">&quot;Rn&quot;</span>,<span class="stringliteral">&quot;Fr&quot;</span>,<span class="stringliteral">&quot;Ra&quot;</span>,<span class="stringliteral">&quot;Ac&quot;</span>,<span class="stringliteral">&quot;Th&quot;</span>,
    <span class="stringliteral">&quot;Pa&quot;</span>,<span class="stringliteral">&quot;U&quot;</span> ,<span class="stringliteral">&quot;Np&quot;</span>,<span class="stringliteral">&quot;Pu&quot;</span>,<span class="stringliteral">&quot;Am&quot;</span>,<span class="stringliteral">&quot;Cm&quot;</span>,<span class="stringliteral">&quot;Bk&quot;</span>,<span class="stringliteral">&quot;Cf&quot;</span>,<span class="stringliteral">&quot;Es&quot;</span>,<span class="stringliteral">&quot;Fm&quot;</span>,
    <span class="stringliteral">&quot;Md&quot;</span>,<span class="stringliteral">&quot;No&quot;</span>,<span class="stringliteral">&quot;Lr&quot;</span>,<span class="stringliteral">&quot;D&quot;</span> ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;G&quot;</span> ,<span class="stringliteral">&quot;0&quot;</span> ,<span class="stringliteral">&quot;Xx&quot;</span>,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,
    <span class="stringliteral">&quot;M&quot;</span> ,<span class="stringliteral">&quot;X&quot;</span> ,<span class="stringliteral">&quot;A&quot;</span> ,<span class="stringliteral">&quot;Q&quot;</span> ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>}
</pre></div>
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a0c4710d7911172f59b1f9caf9192d2d6">getAtomSymbol()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="a1b7de377338f7ac7700315efbba80ae2"></a><!-- doxytag: member="OpenBabel::exactAtom" ref="a1b7de377338f7ac7700315efbba80ae2" args="[NEXACTATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a1b7de377338f7ac7700315efbba80ae2">exactAtom</a>[NEXACTATOMS] = {6,14,5,50,82,8,16,34,52,7,15,33,51,9,17,35,53,32,13,26,80}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6e4dd9241c1923f5a16e445d29e040e2"></a><!-- doxytag: member="OpenBabel::alkaly" ref="a6e4dd9241c1923f5a16e445d29e040e2" args="[NALKALYATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a6e4dd9241c1923f5a16e445d29e040e2">alkaly</a>[NALKALYATOMS] = {3,11,19,37,55}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a67d14372d5486c87fba4d1347e98677c"></a><!-- doxytag: member="OpenBabel::alkalyEarth" ref="a67d14372d5486c87fba4d1347e98677c" args="[NALKALYEARTHATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a67d14372d5486c87fba4d1347e98677c">alkalyEarth</a>[NALKALYEARTHATOMS] = {4,12,20,38,56}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a37351982a79ec5e7505f20f8d706dd0f"></a><!-- doxytag: member="OpenBabel::trivalent" ref="a37351982a79ec5e7505f20f8d706dd0f" args="[NTRIVALENTATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a37351982a79ec5e7505f20f8d706dd0f">trivalent</a>[NTRIVALENTATOMS] = {21,31,39,49,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,81,89,90,91,92,93,94,95,96,97,98,99}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2c1f49db7daefd6995a8bd194e3ac0ef"></a><!-- doxytag: member="OpenBabel::titan" ref="a2c1f49db7daefd6995a8bd194e3ac0ef" args="[NTITANATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a2c1f49db7daefd6995a8bd194e3ac0ef">titan</a>[NTITANATOMS] = {22,40,72}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac5ecc60b7d1b91afa310c0c6379b909c"></a><!-- doxytag: member="OpenBabel::vanadium" ref="ac5ecc60b7d1b91afa310c0c6379b909c" args="[NVANADIUMATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#ac5ecc60b7d1b91afa310c0c6379b909c">vanadium</a>[NVANADIUMATOMS] = {23,41,73}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a18359deca081005601d5e234fee87a5f"></a><!-- doxytag: member="OpenBabel::cromium" ref="a18359deca081005601d5e234fee87a5f" args="[NCHROMIUMATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a18359deca081005601d5e234fee87a5f">cromium</a>[NCHROMIUMATOMS] = {24,42,74}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6b27e665d816bd4edca018692a03ee1e"></a><!-- doxytag: member="OpenBabel::manganeze" ref="a6b27e665d816bd4edca018692a03ee1e" args="[NMANGANESEATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a6b27e665d816bd4edca018692a03ee1e">manganeze</a>[NMANGANESEATOMS] = {25,43,75}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a1e38b8674bb78cdd93818c4f569d3317"></a><!-- doxytag: member="OpenBabel::likeFe" ref="a1e38b8674bb78cdd93818c4f569d3317" args="[NLIKEFEATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a1e38b8674bb78cdd93818c4f569d3317">likeFe</a>[NLIKEFEATOMS] = {27,28}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab280567064a5940906303e0f95b673d3"></a><!-- doxytag: member="OpenBabel::platinum" ref="ab280567064a5940906303e0f95b673d3" args="[NPLATINUMATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#ab280567064a5940906303e0f95b673d3">platinum</a>[NPLATINUMATOMS] = {44,45,46,76,77,78}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af395a23311a093c6c9ba174c91bb00fe"></a><!-- doxytag: member="OpenBabel::copper" ref="af395a23311a093c6c9ba174c91bb00fe" args="[NCOPPERATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#af395a23311a093c6c9ba174c91bb00fe">copper</a>[NCOPPERATOMS] = {29,47,79}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a790d50110edd641cf164ef702acd67c2"></a><!-- doxytag: member="OpenBabel::zink" ref="a790d50110edd641cf164ef702acd67c2" args="[NZINKATOMS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a790d50110edd641cf164ef702acd67c2">zink</a>[NZINKATOMS] = {30,48}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a32e0599f9cf6f751a89279c86f703e47"></a><!-- doxytag: member="OpenBabel::possibleAromatic" ref="a32e0599f9cf6f751a89279c86f703e47" args="[NAROMMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a32e0599f9cf6f751a89279c86f703e47">possibleAromatic</a>[NAROMMAX] = {7,8,15,16,33,34,51,52,HETERO_ATOM}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a174dbce034c042d7961ad4b02dd4f344"></a><!-- doxytag: member="OpenBabel::metals" ref="a174dbce034c042d7961ad4b02dd4f344" args="[NMETALS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a174dbce034c042d7961ad4b02dd4f344">metals</a>[NMETALS]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  3,4,11,12,13,19,20,21,22,23,24,25,26,27,28,29,
  30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,
  64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,
  92,93,94,95,96,97,98,99,100,101,102,103}
</pre></div>
</div>
</div>
<a class="anchor" id="aa6724f0a1ae8f22fa59505cb00498565"></a><!-- doxytag: member="OpenBabel::lightMetals" ref="aa6724f0a1ae8f22fa59505cb00498565" args="[NLIGHT_METALS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#aa6724f0a1ae8f22fa59505cb00498565">lightMetals</a>[NLIGHT_METALS]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  3,4,11,12,13,19,20,21,22,23,24,25,26,27,28,29,30,31,37,38}
</pre></div>
</div>
</div>
<a class="anchor" id="a1dddb327de910ca9d524dc76a68090a3"></a><!-- doxytag: member="OpenBabel::heavyMetals" ref="a1dddb327de910ca9d524dc76a68090a3" args="[NHEAVY_METALS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#a1dddb327de910ca9d524dc76a68090a3">heavyMetals</a>[NHEAVY_METALS]</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    39,40,41,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,
    64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,
    92,93,94,95,96,97,98,99,100,101,102,103}
</pre></div>
</div>
</div>
<a class="anchor" id="acb826f58b78c49d8732fb29a0b325f9e"></a><!-- doxytag: member="OpenBabel::halogens" ref="acb826f58b78c49d8732fb29a0b325f9e" args="[NHALOGENS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#acb826f58b78c49d8732fb29a0b325f9e">halogens</a>[NHALOGENS] = {9,17,35,53,85}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aec7f886140fb13e79a6823f3bf78b5cf"></a><!-- doxytag: member="OpenBabel::hetero" ref="aec7f886140fb13e79a6823f3bf78b5cf" args="[NHETERO]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#aec7f886140fb13e79a6823f3bf78b5cf">hetero</a>[NHETERO] = {7,8,14,15,16,33,34,51,52,84}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac1e24d8c0684f30e0835a9ca5cf6d1b9"></a><!-- doxytag: member="OpenBabel::strData" ref="ac1e24d8c0684f30e0835a9ca5cf6d1b9" args="[NDATABASE_MOLECULES]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceOpenBabel.shtml#ac1e24d8c0684f30e0835a9ca5cf6d1b9">strData</a>[NDATABASE_MOLECULES]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af4e78cb542837e6c77dcd5da5765833f"></a><!-- doxytag: member="OpenBabel::bondValence" ref="af4e78cb542837e6c77dcd5da5765833f" args="[NBONDTYPES]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int <a class="el" href="namespaceOpenBabel.shtml#af4e78cb542837e6c77dcd5da5765833f">bondValence</a>[NBONDTYPES] = {1,2,3,1,1,0,0,0,1,1,1}</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a8fc4e404ce6dc298048b5bdf5deb3124"></a><!-- doxytag: member="OpenBabel::fsastart" ref="a8fc4e404ce6dc298048b5bdf5deb3124" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceOpenBabel.shtml#a8fc4e404ce6dc298048b5bdf5deb3124">fsastart</a> = &quot;{SA:&quot;</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a5d29a62c474c707d84973a8ecb1f62a3"></a><!-- doxytag: member="OpenBabel::fsbstart" ref="a5d29a62c474c707d84973a8ecb1f62a3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string <a class="el" href="namespaceOpenBabel.shtml#a5d29a62c474c707d84973a8ecb1f62a3">fsbstart</a> = &quot;{SB:&quot;</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a class="anchor" id="a0afcf921bfdabceef6c6cf00836ae203"></a><!-- doxytag: member="OpenBabel::SwabInt" ref="a0afcf921bfdabceef6c6cf00836ae203" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceOpenBabel.shtml#a0afcf921bfdabceef6c6cf00836ae203">SwabInt</a> = (<a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a19c1a2a80cf2af5131ca597d0ce38192"></a><!-- doxytag: member="OpenBabel::Roots" ref="a19c1a2a80cf2af5131ca597d0ce38192" args="[4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="namespaceOpenBabel.shtml#a19c1a2a80cf2af5131ca597d0ce38192">Roots</a>[4]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa7ec675d10f9071757b87d4952938b65">get_roots_3_3()</a>, <a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic()</a>, <a class="el" href="namespaceOpenBabel.shtml#a867d77834ebf14f88224f0dd7e7e0e61">SolveLinear()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ad37b2e597a6a0115fa09fc4903665c9d">SolveQuadratic()</a>.</p>

</div>
</div>
<a class="anchor" id="a9bb7a6b653e299a7918cf66e3a7be057"></a><!-- doxytag: member="OpenBabel::N_parsed_bonds" ref="a9bb7a6b653e299a7918cf66e3a7be057" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#a9bb7a6b653e299a7918cf66e3a7be057">N_parsed_bonds</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a class="anchor" id="a856b116adc145026ec1c182e9145c818"></a><!-- doxytag: member="OpenBabel::PointGroups" ref="a856b116adc145026ec1c182e9145c818" args="[]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">POINT_GROUP <a class="el" href="namespaceOpenBabel.shtml#a856b116adc145026ec1c182e9145c818">PointGroups</a>[]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adddfd42867b5aaa0caaa3a793a8f69e2"></a><!-- doxytag: member="OpenBabel::primes" ref="adddfd42867b5aaa0caaa3a793a8f69e2" args="[MAXPRIMES]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#adddfd42867b5aaa0caaa3a793a8f69e2">primes</a>[MAXPRIMES]<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    1,    2,    3,    5,    7,   11,   13,   17,   19,   23,
    29,   31,   37,   41,   43,   47,   53,   59,   61,   67,
    71,   73,   79,   83,   89,   97,  101,  103,  107,  109,
    113,  127,  131,  137,  139,  149,  151,  157,  163,  167,
    173,  179,  181,  191,  193,  197,  199,  211,  223,  227,
    229,  233,  239,  241,  251,  257,  263,  269,  271,  277,
    281,  283,  293,  307,  311,  313,  317,  331,  337,  347,
    349,  353,  359,  367,  373,  379,  383,  389,  397,  401,
    409,  419,  421,  431,  433,  439,  443,  449,  457,  461,
    463,  467,  479,  487,  491,  499,  503,  509,  521,  523,
    541,  547,  557,  563,  569,  571,  577,  587,  593,  599,
    601,  607,  613,  617,  619,  631,  641,  643,  647,  653,
    659,  661,  673,  677,  683,  691,  701,  709,  719,  727,
    733,  739,  743,  751,  757,  761,  769,  773,  787,  797,
    809,  811,  821,  823,  827,  829,  839,  853,  857,  859,
    863,  877,  881,  883,  887,  907,  911,  919,  929,  937,
    941,  947,  953,  967,  971,  977,  983,  991,  997, 1009,
    1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,
    1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129,
    1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217,
    1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289,
    1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367,
    1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447,
    1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499,
    1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579,
    1583, 1597, 1601, 1607, 1609, 1613
  }
</pre></div>
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a5e5d2c394de2985154659ef73adddea6">DetermineFactors()</a>, and <a class="el" href="namespaceOpenBabel.shtml#af4d8217756622db102e25941df848d37">IsOddPrime()</a>.</p>

</div>
</div>
<a class="anchor" id="ae5fd3b39a867e164de9f433a78d9d09f"></a><!-- doxytag: member="OpenBabel::ringtyper" ref="ae5fd3b39a867e164de9f433a78d9d09f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a> <a class="el" href="namespaceOpenBabel.shtml#ae5fd3b39a867e164de9f433a78d9d09f">ringtyper</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRing.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBRing::GetType()</a>.</p>

</div>
</div>
<a class="anchor" id="ae3c640db1cce9cd703ef7c5429de5453"></a><!-- doxytag: member="OpenBabel::SINT" ref="ae3c640db1cce9cd703ef7c5429de5453" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a> = 0x00000001<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0cc646b14fcc04a16103f6bd73382d17"></a><!-- doxytag: member="OpenBabel::STPTR" ref="a0cc646b14fcc04a16103f6bd73382d17" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned char* <a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a> = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3463c4c11680aefbcce3a25305211efa"></a><!-- doxytag: member="OpenBabel::_SpaceGroups" ref="a3463c4c11680aefbcce3a25305211efa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SpaceGroups <a class="el" href="namespaceOpenBabel.shtml#a3463c4c11680aefbcce3a25305211efa">_SpaceGroups</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#adc5179fa55c4d176d458cadb7ffd2afe">SpaceGroup::Find()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a95a213aecae334a88a385c647318361e">SpaceGroup::GetSpaceGroup()</a>, and <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a3053a7c0ada34598119f6768fdad5138">SpaceGroup::RegisterSpaceGroup()</a>.</p>

</div>
</div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:09 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
