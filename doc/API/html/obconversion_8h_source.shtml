<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">obconversion.h</div>  </div>
</div>
<div class="contents">
<a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2009 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_CONV_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_CONV_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#ifdef HAVE_STRINGS_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;strings.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="dlhandler_8h.shtml" title="Dynamic loader for file format modules.">openbabel/dlhandler.h</a>&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="format_8h.shtml" title="Declarations for OBFormat.">openbabel/format.h</a>&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="lineend_8h.shtml" title="Translate line endings automatically (UNIX, Classic Mac, DOS)">openbabel/lineend.h</a>&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// These macros are used in DLL builds. If they have not</span>
<a name="l00041"></a>00041 <span class="comment">// been set in babelconfig.h, define them as nothing.</span>
<a name="l00042"></a>00042 <span class="preprocessor">#ifndef OBCONV</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">        #define OBCONV</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#ifndef OBDLL</span>
<a name="l00046"></a><a class="code" href="obconversion_8h.shtml#af9c7d63a9061b381020bc7c0a3cbefd1">00046</a> <span class="preprocessor"></span><span class="preprocessor">        #define OBDLL</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">//using namespace std;</span>
<a name="l00050"></a>00050 <span class="keyword">namespace </span>OpenBabel {
<a name="l00051"></a>00051 
<a name="l00052"></a>00052   <span class="comment">// Needed to preserve deprecated API</span>
<a name="l00053"></a><a class="code" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">00053</a>   <span class="keyword">typedef</span> <a class="code" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> <a class="code" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a>;
<a name="l00054"></a>00054 
<a name="l00055"></a><a class="code" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">00055</a>   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="comment">//*************************************************</span>
<a name="l00059"></a>00059 <span class="comment"></span>  <span class="comment">// Class introduction in obconversion.cpp</span>
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml">00060</a>   <span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>
<a name="l00061"></a>00061     {
<a name="l00063"></a>00063     <span class="keyword">public</span>:
<a name="l00065"></a>00065 
<a name="l00066"></a>00066       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>(std::istream* is=NULL, std::ostream* os=NULL);
<a name="l00068"></a>00068       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>&amp; o);
<a name="l00069"></a>00069       <span class="keyword">virtual</span>     ~<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>();
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074       <span class="keyword">static</span> <span class="keywordtype">int</span>                                RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00076"></a>00076       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00079"></a>00079       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FindFormat(<span class="keyword">const</span> std::string ID);
<a name="l00081"></a>00081       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);
<a name="l00084"></a>00084       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> std::string filename);
<a name="l00086"></a>00086       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00087"></a>00087 
<a name="l00089"></a>00089       <span class="keyword">static</span> <span class="keywordtype">bool</span>               GetNextFormat(<a class="code" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a>&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*&amp; pFormat);
<a name="l00091"></a>00091 
<a name="l00093"></a>00093 
<a name="l00094"></a>00094       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span>
<a name="l00096"></a>00096 <span class="comment"></span>
<a name="l00098"></a>00098 
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5905ca0af771ee5a83ebd496f02e8ced">00099</a>       std::istream* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5905ca0af771ee5a83ebd496f02e8ced">GetInStream</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInStream;};
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a751641ec702413ddf9fb86e24fe6da80">00100</a>       std::ostream* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a751641ec702413ddf9fb86e24fe6da80">GetOutStream</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutStream;};
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#abe2cafdff8bf62ae36fbbfca3eb836bf">00101</a>       <span class="keywordtype">void</span>          SetInStream(std::istream* pIn)
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103           <span class="keywordflow">if</span> (pInStream &amp;&amp; NeedToFreeInStream) {
<a name="l00104"></a>00104             <span class="keyword">delete</span> pInStream; NeedToFreeInStream = <span class="keyword">false</span>;
<a name="l00105"></a>00105           }
<a name="l00106"></a>00106           pInStream=pIn;
<a name="l00107"></a>00107           CheckedForGzip = <span class="keyword">false</span>; <span class="comment">// haven&#39;t tried to gzip decode this stream</span>
<a name="l00108"></a>00108         };
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7520c6b17b3cf9c506738794baab99b1">00109</a>       <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut)
<a name="l00110"></a>00110         {
<a name="l00111"></a>00111           <span class="keywordflow">if</span> (pOutStream &amp;&amp; NeedToFreeOutStream) {
<a name="l00112"></a>00112             <span class="keyword">delete</span> pOutStream; NeedToFreeOutStream = <span class="keyword">false</span>;
<a name="l00113"></a>00113           }
<a name="l00114"></a>00114           pOutStream=pOut;
<a name="l00115"></a>00115         };
<a name="l00117"></a>00117       <span class="keywordtype">bool</span>        SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00118"></a>00118       <span class="keywordtype">bool</span>        SetInAndOutFormats(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pIn, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pOut);
<a name="l00120"></a>00120       <span class="keywordtype">bool</span>            SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID);
<a name="l00121"></a>00121       <span class="keywordtype">bool</span>            SetInFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pIn);
<a name="l00123"></a>00123       <span class="keywordtype">bool</span>            SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00124"></a>00124       <span class="keywordtype">bool</span>            SetOutFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pOut);
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#aed42a5004f6ba5522bb59ce13467a951">00126</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aed42a5004f6ba5522bb59ce13467a951">GetInFormat</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#afd4dc6481ea2d1d95e2cd04b1643fb8c">00127</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#afd4dc6481ea2d1d95e2cd04b1643fb8c">GetOutFormat</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7f988979d62a5d63e85a294d826e1c9e">00128</a>       std::string <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7f988979d62a5d63e85a294d826e1c9e">GetInFilename</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};
<a name="l00129"></a>00129 
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab54ab5100f5418bc0ba174da74b72d2f">00131</a>       std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab54ab5100f5418bc0ba174da74b72d2f" title="Get the position in the input stream of the object being read.">GetInPos</a>()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;};
<a name="l00132"></a>00132 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#acc7cbe1da68663d0d507de6da778d3c2">00134</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#acc7cbe1da68663d0d507de6da778d3c2" title="Get the length in the input stream of the object being read.">GetInLen</a>()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;};
<a name="l00135"></a>00135 
<a name="l00137"></a>00137       <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;
<a name="l00138"></a>00138 
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a8e3fd39dd67cdd120890d37f0f196bda">00140</a>       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a8e3fd39dd67cdd120890d37f0f196bda" title="Extension method: deleted in ~OBConversion()">GetAuxConv</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">00141</a>       <span class="keywordtype">void</span>          <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">SetAuxConv</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv) {pAuxConv=pConv;};
<a name="l00143"></a>00143 
<a name="l00180"></a>00180 
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">00181</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> { INOPTIONS, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a>, GENOPTIONS, ALL };
<a name="l00182"></a>00182 
<a name="l00184"></a>00184       <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,Option_type opttyp=OUTOPTIONS);
<a name="l00185"></a>00185 
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7da66ef30fd0af867e9d3bd0df15f4a2">00187</a>       <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* GetOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> opttyp)
<a name="l00188"></a>00188         { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};
<a name="l00189"></a>00189 
<a name="l00191"></a>00191       <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type opttyp=OUTOPTIONS, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193       <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type optype);
<a name="l00194"></a>00194 
<a name="l00196"></a>00196       <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, Option_type opttyp);
<a name="l00197"></a>00197 
<a name="l00199"></a>00199       <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat,
<a name="l00200"></a>00200                                       <span class="keywordtype">int</span> numberParams=0, Option_type typ=OUTOPTIONS);
<a name="l00201"></a>00201 
<a name="l00203"></a>00203       <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, Option_type typ);
<a name="l00205"></a>00205 
<a name="l00207"></a>00207       <span class="keywordtype">void</span> CopyOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pSourceConv, Option_type typ=ALL);
<a name="l00208"></a>00208 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211       <span class="comment">// @brief Set and return the list of supported input format</span>
<a name="l00212"></a>00212       std::vector&lt;std::string&gt; GetSupportedInputFormat();
<a name="l00213"></a>00213       <span class="comment">// @brief Set and return the list of supported output format</span>
<a name="l00214"></a>00214       std::vector&lt;std::string&gt; GetSupportedOutputFormat();
<a name="l00216"></a>00216 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 
<a name="l00220"></a>00220       <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);
<a name="l00221"></a>00221 
<a name="l00223"></a>00223       <span class="keywordtype">int</span>         Convert();
<a name="l00224"></a>00224 
<a name="l00227"></a>00227       <span class="keywordtype">int</span>                                       FullConvert(std::vector&lt;std::string&gt;&amp; FileList,
<a name="l00228"></a>00228                               std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);
<a name="l00230"></a>00230 
<a name="l00232"></a>00232 
<a name="l00233"></a>00233       <span class="keywordtype">int</span>     AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00234"></a>00234       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*  GetChemObject(); 
<a name="l00235"></a>00235       <span class="keywordtype">bool</span>     IsLast();
<a name="l00236"></a>00236       <span class="keywordtype">bool</span>     IsFirstInput();
<a name="l00237"></a>00237       <span class="keywordtype">void</span>     SetFirstInput(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00238"></a>00238       <span class="keywordtype">int</span>      GetOutputIndex() <span class="keyword">const</span> ;
<a name="l00239"></a>00239       <span class="keywordtype">void</span>     SetOutputIndex(<span class="keywordtype">int</span> indx);
<a name="l00240"></a>00240       <span class="keywordtype">void</span>     SetMoreFilesToCome();
<a name="l00241"></a>00241       <span class="keywordtype">void</span>     SetOneObjectOnly(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00242"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810">00242</a>       <span class="keywordtype">void</span>     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810" title="Synonym for SetOneObjectOnly()">SetLast</a>(<span class="keywordtype">bool</span> b){SetOneObjectOnly(b);}
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2">00243</a>       <span class="keywordtype">bool</span>     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2" title="True if no more files to be read.">IsLastFile</a>(){ <span class="keywordflow">return</span> !MoreFilesToCome;}
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#aea550de4e59eeb0d4ccf450608a3c915">00246</a>       <span class="keywordtype">int</span>      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aea550de4e59eeb0d4ccf450608a3c915" title="Number of objects read and processed Incremented after options are processed, so 0 for first object...">GetCount</a>()<span class="keyword">const </span>{ <span class="keywordflow">return</span> Count; }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a442b17995d84d654e33ede11a63d7f80">00251</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a442b17995d84d654e33ede11a63d7f80" title="The default format is set in a single OBFormat class (generally it is OBMol)">GetDefaultFormat</a>(){<span class="keywordflow">return</span> OBFormat::FindType(NULL);};
<a name="l00252"></a>00252 
<a name="l00254"></a>00254 
<a name="l00257"></a>00257       <span class="keywordtype">bool</span>                              Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::ostream* pout=NULL);
<a name="l00258"></a>00258 
<a name="l00260"></a>00260 
<a name="l00266"></a>00266       std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keywordtype">bool</span> trimWhitespace = <span class="keyword">false</span>);
<a name="l00267"></a>00267 
<a name="l00269"></a>00269 
<a name="l00274"></a>00274       <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00275"></a>00275 
<a name="l00280"></a>00280       <span class="keywordtype">void</span> CloseOutFile();
<a name="l00281"></a>00281 
<a name="l00283"></a>00283 
<a name="l00287"></a>00287       <span class="keywordtype">bool</span>      Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::istream* pin=NULL);
<a name="l00288"></a>00288 
<a name="l00292"></a>00292 <span class="comment">//      OBBase* ReadObject(std::istream* pin=NULL);</span>
<a name="l00293"></a>00293 
<a name="l00295"></a>00295 
<a name="l00299"></a>00299       <span class="keywordtype">bool</span>      ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>);
<a name="l00300"></a>00300 
<a name="l00302"></a>00302 
<a name="l00309"></a>00309       <span class="keywordtype">bool</span>      ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00310"></a>00310 
<a name="l00316"></a>00316       <span class="keywordtype">bool</span> OpenInAndOutFiles(std::string infilepath, std::string outfilepath);
<a name="l00317"></a>00317 
<a name="l00322"></a>00322       <span class="keywordtype">void</span> ReportNumberConverted(<span class="keywordtype">int</span> count, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat=NULL);
<a name="l00323"></a>00323 
<a name="l00327"></a>00327       <span class="keywordtype">int</span> NumInputObjects();
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="keyword">protected</span>:
<a name="l00332"></a>00332       <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);
<a name="l00334"></a>00334       <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);
<a name="l00336"></a>00336       <span class="keyword">static</span> <span class="keywordtype">bool</span> CheckForUnintendedBatch(<span class="keyword">const</span> std::string&amp; infile, <span class="keyword">const</span> std::string&amp; outfile);
<a name="l00338"></a>00338       <span class="keywordtype">void</span> InstallStreamFilter();
<a name="l00339"></a>00339 
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     <span class="keyword">protected</span>:
<a name="l00343"></a>00343       <span class="keywordtype">bool</span>             SetStartAndEnd();
<a name="l00344"></a>00344 <span class="comment">//      static FMapType&amp; FormatsMap();///&lt;contains ID and pointer to all OBFormat classes</span>
<a name="l00345"></a>00345 <span class="comment">//      static FMapType&amp; FormatsMIMEMap();///&lt;contains MIME and pointer to all OBFormat classes</span>
<a name="l00346"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">00346</a>       <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>;
<a name="l00347"></a>00347       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> typ);
<a name="l00348"></a>00348       <span class="keyword">static</span> <span class="keywordtype">int</span>       LoadFormatFiles();
<a name="l00349"></a>00349       <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is, std::stringstream* ss=NULL);
<a name="l00350"></a>00350 
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a20354c0458b4e08dc62db4a4e8717c61">00351</a>       std::string         <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a20354c0458b4e08dc62db4a4e8717c61">InFilename</a>;
<a name="l00352"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab965c6baeb6893dd15a2fefefce795df">00352</a>       std::istream*     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab965c6baeb6893dd15a2fefefce795df">pInStream</a>;
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#aefeab37b3ca85a70cef740bb1636b353">00353</a>       std::ostream*     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aefeab37b3ca85a70cef740bb1636b353">pOutStream</a>;
<a name="l00354"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">00354</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">pDefaultFormat</a>;
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">00355</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*           <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">pInFormat</a>;
<a name="l00356"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">00356</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">pOutFormat</a>;
<a name="l00357"></a>00357 
<a name="l00358"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3d9e064f9e26ed2e52b140b7cc34a8d6">00358</a>       std::map&lt;std::string,std::string&gt; OptionsArray[3];
<a name="l00359"></a>00359 
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">00360</a>       <span class="keywordtype">int</span>                 <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">Index</a>;
<a name="l00361"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">00361</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">StartNumber</a>;
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">00362</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">EndNumber</a>;
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">00363</a>       <span class="keywordtype">int</span>                 <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">Count</a>;
<a name="l00364"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">00364</a>       <span class="keywordtype">bool</span>                      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">m_IsFirstInput</a>;
<a name="l00365"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">00365</a>       <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">m_IsLast</a>;
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">00366</a>       <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">MoreFilesToCome</a>;
<a name="l00367"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">00367</a>       <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">OneObjectOnly</a>;
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">00368</a>       <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">ReadyToInput</a>;
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae0c8e3d58dc0c0d9713ca7a7d27b8c4d">00369</a>       <span class="keywordtype">bool</span>      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae0c8e3d58dc0c0d9713ca7a7d27b8c4d" title="input stream is gzip-encoded">CheckedForGzip</a>;      
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a778a4d8f719010ac4adf6af2363af0a8">00370</a>       <span class="keywordtype">bool</span>      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a778a4d8f719010ac4adf6af2363af0a8">NeedToFreeInStream</a>;
<a name="l00371"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a96fc7fb023ad66073434a206829c23bd">00371</a>       <span class="keywordtype">bool</span>      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a96fc7fb023ad66073434a206829c23bd">NeedToFreeOutStream</a>;
<a name="l00372"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9afd81920e33981863bf186f78a222d3">00372</a>       <span class="keyword">typedef</span>   <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">FilteringInputStreambuf&lt; LineEndingExtractor &gt;</a> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9afd81920e33981863bf186f78a222d3">LErdbuf</a>;
<a name="l00373"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab3b665dec523e9a63f1dc954900211ea">00373</a>       <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">LErdbuf</a>*  <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab3b665dec523e9a63f1dc954900211ea">pLineEndBuf</a>;
<a name="l00374"></a>00374 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a501b1ec0c0e4fe9e78398e3837a759ec">00375</a>       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a501b1ec0c0e4fe9e78398e3837a759ec">FormatFilesLoaded</a>;
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">00376</a>       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*             <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">pOb1</a>;
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e">00377</a>       std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e" title="position in the input stream of the object being written">wInpos</a>; 
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89">00378</a>       std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89" title="position in the input stream of the object being read">rInpos</a>; 
<a name="l00379"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3">00379</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3" title="length in the input stream of the object being written">wInlen</a>; 
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065">00380</a>       <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065" title="length in the input stream of the object being read">rInlen</a>; 
<a name="l00381"></a>00381 
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a">00382</a>       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a" title="Way to extend OBConversion.">pAuxConv</a>;
<a name="l00383"></a>00383 
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62">00384</a>       std::vector&lt;std::string&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62" title="list of supported input format">SupportedInputFormat</a>; 
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b">00385</a>       std::vector&lt;std::string&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b" title="list of supported output format">SupportedOutputFormat</a>; 
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     };
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 } <span class="comment">//namespace OpenBabel</span>
<a name="l00390"></a>00390 <span class="preprocessor">#endif //OB_CONV_H</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395 
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:07 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
