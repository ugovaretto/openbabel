<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>painter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">painter.h</div>  </div>
</div>
<div class="contents">
<a href="painter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">painter.h - Abstract base class for rendering</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2009 by Tim Vandermeersch</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2009 by Chris Morley</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_PAINTER_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_PAINTER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef OBDEPICT</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">  #define OBDEPICT</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="keyword">namespace </span>OpenBabel
<a name="l00031"></a>00031 {
<a name="l00037"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml">00037</a>   <span class="keyword">struct </span>OBDEPICT <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>
<a name="l00038"></a>00038   {
<a name="l00039"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#aa6dd2d15fa40fbe2ec5a7b04b2b34df3">00039</a>     <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>()
<a name="l00040"></a>00040     {
<a name="l00041"></a>00041       *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.0, 0.0, 0.0);
<a name="l00042"></a>00042     }
<a name="l00043"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#aa898886bf9377accf9d9393e873576c1">00043</a>     <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(<span class="keywordtype">double</span> _red, <span class="keywordtype">double</span> _green, <span class="keywordtype">double</span> _blue, <span class="keywordtype">double</span> _alpha = 1.0) :
<a name="l00044"></a>00044         <a class="code" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a>(_red), <a class="code" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a>(_green), <a class="code" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a>(_blue), alpha(_alpha)
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046     }
<a name="l00047"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#ac5a539dac4aba41fdd4993b9779c1bcf">00047</a>     <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(<span class="keyword">const</span> std::string &amp;color)
<a name="l00048"></a>00048     {
<a name="l00049"></a>00049       <span class="keywordflow">if</span> (color[0]==<span class="charliteral">&#39;#&#39;</span>)
<a name="l00050"></a>00050       {
<a name="l00051"></a>00051         std::stringstream ss(color.substr(1));
<a name="l00052"></a>00052         <span class="keywordtype">unsigned</span> c;
<a name="l00053"></a>00053         ss &gt;&gt; std::hex &gt;&gt; c;
<a name="l00054"></a>00054         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>((c/0x10000)/256.0, ((c%0x10000)/0x100/256.0), (c%0x100)/256.0);
<a name="l00055"></a>00055       }
<a name="l00056"></a>00056       <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;black&quot;</span>)
<a name="l00057"></a>00057         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.0, 0.0, 0.0);
<a name="l00058"></a>00058       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;white&quot;</span>)
<a name="l00059"></a>00059         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(1.0, 1.0, 1.0);
<a name="l00060"></a>00060       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;red&quot;</span>)
<a name="l00061"></a>00061         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(1.0, 0.0, 0.0);
<a name="l00062"></a>00062       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;green&quot;</span>)
<a name="l00063"></a>00063         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.0, 1.0, 0.0);
<a name="l00064"></a>00064       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;blue&quot;</span>)
<a name="l00065"></a>00065         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.0, 0.0, 1.0);
<a name="l00066"></a>00066       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;yellow&quot;</span>)
<a name="l00067"></a>00067         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(1.0, 1.0, 0.0);
<a name="l00068"></a>00068       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;gray&quot;</span>)
<a name="l00069"></a>00069         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.3, 0.3, 0.3);
<a name="l00070"></a>00070       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;cyan&quot;</span>)
<a name="l00071"></a>00071         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(1.0, 0.0, 1.0);
<a name="l00072"></a>00072       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;purple&quot;</span>)
<a name="l00073"></a>00073         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.5, 0.0, 0.5);
<a name="l00074"></a>00074       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;teal&quot;</span>)
<a name="l00075"></a>00075         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.0, 0.5, 0.5);
<a name="l00076"></a>00076       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color == <span class="stringliteral">&quot;olive&quot;</span>)
<a name="l00077"></a>00077         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.5, 0.5, 0.0);
<a name="l00078"></a>00078       <span class="keywordflow">else</span>
<a name="l00079"></a>00079         *<span class="keyword">this</span> = <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>(0.5, 0.5, 0.5);
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#a596eec9e9251afb9bea51b73c1065cc7">00082</a>     <a class="code" href="structOpenBabel_1_1OBColor.shtml#a596eec9e9251afb9bea51b73c1065cc7">OBColor</a>(std::vector&lt;double&gt; vec) : <a class="code" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a>(vec[0]), <a class="code" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a>(vec[1]), <a class="code" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a>(vec[2]), alpha(1.0){}
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">00084</a>     <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a>&amp; other)
<a name="l00085"></a>00085     {
<a name="l00086"></a>00086       <span class="keywordflow">return</span> <a class="code" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a>!=other.<a class="code" href="structOpenBabel_1_1OBColor.shtml#a8e15743f85d7d7df6996ddfcf089df8f">red</a> || <a class="code" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a>!=other.<a class="code" href="structOpenBabel_1_1OBColor.shtml#a577af4a9106aa5ba6b0960ff89dd4d1b">green</a> || <a class="code" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a>!=other.<a class="code" href="structOpenBabel_1_1OBColor.shtml#ada69d079616ef218f4fedb0e38454e34">blue</a>;
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088 
<a name="l00089"></a><a class="code" href="structOpenBabel_1_1OBColor.shtml#a8e15743f85d7d7df6996ddfcf089df8f">00089</a>     <span class="keywordtype">double</span> <a class="code" href="structOpenBabel_1_1OBColor.shtml#a8e15743f85d7d7df6996ddfcf089df8f">red</a>, <a class="code" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a>, <a class="code" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a>, alpha;
<a name="l00090"></a>00090   };
<a name="l00091"></a>00091 
<a name="l00097"></a><a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml">00097</a>   <span class="keyword">struct </span>OBDEPICT <a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml" title="Font metrics class used by OBDepict.">OBFontMetrics</a>
<a name="l00098"></a>00098   {
<a name="l00099"></a><a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a78dc3704e7e01da52c9a93a70c5bc45d">00099</a>     <span class="keywordtype">int</span>    <a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a78dc3704e7e01da52c9a93a70c5bc45d">fontSize</a>;
<a name="l00100"></a><a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a24b75c7de2a05d7759e991463a0c7723">00100</a>     <span class="keywordtype">double</span> ascent, <a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a24b75c7de2a05d7759e991463a0c7723">descent</a>;
<a name="l00101"></a><a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a9df23e056f5d1a0388cd8190431c0e03">00101</a>     <span class="keywordtype">double</span> <a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml#a9df23e056f5d1a0388cd8190431c0e03">width</a>, height;
<a name="l00102"></a>00102   };
<a name="l00103"></a>00103 
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBPainter.shtml">00109</a>   <span class="keyword">class </span>OBDEPICT <a class="code" href="classOpenBabel_1_1OBPainter.shtml" title="Abstract painter base class used by OBDepict.">OBPainter</a>
<a name="l00110"></a>00110   {
<a name="l00111"></a>00111     <span class="keyword">public</span>:
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBPainter.shtml#a39de5fab752e8e6d2af9e86041ab59e9">00115</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBPainter.shtml#a39de5fab752e8e6d2af9e86041ab59e9">~OBPainter</a>() {}
<a name="l00116"></a>00116 
<a name="l00123"></a>00123       <span class="keyword">virtual</span> <span class="keywordtype">void</span> NewCanvas(<span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height) = 0;
<a name="l00129"></a>00129       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsGood() <span class="keyword">const</span> = 0;
<a name="l00133"></a>00133       <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFontFamily(<span class="keyword">const</span> std::string &amp;fontFamily) = 0;
<a name="l00137"></a>00137       <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFontSize(<span class="keywordtype">int</span> pointSize) = 0;
<a name="l00141"></a>00141       <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFillColor(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a> &amp;color) = 0;
<a name="l00145"></a>00145       <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetPenColor(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBColor.shtml" title="Color class used by OBDepict.">OBColor</a> &amp;color) = 0;
<a name="l00149"></a>00149       <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetPenWidth(<span class="keywordtype">double</span> width) = 0;
<a name="l00154"></a>00154       <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawLine(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> y2) = 0;
<a name="l00155"></a>00155       <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawCircle(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> r) = 0;
<a name="l00162"></a>00162       <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawPolygon(<span class="keyword">const</span> std::vector&lt;std::pair&lt;double,double&gt; &gt; &amp;points) = 0;
<a name="l00163"></a>00163       <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawText(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keyword">const</span> std::string &amp;text) = 0;
<a name="l00164"></a>00164       <span class="keyword">virtual</span> <a class="code" href="structOpenBabel_1_1OBFontMetrics.shtml" title="Font metrics class used by OBDepict.">OBFontMetrics</a> GetFontMetrics(<span class="keyword">const</span> std::string &amp;text) = 0;
<a name="l00165"></a>00165   };
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="preprocessor">#endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:07 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
