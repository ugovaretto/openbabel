<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>query.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">query.h</div>  </div>
</div>
<div class="contents">
<a href="query_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  query.h - OBQuery, OBQueryAtom &amp; OBQueryBond classes.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">  Copyright (C) 2010 by Tim Vandermeersch</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">  This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">  For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">  it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">  the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00012"></a>00012 <span class="comment">  (at your option) any later version.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">  This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">  GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"></span>
<a name="l00019"></a>00019 <span class="comment">  You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment">  along with this program; if not, write to the Free Software</span>
<a name="l00021"></a>00021 <span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment">  02110-1301, USA.</span>
<a name="l00023"></a>00023 <span class="comment"> **********************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef OB_QUERY_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define OB_QUERY_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="tokenst_8h.shtml" title="Tokenize strings, open data files.">openbabel/tokenst.h</a>&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>OpenBabel {
<a name="l00031"></a>00031 
<a name="l00032"></a>00032   <span class="keyword">class </span>OBQueryBond;
<a name="l00033"></a>00033 
<a name="l00036"></a>00036 
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">00052</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a>
<a name="l00053"></a>00053   {
<a name="l00054"></a>00054     <span class="keyword">public</span>:
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43f34dd89fd2288fbb30f4eb7ca23382">00055</a>       <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>;
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a2d242d8bcab90501c6c9f49787d9a4b7">00056</a>       <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml" title="Bond in an OBQuery.">OBQueryBond</a>;
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a4ff7885e0bcfde8a0425e1b3cb268315">00063</a>       <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a>(<span class="keywordtype">int</span> atomicNum = 6, <span class="keywordtype">bool</span> isInRing = <span class="keyword">false</span>, <span class="keywordtype">bool</span> isAromatic = <span class="keyword">false</span>) :
<a name="l00064"></a>00064         m_atomicNum(atomicNum), m_isInRing(isInRing), m_isAromatic(isAromatic) {}
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a746e110133c6f0d223712f87e296e393">00066</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a746e110133c6f0d223712f87e296e393">~OBQueryAtom</a>() {}
<a name="l00067"></a>00067 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ae6b8fa1646a64b9fbe745af4719920ec">00072</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIndex()<span class="keyword"> const</span>
<a name="l00073"></a>00073 <span class="keyword">      </span>{
<a name="l00074"></a>00074         <span class="keywordflow">return</span> m_index;
<a name="l00075"></a>00075       }
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a422202b23ab4f29733dd013d75441b59">00080</a>       <span class="keyword">const</span> std::vector&lt;OBQueryBond*&gt;&amp; GetBonds()<span class="keyword"> const</span>
<a name="l00081"></a>00081 <span class="keyword">      </span>{
<a name="l00082"></a>00082         <span class="keywordflow">return</span> m_bonds;
<a name="l00083"></a>00083       }
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ad3cd7b20213755fa081eb31c694a6133">00088</a>       <span class="keyword">const</span> std::vector&lt;OBQueryAtom*&gt;&amp; GetNbrs()<span class="keyword"> const</span>
<a name="l00089"></a>00089 <span class="keyword">      </span>{
<a name="l00090"></a>00090         <span class="keywordflow">return</span> m_nbrs;
<a name="l00091"></a>00091       }
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a4cc21e93fd84c4713b24d965cb90a28c">00099</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Matches(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom)<span class="keyword"> const</span>
<a name="l00100"></a>00100 <span class="keyword">      </span>{
<a name="l00101"></a>00101         <span class="keywordflow">if</span> (atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#ade227de93fbe080fc1c2854e530df81a">GetAtomicNum</a>() != m_atomicNum)
<a name="l00102"></a>00102           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00103"></a>00103         <span class="keywordflow">if</span> (atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a4ef863ca7ed29e266960966a66dc8fb8">IsAromatic</a>() != m_isAromatic)
<a name="l00104"></a>00104           <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00105"></a>00105         <span class="keywordflow">if</span> (m_isInRing)
<a name="l00106"></a>00106           <span class="keywordflow">if</span> (!atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa17842bd610dc8b2ede2fe324738fe5b">IsInRing</a>())
<a name="l00107"></a>00107             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00108"></a>00108         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00109"></a>00109       }
<a name="l00110"></a>00110     <span class="keyword">protected</span>:
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">00111</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a>;
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aabf8c5be0361cbc654926947ff751b6b">00112</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aabf8c5be0361cbc654926947ff751b6b">m_atomicNum</a>;
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a13ba39cc1c750de23ff95d2821c3eb83">00113</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a13ba39cc1c750de23ff95d2821c3eb83">m_isInRing</a>, m_isAromatic;
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aedc99f93df4bc475dec73bc04192eedc">00114</a>       std::vector&lt;OBQueryBond*&gt; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aedc99f93df4bc475dec73bc04192eedc">m_bonds</a>;
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ad1463519f9e71c25f35806e5b7b99f42">00115</a>       std::vector&lt;OBQueryAtom*&gt; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ad1463519f9e71c25f35806e5b7b99f42">m_nbrs</a>;
<a name="l00116"></a>00116   };
<a name="l00117"></a>00117 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml">00134</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml" title="Bond in an OBQuery.">OBQueryBond</a>
<a name="l00135"></a>00135   {
<a name="l00136"></a>00136     <span class="keyword">public</span>:
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43f34dd89fd2288fbb30f4eb7ca23382">00137</a>       <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>;
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a4ab1d8659dc4c0cb13e71c7893fa771e">00141</a>       <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml" title="Bond in an OBQuery.">OBQueryBond</a>(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *begin, <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *end, <span class="keywordtype">int</span> order = 1, <span class="keywordtype">bool</span> aromatic = <span class="keyword">false</span>) :
<a name="l00142"></a>00142           m_begin(begin), m_end(end), m_order(order), m_aromatic(aromatic)
<a name="l00143"></a>00143       {
<a name="l00144"></a>00144         m_begin-&gt;m_bonds.push_back(<span class="keyword">this</span>);
<a name="l00145"></a>00145         m_end-&gt;m_bonds.push_back(<span class="keyword">this</span>);
<a name="l00146"></a>00146         m_begin-&gt;m_nbrs.push_back(m_end);
<a name="l00147"></a>00147         m_end-&gt;m_nbrs.push_back(m_begin);
<a name="l00148"></a>00148       }
<a name="l00149"></a>00149 
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a5a2d354e5be52d235fb73bdd32922b42">00150</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a5a2d354e5be52d235fb73bdd32922b42">~OBQueryBond</a>() {}
<a name="l00151"></a>00151 
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ae6b8fa1646a64b9fbe745af4719920ec">00155</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIndex()<span class="keyword"> const</span>
<a name="l00156"></a>00156 <span class="keyword">      </span>{
<a name="l00157"></a>00157         <span class="keywordflow">return</span> m_index;
<a name="l00158"></a>00158       }
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac39e1b7ae2486afcc01623629b0d87c4">00162</a>       <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a>* <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac39e1b7ae2486afcc01623629b0d87c4">GetBeginAtom</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_begin; }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a4b5d4f2eeb7779e739bddfb0534dc52c">00166</a>       <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a>* <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a4b5d4f2eeb7779e739bddfb0534dc52c">GetEndAtom</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_end; }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#aeae2e5cc4cded6921003fb5f3d7962d8">00175</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Matches(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond)<span class="keyword"> const</span>
<a name="l00176"></a>00176 <span class="keyword">      </span>{
<a name="l00177"></a>00177         <span class="keywordflow">if</span> (m_aromatic)
<a name="l00178"></a>00178           <span class="keywordflow">return</span> bond-&gt;<a class="code" href="classOpenBabel_1_1OBBond.shtml#a4ef863ca7ed29e266960966a66dc8fb8">IsAromatic</a>();
<a name="l00179"></a>00179         <span class="keywordflow">return</span> bond-&gt;<a class="code" href="classOpenBabel_1_1OBBond.shtml#a753514f0d4afe52f08f3ace5cfc727bb">GetBondOrder</a>() == m_order;
<a name="l00180"></a>00180       }
<a name="l00181"></a>00181     <span class="keyword">protected</span>:
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">00182</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a>;
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a7ef35338625112ce0bcafa992abadb4c">00183</a>       <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *m_begin, *<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a7ef35338625112ce0bcafa992abadb4c">m_end</a>;
<a name="l00184"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a0795f26a2aa019683b9dfaeebbe6839b">00184</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a0795f26a2aa019683b9dfaeebbe6839b">m_order</a>;
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac997bb8d3752aace187f46102f32c353">00185</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac997bb8d3752aace187f46102f32c353">m_aromatic</a>;
<a name="l00186"></a>00186   };
<a name="l00187"></a>00187 
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml">00195</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>
<a name="l00196"></a>00196   {
<a name="l00197"></a>00197     <span class="keyword">public</span>:
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a389be5417270db13420cb84e47e0ee18">00198</a>       ~<a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>()
<a name="l00199"></a>00199       {
<a name="l00200"></a>00200         std::for_each(m_atoms.begin(),m_atoms.end(), <a class="code" href="structOpenBabel_1_1DeleteObject.shtml" title="Functor for deleting containers of pointers. Scott Meyers, Effective STL, Item 7.">DeleteObject</a>());
<a name="l00201"></a>00201         std::for_each(m_bonds.begin(),m_bonds.end(), <a class="code" href="structOpenBabel_1_1DeleteObject.shtml" title="Functor for deleting containers of pointers. Scott Meyers, Effective STL, Item 7.">DeleteObject</a>());
<a name="l00202"></a>00202       }
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a0c317a10161689c407f29a6fcacdb852">00206</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword"> const</span>
<a name="l00207"></a>00207 <span class="keyword">      </span>{
<a name="l00208"></a>00208         <span class="keywordflow">return</span> m_atoms.size();
<a name="l00209"></a>00209       }
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a115132ab8bd21607d00d61bc1ba5cc16">00213</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword"> const</span>
<a name="l00214"></a>00214 <span class="keyword">      </span>{
<a name="l00215"></a>00215         <span class="keywordflow">return</span> m_bonds.size();
<a name="l00216"></a>00216       }
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a5d698ccdc080cdf6237ce1d88fb6f1b2">00220</a>       <span class="keyword">const</span> std::vector&lt;OBQueryAtom*&gt;&amp; GetAtoms()<span class="keyword"> const</span>
<a name="l00221"></a>00221 <span class="keyword">      </span>{
<a name="l00222"></a>00222         <span class="keywordflow">return</span> m_atoms;
<a name="l00223"></a>00223       }
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a422202b23ab4f29733dd013d75441b59">00227</a>       <span class="keyword">const</span> std::vector&lt;OBQueryBond*&gt;&amp; GetBonds()<span class="keyword"> const</span>
<a name="l00228"></a>00228 <span class="keyword">      </span>{
<a name="l00229"></a>00229         <span class="keywordflow">return</span> m_bonds;
<a name="l00230"></a>00230       }
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a120a2b47d1f72cbf4e445ac63d8abfdf">00235</a>       <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml" title="Bond in an OBQuery.">OBQueryBond</a>* GetBond(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *begin, <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *end)<span class="keyword"> const</span>
<a name="l00236"></a>00236 <span class="keyword">      </span>{
<a name="l00237"></a>00237         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a422202b23ab4f29733dd013d75441b59">GetBonds</a>().size(); ++i)
<a name="l00238"></a>00238           <span class="keywordflow">if</span> (begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ad3cd7b20213755fa081eb31c694a6133">GetNbrs</a>()[i] == end)
<a name="l00239"></a>00239             <span class="keywordflow">return</span> begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a422202b23ab4f29733dd013d75441b59">GetBonds</a>()[i];
<a name="l00240"></a>00240         <span class="keywordflow">return</span> 0;
<a name="l00241"></a>00241       }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#a3b2e350f82ce51a8ba52af162907529e">00245</a>       <span class="keywordtype">void</span> AddAtom(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml" title="Atom in an OBQuery.">OBQueryAtom</a> *atom)
<a name="l00246"></a>00246       {
<a name="l00247"></a>00247         atom-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a> = m_atoms.size();
<a name="l00248"></a>00248         m_atoms.push_back(atom);
<a name="l00249"></a>00249       }
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#ac617b0afd430d9674c41faa179ee375c">00253</a>       <span class="keywordtype">void</span> AddBond(<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml" title="Bond in an OBQuery.">OBQueryBond</a> *bond)
<a name="l00254"></a>00254       {
<a name="l00255"></a>00255         bond-&gt;<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a> = m_bonds.size();
<a name="l00256"></a>00256         m_bonds.push_back(bond);
<a name="l00257"></a>00257       }
<a name="l00258"></a>00258     <span class="keyword">protected</span>:
<a name="l00259"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#ad60d0800edfffd66821572b5ffcb5448">00259</a>       std::vector&lt;OBQueryAtom*&gt; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#ad60d0800edfffd66821572b5ffcb5448">m_atoms</a>;
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBQuery.shtml#aedc99f93df4bc475dec73bc04192eedc">00260</a>       std::vector&lt;OBQueryBond*&gt; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#aedc99f93df4bc475dec73bc04192eedc">m_bonds</a>;
<a name="l00261"></a>00261   };
<a name="l00262"></a>00262 
<a name="l00270"></a>00270   OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>* <a class="code" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">CompileMoleculeQuery</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;mask = <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>());
<a name="l00271"></a>00271 
<a name="l00279"></a>00279   OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml" title="A substructure query.">OBQuery</a>* <a class="code" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">CompileSmilesQuery</a>(<span class="keyword">const</span> std::string &amp;smiles, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;mask = <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>());
<a name="l00280"></a>00280 
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="preprocessor">#endif</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:08 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
