<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>ring.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">ring.h</div>  </div>
</div>
<div class="contents">
<a href="ring_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">ring.h - Deal with rings, find smallest set of smallest rings (SSSR).</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_RING_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_RING_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// TODO: Make this work as a free-standing header</span>
<a name="l00027"></a>00027 <span class="comment">// Currently only used in ring.cpp which imports mol.h beforehand</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml" title="Fast and efficient bitstring class.">openbabel/bitvec.h</a>&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml" title="Open Babel atom and aromaticity typer.">openbabel/typer.h</a>&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBond;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038   <span class="comment">// class introduction in ring.cpp</span>
<a name="l00039"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml">00039</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>
<a name="l00040"></a>00040   {
<a name="l00041"></a>00041     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent; 
<a name="l00042"></a>00042   <span class="keyword">public</span>:
<a name="l00043"></a>00043     <span class="comment">//public data members</span>
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ab121c8e013115dd3efb26601ad1975d0">00044</a>     <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml#ab121c8e013115dd3efb26601ad1975d0" title="a unique id to ensure a stable sort in SSSR determination">ring_id</a>;            
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#a86d1b14f3c439c5be01e0f6c9dc60a1d">00045</a>     std::vector&lt;int&gt; <a class="code" href="classOpenBabel_1_1OBRing.shtml#a86d1b14f3c439c5be01e0f6c9dc60a1d" title="the path of this ring (i.e., the atom indexes)">_path</a>; 
<a name="l00046"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ababc3e7a7e660eba9b2dfa3b2bc28782">00046</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> <a class="code" href="classOpenBabel_1_1OBRing.shtml#ababc3e7a7e660eba9b2dfa3b2bc28782" title="the path of this ring as a redundant bit vector">_pathset</a>;      
<a name="l00047"></a>00047 
<a name="l00049"></a>00049 
<a name="l00050"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#aca37bf71481749f6555e916555d9e7a2">00050</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml#aca37bf71481749f6555e916555d9e7a2">OBRing</a>()    {}
<a name="l00052"></a>00052     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>(std::vector&lt;int&gt;&amp; path, <span class="keywordtype">int</span> size);
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#a2abeced3e6e318f88abe9249833b6d25">00053</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml#a2abeced3e6e318f88abe9249833b6d25">OBRing</a>(std::vector&lt;int&gt;&amp; path, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> <span class="keyword">set</span>) : _path(path), _pathset(set) {}
<a name="l00054"></a>00054     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> &amp;src);
<a name="l00055"></a>00055     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> &amp;src);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">//member functions</span>
<a name="l00059"></a>00059 
<a name="l00061"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ab3bace7b51e6e7d78048999bc2189e27">00061</a>     <span class="keywordtype">size_t</span>    <a class="code" href="classOpenBabel_1_1OBRing.shtml#ab3bace7b51e6e7d78048999bc2189e27">Size</a>()<span class="keyword">     const  </span>{    <span class="keywordflow">return</span>(_path.size());  }
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ab6d388ff8c4e4d4d4c37db31a36c01f4">00064</a>     <span class="keywordtype">size_t</span>    <a class="code" href="classOpenBabel_1_1OBRing.shtml#ab6d388ff8c4e4d4d4c37db31a36c01f4">PathSize</a>()<span class="keyword"> const  </span>{    <span class="keywordflow">return</span>(_path.size());  }
<a name="l00065"></a>00065 
<a name="l00069"></a>00069     <span class="keywordtype">bool</span>   IsAromatic();
<a name="l00070"></a>00070 
<a name="l00072"></a>00072     <span class="keywordtype">void</span> SetType(<span class="keywordtype">char</span> *type);
<a name="l00074"></a>00074     <span class="keywordtype">void</span> SetType(std::string &amp;type);
<a name="l00076"></a>00076     <span class="keywordtype">char</span> *GetType();
<a name="l00080"></a>00080     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetRootAtom();
<a name="l00081"></a>00081 
<a name="l00083"></a>00083     <span class="keywordtype">bool</span>   IsMember(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a);
<a name="l00086"></a>00086     <span class="keywordtype">bool</span>         IsMember(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *b);
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#a87c9cc8c92936bd191dca74f78fb84cb">00088</a>     <span class="keywordtype">bool</span>   IsInRing(<span class="keywordtype">int</span> i)
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090       <span class="keywordflow">return</span>(_pathset.BitIsOn(i));
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#a82ba3a4d5db75e9f11d3ea8dd5ef32b8">00094</a>     <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBRing.shtml#a82ba3a4d5db75e9f11d3ea8dd5ef32b8" title="Set the parent of this ring to m.">SetParent</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *m)  {    _parent = m;    }
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">00096</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *<a class="code" href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a>()          {    <span class="keywordflow">return</span>(_parent);}
<a name="l00097"></a>00097 
<a name="l00104"></a>00104     <span class="keywordtype">bool</span> findCenterAndNormal(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp; center, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;norm1, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;norm2);
<a name="l00105"></a>00105   <span class="keyword">private</span>:
<a name="l00106"></a>00106     <span class="keywordtype">char</span> _type[30];   
<a name="l00107"></a>00107   };
<a name="l00108"></a>00108 
<a name="l00111"></a>00111   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a>(<span class="keyword">const</span> OBRing *,<span class="keyword">const</span> OBRing *);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml">00117</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml" title="Internal class to facilitate OBMol::FindSSSR()">OBRingSearch</a>
<a name="l00118"></a>00118   {
<a name="l00119"></a>00119     std::vector&lt;OBBond*&gt; _bonds; 
<a name="l00120"></a>00120     std::vector&lt;OBRing*&gt; _rlist; 
<a name="l00121"></a>00121   <span class="keyword">public</span>:
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#af1211b4680e59ac34a16593ddcdb2761">00122</a>     <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#af1211b4680e59ac34a16593ddcdb2761">OBRingSearch</a>()    {}
<a name="l00123"></a>00123     ~<a class="code" href="classOpenBabel_1_1OBRingSearch.shtml" title="Internal class to facilitate OBMol::FindSSSR()">OBRingSearch</a>();
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">00126</a>     <span class="keywordtype">void</span>    SortRings()
<a name="l00127"></a>00127     {
<a name="l00128"></a>00128       std::vector&lt;OBRing*&gt;::iterator j;
<a name="l00129"></a>00129       <span class="keywordtype">int</span> ring_id; <span class="comment">// for each ring, assign a unique id to ensure a stable sort</span>
<a name="l00130"></a>00130       
<a name="l00131"></a>00131       <span class="keywordflow">for</span> (j = _rlist.begin(), ring_id = 0; j != _rlist.end(); ++j, ++ring_id)
<a name="l00132"></a>00132         (*j)-&gt;ring_id = ring_id;
<a name="l00133"></a>00133       std::sort(_rlist.begin(),_rlist.end(),<a class="code" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a>);
<a name="l00134"></a>00134     }
<a name="l00136"></a>00136     <span class="keywordtype">void</span>    RemoveRedundant(<span class="keywordtype">int</span>);
<a name="l00138"></a>00138     <span class="keywordtype">void</span>    AddRingFromClosure(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordtype">bool</span>    SaveUniqueRing(std::deque&lt;int&gt;&amp;,std::deque&lt;int&gt;&amp;);
<a name="l00141"></a>00141 
<a name="l00143"></a>00143     <span class="keywordtype">void</span>    WriteRings();
<a name="l00144"></a>00144 
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#aa1a05257821a8156625beabb7dd58e0b">00148</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00149"></a>00149       {
<a name="l00150"></a>00150         <span class="keywordflow">return</span>(_rlist.begin());
<a name="l00151"></a>00151       }
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#a07ad405727c652a6a280d821b9d1ac47">00153</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00154"></a>00154       {
<a name="l00155"></a>00155         <span class="keywordflow">return</span>(_rlist.end());
<a name="l00156"></a>00156       }
<a name="l00158"></a>00158   };
<a name="l00159"></a>00159 
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml">00164</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRTree.shtml" title="Internal class for OBRing search algorithms to create a search tree of OBAtom objects.">OBRTree</a>
<a name="l00165"></a>00165   {
<a name="l00166"></a>00166     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>  *_atom; 
<a name="l00167"></a>00167     <a class="code" href="classOpenBabel_1_1OBRTree.shtml" title="Internal class for OBRing search algorithms to create a search tree of OBAtom objects.">OBRTree</a> *_prv;  
<a name="l00168"></a>00168   <span class="keyword">public</span>:
<a name="l00170"></a>00170     <a class="code" href="classOpenBabel_1_1OBRTree.shtml" title="Internal class for OBRing search algorithms to create a search tree of OBAtom objects.">OBRTree</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBRTree.shtml" title="Internal class for OBRing search algorithms to create a search tree of OBAtom objects.">OBRTree</a>*);
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml#a552ea16c4bb845b80b7cd56c2bd5c87d">00171</a>     <a class="code" href="classOpenBabel_1_1OBRTree.shtml#a552ea16c4bb845b80b7cd56c2bd5c87d">~OBRTree</a>()    {}
<a name="l00172"></a>00172 
<a name="l00174"></a>00174     <span class="keywordtype">int</span>  GetAtomIdx();
<a name="l00176"></a>00176     <span class="keywordtype">void</span> PathToRoot(std::vector&lt;OBAtom*&gt;&amp;);
<a name="l00177"></a>00177   };
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="preprocessor">#endif // OB_RING_H</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:08 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
