<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>spacegroup.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">spacegroup.h</div>  </div>
</div>
<div class="contents">
<a href="spacegroup_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">spacegroup.h - Handle Crystallographic Space Groups.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Jean Br√©fort</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or</span>
<a name="l00010"></a>00010 <span class="comment">modify it under the terms of the GNU General Public License as</span>
<a name="l00011"></a>00011 <span class="comment">published by the Free Software Foundation; either version 2 of the</span>
<a name="l00012"></a>00012 <span class="comment">License, or (at your option) any later version.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_SPACE_GROUP_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_SPACE_GROUP_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="transform3d_8h.shtml" title="Handle 3D transformations in space groups.">openbabel/math/transform3d.h</a>&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">namespace </span>OpenBabel
<a name="l00028"></a>00028 {
<a name="l00029"></a>00029 
<a name="l00035"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml">00035</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>
<a name="l00036"></a>00036     {
<a name="l00037"></a>00037       <span class="keyword">public</span>:
<a name="l00038"></a>00038         <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>();
<a name="l00039"></a>00039         ~<a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>();
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#aac8bbb3e3c283722a681c012daf6d31d">00041</a>         <span class="keywordtype">void</span> SetHMName(<span class="keyword">const</span> <span class="keywordtype">char</span> *name)
<a name="l00042"></a>00042           { m_HM = name; }
<a name="l00043"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a187cb02cf6cfc7ff146f12940c1ba4a1">00043</a>         <span class="keywordtype">void</span> SetHMName(<span class="keyword">const</span> std::string &amp;name)
<a name="l00044"></a>00044           { m_HM = name; }
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#ae7455f5d6c96b0ae2e36fc11965c34bc">00045</a>         <span class="keywordtype">void</span> SetHallName(<span class="keyword">const</span> <span class="keywordtype">char</span> *name)
<a name="l00046"></a>00046           { m_Hall = name; }
<a name="l00047"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a50e5af834059842019b2383154556856">00047</a>         <span class="keywordtype">void</span> SetHallName(<span class="keyword">const</span> std::string &amp;name)
<a name="l00048"></a>00048           { m_Hall = name; }
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#ac5c8d608f8b5fa8c20b79b2f3780d2ba">00049</a>         <span class="keywordtype">void</span> SetId(<span class="keywordtype">unsigned</span> n)
<a name="l00050"></a>00050           { m_id = n; }
<a name="l00051"></a>00051         <span class="keywordtype">void</span> AddTransform(<span class="keyword">const</span> std::string &amp;s);
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a3e25be88ad9a6307553165a6415bffff">00053</a>         <span class="keyword">const</span> std::string &amp; GetHMName()<span class="keyword"> const</span>
<a name="l00054"></a>00054 <span class="keyword">          </span>{ <span class="keywordflow">return</span> m_HM;}
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#a877504662caba7eeaa68f09cd09cb26d">00055</a>         <span class="keyword">const</span> std::string &amp; GetHallName()<span class="keyword">const</span>
<a name="l00056"></a>00056 <span class="keyword">          </span>{ <span class="keywordflow">return</span> m_Hall;}
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#add8ee090e8f38e79e0070c0e9628631e">00057</a>         <span class="keywordtype">unsigned</span> GetId()<span class="keyword"> const</span>
<a name="l00058"></a>00058 <span class="keyword">          </span>{ <span class="keywordflow">return</span> m_id; }
<a name="l00059"></a>00059         std::list&lt;vector3&gt; Transform(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v) <span class="keyword">const</span>;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <a class="code" href="classOpenBabel_1_1transform3d.shtml" title="Handle 3D transformations, such as space group definitions.">transform3d</a> <span class="keyword">const</span> * BeginTransform(<a class="code" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a> &amp;i) <span class="keyword">const</span>;
<a name="l00062"></a>00062         <a class="code" href="classOpenBabel_1_1transform3d.shtml" title="Handle 3D transformations, such as space group definitions.">transform3d</a> <span class="keyword">const</span> * NextTransform(<a class="code" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a> &amp;i) <span class="keyword">const</span>;
<a name="l00063"></a>00063 
<a name="l00064"></a>00064         <span class="comment">// static methods</span>
<a name="l00065"></a>00065         <span class="comment">/* The name might be either a HM or Hall name */</span>
<a name="l00066"></a>00066         <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> * GetSpaceGroup (<span class="keywordtype">char</span> <span class="keyword">const</span> *name);
<a name="l00067"></a>00067         <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> * GetSpaceGroup (<span class="keyword">const</span> std::string &amp;name);
<a name="l00068"></a>00068         <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> * GetSpaceGroup (<span class="keywordtype">unsigned</span> <span class="keywordtype">id</span>);
<a name="l00069"></a>00069         <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> * Find (<a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* group);
<a name="l00070"></a>00070         <span class="comment">/* Use it if the space group is unknown (might happen if no database has</span>
<a name="l00071"></a>00071 <span class="comment">         been loaded or if the HM name is not usual. */</span>
<a name="l00072"></a>00072         <span class="comment">// Unfortunately, this seems to confuse the SWIG parser</span>
<a name="l00073"></a>00073         <span class="comment">// Fortunately, it&#39;s not needed for the scripting bindings,</span>
<a name="l00074"></a>00074         <span class="comment">// since this is internal code</span>
<a name="l00075"></a>00075 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>        <span class="keywordtype">void</span> RegisterSpaceGroup (<span class="keywordtype">int</span> nb = 0, ...);
<a name="l00077"></a>00077 <span class="preprocessor">#endif</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079         <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> &amp;) <span class="keyword">const</span>;
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#ac8fd6a9c5f8df50ac3a9665b8b075f1e">00080</a>         <span class="keywordtype">int</span> operator!=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a> &amp;other)<span class="keyword"> const</span>
<a name="l00081"></a>00081 <span class="keyword">          </span>{
<a name="l00082"></a>00082             <span class="keywordflow">return</span> !((*this) == other);
<a name="l00083"></a>00083           }
<a name="l00084"></a>00084         <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086       <span class="keyword">private</span>:
<a name="l00090"></a>00090         std::string m_HM;
<a name="l00091"></a>00091         std::string m_Hall;
<a name="l00092"></a>00092         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_id;
<a name="l00093"></a>00093         std::list&lt;transform3d*&gt; m_transforms;
<a name="l00094"></a>00094     };
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="preprocessor">#endif // OB_SPACE_GROUP_H</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:08 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
