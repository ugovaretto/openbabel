<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBStereo Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li class="navelem"><a class="el" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a>  </div>
  <div class="headertitle">
<div class="title">OBStereo Class Reference<div class="ingroups"><a class="el" href="group__stereo.shtml">Stereochemistry</a></div></div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBStereo" -->
<p><code>#include &lt;<a class="el" href="stereo_8h_source.shtml">openbabel/stereo/stereo.h</a>&gt;</code></p>

<p><a href="classOpenBabel_1_1OBStereo-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">Type</a> { <br/>
&#160;&#160;<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396">CisTrans</a> =  (1&lt;&lt;0), 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932">ExtendedCisTrans</a> =  (1&lt;&lt;1), 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3">SquarePlanar</a> =  (1&lt;&lt;2), 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be">Tetrahedral</a> =  (1&lt;&lt;3), 
<br/>
&#160;&#160;<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3">ExtendedTetrahedral</a> =  (1&lt;&lt;4), 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397">TrigonalBipyramidal</a> =  (1&lt;&lt;5), 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af">Octahedral</a> =  (1&lt;&lt;6)
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">BondDirection</a> { <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1">NotStereo</a> =  0, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1">UpBond</a> =  1, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea">DownBond</a> =  6, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262">UnknownDir</a> =  4
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">Shape</a> { <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">ShapeU</a> =  1, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d">ShapeZ</a> =  2, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31">Shape4</a> =  3
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">View</a> { <a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e">ViewFrom</a> =  1, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155">ViewTowards</a> =  2
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">Winding</a> { <a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7">Clockwise</a> =  1, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609">AntiClockwise</a> =  2, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31a7c3b131410d13135cf3b0f159a6cb899">UnknownWinding</a> =  3
 }</td></tr>
<tr><td colspan="2"><div class="groupHeader">Ref &amp; Refs types</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db">NoRef</a> =  UINT_MAX, 
<a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015">ImplicitRef</a> =  UINT_MAX - 1
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef Refs::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">RefIter</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef Refs::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">ConstRefIter</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Refs utility functions</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">MakeRefs</a> (<a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a> ref1, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a> ref2, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a> ref3, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a> ref4=NoRef)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#abb14ec41d65b0dc4d49707a713da483f">ContainsSameRefs</a> (const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs1, const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs2)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a7dd420f7528abb409341a8a5874143db">ContainsRef</a> (const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs, unsigned long ref)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Low-level functions used by implementation.</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a0ba3b9c408bae435888d6fdc69be280a">NumInversions</a> (const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a91f98766fb3dc116169a4871f8b153cd">Permutate</a> (<a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs, int i, int j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#a208dedfeef4f58d65d01feb2f8a86d31">Permutated</a> (const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;refs, int i, int j)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Placeholder for enums &amp; Ref/Refs related functions. </p>
<p>The <a class="el" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp; Ref/Refs related functions.">OBStereo</a> struct contains a number of enums with predefined values. These are <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a>, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a>, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a>, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">OBStereo::View</a>, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">OBStereo::Winding</a>. There are enums which only apply to certain types of stereochemistry but having them in 1 place makes it easier to remember.</p>
<p>The <a class="el" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp; Ref/Refs related functions.">OBStereo</a> struct also contains typedefs and functions which are crucial to fully understand how to use the <a class="el" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a> derived classes (i.e. <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml" title="Class for handling and storing tetrahedral atom stereochemistry.">OBTetrahedralStereo</a>, <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml" title="Class for handling and storing cis/trans stereochemistry.">OBCisTransStereo</a>, ...). Ref variables and Refs lists are a way to uniquely reference atoms in the molecule. In most cases these Ref variables are the same as the unique atom ids (<a class="el" href="classOpenBabel_1_1OBAtom.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">OBAtom::GetId</a>). However, 2 special cases are provided:</p>
<ul>
<li><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db" title="No Ref set (invalid Ref)">OBStereo::NoRef</a>: An initial value for Ref variables. The constructors of the various Config structs set all refs to NoRef (Refs lists will remain empty). This value is considered invalid when comparing stereochemistry.</li>
<li><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" title="Implicit Ref (i.e. hydrogen, N lone pair, ...).">OBStereo::ImplicitRef</a>: Can be used to replace implicit hydrogen ids. Even with explicit hydrogens, it is still valid to replace the Ref of the hydrogen with ImplicitRef. This flexibility also applies to comparing stereochemistry. It is possible to compare stereochemistry (e.g. OBTetrahedral::Config::operator==) between a Config struct with an ImplicitRef and a Config struct where the Ref is the atom id of the explicit hydrogen. See actual documentation for details about operator==.</li>
</ul>
<p>There are utility functions which make it easier to handle Refs. The most frequently used one is <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">OBStereo::MakeRefs</a> to create lists containing 3 or 4 Ref values. Formats and library use normally doesn't need the other functions.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a> <a class="el" href="classOpenBabel_1_1OBStereoFacade.shtml" title="Facade to simplify retrieval of OBStereoBase derived objects.">OBStereoFacade</a> </dd></dl>
<dl class="since"><dt><b>Since:</b></dt><dd>version 2.3 </dd></dl>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="aff913cc7d694153b33e2b3ac168a6350"></a><!-- doxytag: member="OpenBabel::OBStereo::Ref" ref="aff913cc7d694153b33e2b3ac168a6350" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned long <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>All stereo classes work with variables of the type Ref to uniquely identify atoms. In most cases these Ref variables are the same as the unique atom ids.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBAtom.shtml#a1e4a97cdb0dce128f98c6c08ec7c85e4">OBAtom::GetId()</a> <a class="el" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp; Ref/Refs related functions.">OBStereo</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa6d4491769cb9af32f3ea22e9f9a66c4"></a><!-- doxytag: member="OpenBabel::OBStereo::Refs" ref="aa6d4491769cb9af32f3ea22e9f9a66c4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>&gt; <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>A list (std::vector) of Ref variables. </p>

</div>
</div>
<a class="anchor" id="a1380cd3ca593dd317be63064b47e14db"></a><!-- doxytag: member="OpenBabel::OBStereo::RefIter" ref="a1380cd3ca593dd317be63064b47e14db" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef Refs::iterator <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">RefIter</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Iterator (std::iterator) for a Refs list. </p>

</div>
</div>
<a class="anchor" id="a6f0021eb4868fb5540a2cedde823ada1"></a><!-- doxytag: member="OpenBabel::OBStereo::ConstRefIter" ref="a6f0021eb4868fb5540a2cedde823ada1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef Refs::const_iterator <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">ConstRefIter</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Iterator (std::iterator) for a const Refs list. </p>

</div>
</div>
<hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7"></a><!-- doxytag: member="OpenBabel::OBStereo::Type" ref="a1d1cfd8ffb84e947f82999c682b666a7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">Type</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>The various types of stereochemistry </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396"></a><!-- doxytag: member="CisTrans" ref="a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396" args="" -->CisTrans</em>&nbsp;</td><td>
<p>cis/trans double bond </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932"></a><!-- doxytag: member="ExtendedCisTrans" ref="a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932" args="" -->ExtendedCisTrans</em>&nbsp;</td><td>
<p>allene, biphenyl, ... </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3"></a><!-- doxytag: member="SquarePlanar" ref="a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3" args="" -->SquarePlanar</em>&nbsp;</td><td>
<p>Square-planar stereochemistry. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be"></a><!-- doxytag: member="Tetrahedral" ref="a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be" args="" -->Tetrahedral</em>&nbsp;</td><td>
<p>tetrahedral </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3"></a><!-- doxytag: member="ExtendedTetrahedral" ref="a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3" args="" -->ExtendedTetrahedral</em>&nbsp;</td><td>
<p>extended tetrahedral </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397"></a><!-- doxytag: member="TrigonalBipyramidal" ref="a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397" args="" -->TrigonalBipyramidal</em>&nbsp;</td><td>
<p>Trigonal-bipyramidal stereochemistry. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af"></a><!-- doxytag: member="Octahedral" ref="a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af" args="" -->Octahedral</em>&nbsp;</td><td>
<p>Octahedral stereochemistry. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="a90087c9021331c97c28e9a8329f41e97"></a><!-- doxytag: member="OpenBabel::OBStereo::BondDirection" ref="a90087c9021331c97c28e9a8329f41e97" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">BondDirection</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Bond directions used by <a class="el" href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">StereoFrom0D()</a> to translate to internal CisTransStereo representation. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1"></a><!-- doxytag: member="NotStereo" ref="a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1" args="" -->NotStereo</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1"></a><!-- doxytag: member="UpBond" ref="a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1" args="" -->UpBond</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea"></a><!-- doxytag: member="DownBond" ref="a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea" args="" -->DownBond</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262"></a><!-- doxytag: member="UnknownDir" ref="a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262" args="" -->UnknownDir</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="a55b506070847a13554f8b879c1bfb37c"></a><!-- doxytag: member="OpenBabel::OBStereo::Shape" ref="a55b506070847a13554f8b879c1bfb37c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">Shape</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Shapes used by <a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml" title="Base class for handling and storing planar stereochemistry with 4 reference atoms.">OBTetraPlanarStereo</a> subclasses for setting/getting reference ids.</p>
<div class="image">
<img src="SPshapes.png" alt="SPshapes.png"/>
</div>
 <dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml" title="Base class for handling and storing planar stereochemistry with 4 reference atoms.">OBTetraPlanarStereo</a> </dd></dl>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca"></a><!-- doxytag: member="ShapeU" ref="a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca" args="" -->ShapeU</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d"></a><!-- doxytag: member="ShapeZ" ref="a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d" args="" -->ShapeZ</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31"></a><!-- doxytag: member="Shape4" ref="a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31" args="" -->Shape4</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="af1dfb9e747d80437422fdb5fba87c2c7"></a><!-- doxytag: member="OpenBabel::OBStereo::View" ref="af1dfb9e747d80437422fdb5fba87c2c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">View</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Views used by <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml" title="Base class for handling and storing non-planar stereochemistry with 4 reference atom ids...">OBTetraNonPlanarStereo</a> subclasses for setting/getting reference ids. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml" title="Base class for handling and storing non-planar stereochemistry with 4 reference atom ids...">OBTetraNonPlanarStereo</a> </dd></dl>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e"></a><!-- doxytag: member="ViewFrom" ref="af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e" args="" -->ViewFrom</em>&nbsp;</td><td>
<p>view from the atom (id parameter) towards the center atom </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155"></a><!-- doxytag: member="ViewTowards" ref="af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155" args="" -->ViewTowards</em>&nbsp;</td><td>
<p>view from center atom towards the atom (id paramater) </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="ac3e0e8e3a194037cdf6103a95a1c6d31"></a><!-- doxytag: member="OpenBabel::OBStereo::Winding" ref="ac3e0e8e3a194037cdf6103a95a1c6d31" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">Winding</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Windings used by OBTetraNonPlanar subclasses for setting/getting reference ids. </p>
<dl class="see"><dt><b>See also:</b></dt><dd>OBTetraNonPlanar </dd></dl>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7"></a><!-- doxytag: member="Clockwise" ref="ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7" args="" -->Clockwise</em>&nbsp;</td><td>
<p>Clockwise winding. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609"></a><!-- doxytag: member="AntiClockwise" ref="ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609" args="" -->AntiClockwise</em>&nbsp;</td><td>
<p>AntiClockwise winding (or CounterClockwise) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ac3e0e8e3a194037cdf6103a95a1c6d31a7c3b131410d13135cf3b0f159a6cb899"></a><!-- doxytag: member="UnknownWinding" ref="ac3e0e8e3a194037cdf6103a95a1c6d31a7c3b131410d13135cf3b0f159a6cb899" args="" -->UnknownWinding</em>&nbsp;</td><td>
<p>The configuration is specified as unknown (squiggly line in depiction) </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<a class="anchor" id="aba01db17f4a2bfbc3db60dc172972a25"></a><!-- doxytag: member="OpenBabel::OBStereo::@15" ref="aba01db17f4a2bfbc3db60dc172972a25" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Special case Ref values. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db"></a><!-- doxytag: member="NoRef" ref="aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db" args="" -->NoRef</em>&nbsp;</td><td>
<p>No Ref set (invalid Ref) </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015"></a><!-- doxytag: member="ImplicitRef" ref="aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015" args="" -->ImplicitRef</em>&nbsp;</td><td>
<p>Implicit Ref (i.e. hydrogen, N lone pair, ...). </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a677b4acc48f3ee3d31f35e20b62ea534"></a><!-- doxytag: member="OpenBabel::OBStereo::MakeRefs" ref="a677b4acc48f3ee3d31f35e20b62ea534" args="(Ref ref1, Ref ref2, Ref ref3, Ref ref4=NoRef)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> MakeRefs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>&#160;</td>
          <td class="paramname"><em>ref1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>&#160;</td>
          <td class="paramname"><em>ref2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>&#160;</td>
          <td class="paramname"><em>ref3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>&#160;</td>
          <td class="paramname"><em>ref4</em> = <code>NoRef</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Create a Refs list filled with <code>ref1</code>, <code>ref2</code>, <code>ref3</code> &amp; <code>ref4</code>. <code>ref4</code> is not added to the returned Refs if it is equal to NoRef.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A Refs list containing the specified Ref values. </dd></dl>

</div>
</div>
<a class="anchor" id="abb14ec41d65b0dc4d49707a713da483f"></a><!-- doxytag: member="OpenBabel::OBStereo::ContainsSameRefs" ref="abb14ec41d65b0dc4d49707a713da483f" args="(const Refs &amp;refs1, const Refs &amp;refs2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool ContainsSameRefs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Check if <code>refs1</code> and <code>refs2</code> contain the same Ref values regardless of their order.</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#abb14ec41d65b0dc4d49707a713da483f">OBStereo::ContainsSameRefs</a>(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">OBStereo::MakeRefs</a>(1, 2, 3), <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">OBStereo::MakeRefs</a>(2, 3, 1)) <span class="comment">// true</span>
 OBStereo::<a class="code" href="structOpenBabel_1_1OBStereo.shtml#abb14ec41d65b0dc4d49707a713da483f">ContainsSameRefs</a>(OBStereo::<a class="code" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">MakeRefs</a>(1, 2, 3), OBStereo::MakeRefs(3, 2, 1)) <span class="comment">// true</span>
 OBStereo::<a class="code" href="structOpenBabel_1_1OBStereo.shtml#abb14ec41d65b0dc4d49707a713da483f">ContainsSameRefs</a>(OBStereo::MakeRefs(1, 2, 3), OBStereo::MakeRefs(3, 4, 1)) <span class="comment">// false</span>
</pre></div><dl class="return"><dt><b>Returns:</b></dt><dd>True if <code>refs1</code> and <code>refs2</code> contain the same Ref values. </dd></dl>

</div>
</div>
<a class="anchor" id="a7dd420f7528abb409341a8a5874143db"></a><!-- doxytag: member="OpenBabel::OBStereo::ContainsRef" ref="a7dd420f7528abb409341a8a5874143db" args="(const Refs &amp;refs, unsigned long ref)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool ContainsRef </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>ref</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <code>refs</code> contains <code>ref</code>. </dd></dl>

</div>
</div>
<a class="anchor" id="a0ba3b9c408bae435888d6fdc69be280a"></a><!-- doxytag: member="OpenBabel::OBStereo::NumInversions" ref="a0ba3b9c408bae435888d6fdc69be280a" args="(const Refs &amp;refs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int NumInversions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs</em></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Compute the inversion vector for <code>refs</code> and return the sum of it's elements. The ith element in the inversion vector is the number of element to the right of element i with a lower value.</p>
<p>The number of inversions is the same as the number of interchanges of consecutive elements.</p>
<p>When working with 3 refs from a tetrahedral configuration: </p>
<div class="fragment"><pre class="fragment"> permutation   inversion vector    sum
 -------------------------------------
 123           0 0 0               0 (even) -&gt; clockwise
 132           0 1 0               1 (odd)  -&gt; anti-clockwise
 213           1 0 0               1 (odd)  -&gt; anti-clockwise
 231           1 1 0               2 (even) -&gt; clockwise
 312           2 0 0               2 (even) -&gt; clockwise
 321           2 1 0               3 (odd)  -&gt; anti-clockwise
</pre></div> 
</div>
</div>
<a class="anchor" id="a91f98766fb3dc116169a4871f8b153cd"></a><!-- doxytag: member="OpenBabel::OBStereo::Permutate" ref="a91f98766fb3dc116169a4871f8b153cd" args="(Refs &amp;refs, int i, int j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void Permutate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Permutate element <code>i</code> with <code>j</code> in <code>refs</code>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">refs</td><td>The sequence with N elements to permutate. </td></tr>
    <tr><td class="paramname">i</td><td>Element i (0...N-1) will be mutated to j and vice versa. </td></tr>
    <tr><td class="paramname">j</td><td>Element j (0...N-1) will be mutated to i and vice versa.</td></tr>
  </table>
  </dd>
</dl>
<dl class="note"><dt><b>Note:</b></dt><dd>This method does nothing if i equals j. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a7b6468e32f45ddd869bb6562e48932ba">OBTetraNonPlanarStereo::ChangeView()</a>, <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a2bcce1b06cf3b4bedda017788b670561">OBTetraNonPlanarStereo::ChangeWinding()</a>, <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#aae41e67e3acadf06788b04ab7252e0e8">OBTetraNonPlanarStereo::Invert()</a>, <a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml#a2feb933d2ed497f473d610552e77d529">OBTetraPlanarStereo::ToConfig()</a>, and <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#ac6f1bf41e38b3e8b182fa57269046070">OBTetraNonPlanarStereo::ToConfig()</a>.</p>

</div>
</div>
<a class="anchor" id="a208dedfeef4f58d65d01feb2f8a86d31"></a><!-- doxytag: member="OpenBabel::OBStereo::Permutated" ref="a208dedfeef4f58d65d01feb2f8a86d31" args="(const Refs &amp;refs, int i, int j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> Permutated </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a> &amp;&#160;</td>
          <td class="paramname"><em>refs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get <code>refs</code> with element <code>i</code> and <code>j</code> permutated.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">refs</td><td>The sequence with N elements to permutate. </td></tr>
    <tr><td class="paramname">i</td><td>Element <code>i</code> (0...N-1) will be mutated to <code>j</code> and vice versa. </td></tr>
    <tr><td class="paramname">j</td><td>Element <code>j</code> (0...N-1) will be mutated to <code>i</code> and vice versa.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><code>refs</code> with elements <code>i</code> and <code>j</code> permutated.</dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>This method does nothing if <code>i</code> equals <code>j</code>. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="stereo_8h_source.shtml">stereo.h</a></li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:11 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
