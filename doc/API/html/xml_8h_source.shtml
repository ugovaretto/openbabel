<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>xml.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">xml.h</div>  </div>
</div>
<div class="contents">
<a href="xml_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">xml.h Declaration of XMLConversion,</span>
<a name="l00003"></a>00003 <span class="comment">declaration and definition of XMLBaseFormat and XMLMoleculeFormat</span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005-2006 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00011"></a>00011 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00012"></a>00012 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00013"></a>00013 <span class="comment">GNU General Public License for more details.</span>
<a name="l00014"></a>00014 <span class="comment">***********************************************************************/</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#ifndef OB_XML_H</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#define OB_XML_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel)...">openbabel/mol.h</a>&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion.">openbabel/obconversion.h</a>&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml" title="Subclass of OBFormat for conversion of OBMol.">openbabel/obmolecformat.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;libxml/xmlreader.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;libxml/xmlwriter.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">namespace </span>OpenBabel
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   <span class="comment">//forward declaration</span>
<a name="l00034"></a>00034   <span class="keyword">class </span>XMLBaseFormat;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">//******************************************************</span>
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">00053</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055     <span class="keyword">public</span>:
<a name="l00057"></a>00057       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a88492ed87e2bb55fa507a811230aa843" title="Existing OBConversion instance copied.">XMLConversion</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv);
<a name="l00058"></a>00058 
<a name="l00060"></a>00060       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#aac1b603c1695a1a41ebbeaa3fd398e10" title="Frees reader and writer if necessary.">~XMLConversion</a>();
<a name="l00061"></a>00061 
<a name="l00062"></a>00062       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a59c32b70bb5bf6ee27b0611920d5afde" title="opens libxml2 reader">SetupReader</a>();
<a name="l00063"></a>00063       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#af91d68d5aff24430ababf0a5d847b9cb" title="opens libxml2 writer">SetupWriter</a>();
<a name="l00064"></a>00064 
<a name="l00066"></a>00066       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ad107b052021a4cd6976288dc3d9d797b" title="Parses the input xml stream and sends each element to the format&#39;s callback routines.">ReadXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat, <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00067"></a>00067 
<a name="l00070"></a>00070       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">SkipXML</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ctag);
<a name="l00071"></a>00071 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">00072</a>       <span class="keyword">typedef</span> std::map&lt;std::string, XMLBaseFormat*&gt; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;
<a name="l00073"></a>00073 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">00076</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>&amp; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">Namespaces</a>()
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078           <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a> ns;
<a name="l00079"></a>00079           <span class="keywordflow">return</span> ns;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081           <span class="comment">//static NsMapType* nsm = NULL;</span>
<a name="l00082"></a>00082           <span class="comment">//if (!nsm)</span>
<a name="l00083"></a>00083           <span class="comment">//  nsm = new NsMapType;</span>
<a name="l00084"></a>00084           <span class="comment">//return *nsm;</span>
<a name="l00085"></a>00085         };
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a09777c99e10d28476c0c920dd784a235">RegisterXMLFormat</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat,
<a name="l00088"></a>00088                                     <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* uri=NULL);
<a name="l00089"></a>00089 
<a name="l00091"></a>00091       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">GetDerived</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv, <span class="keywordtype">bool</span> ForReading=<span class="keyword">true</span>);
<a name="l00092"></a>00092 
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">00095</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">IsLast</a>()
<a name="l00096"></a>00096         { <span class="keywordflow">return</span> _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d" title="True if no more objects to be output.">IsLast</a>(); }
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">00097</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">GetOutputIndex</a>()
<a name="l00098"></a>00098         { <span class="keywordflow">return</span>  _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#ad44eaf0b472408acb158334c8725d339" title="Retrieves number of ChemObjects that have been actually output.">GetOutputIndex</a>(); }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6aae68e56f624f6e485930b8c9532c21">00101</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6aae68e56f624f6e485930b8c9532c21">GetReader</a>()<span class="keyword"> const</span>
<a name="l00102"></a>00102 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _reader;   };
<a name="l00103"></a>00103 
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a8caa6e4b2d72f14392c800bdb6fa28cb">00104</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a8caa6e4b2d72f14392c800bdb6fa28cb">GetWriter</a>()<span class="keyword"> const</span>
<a name="l00105"></a>00105 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _writer;   };
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">00107</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>()
<a name="l00108"></a>00108         {
<a name="l00109"></a>00109           xmlOutputBufferFlush(_buf);
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">00112</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">GetDefaultXMLClass</a>() <span class="comment">//TODO make dependent on object type</span>
<a name="l00113"></a>00113         { <span class="keywordflow">return</span> _pDefault;};
<a name="l00114"></a>00114 
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">00115</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">LookForNamespace</a>()
<a name="l00116"></a>00116         { _LookingForNamespace = <span class="keyword">true</span>; };
<a name="l00117"></a>00117 
<a name="l00119"></a>00119       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a499db0113e7e419a0488316e2c51ca05" title="Static callback functions for xmlReaderForIO()">ReadStream</a>(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00120"></a>00120       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a2dcb149cda158829b4bd51979532798a">WriteStream</a>(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00121"></a>00121       <span class="comment">//static int CloseStream(void* context);</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ad465787fba2c11cf2574fb3d142460b5">GetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* attrname);
<a name="l00124"></a>00124 
<a name="l00126"></a>00126       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a81f0e81929276d8fa2d28af1bc47960c" title="Sets value to element content. Returns false if there is no content.">GetContent</a>();
<a name="l00127"></a>00127 
<a name="l00129"></a>00129       <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a5717310e3e50ca47144910f9968d2011" title="Sets value to element content as an integer. Returns false if there is no content.">GetContentInt</a>(<span class="keywordtype">int</span>&amp; value);
<a name="l00130"></a>00130 
<a name="l00132"></a>00132       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a7b14e97eab5859b8a02cd97abfc7e860" title="Sets value to element content as an double. Returns false if there is no content.">GetContentDouble</a>(<span class="keywordtype">double</span>&amp; value);
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keyword">private</span>:
<a name="l00135"></a>00135       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* _pDefault;
<a name="l00136"></a>00136       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* _pConv;
<a name="l00137"></a>00137       std::streampos  _requestedpos, _lastpos;
<a name="l00138"></a>00138       xmlTextReaderPtr _reader;
<a name="l00139"></a>00139       xmlTextWriterPtr _writer;
<a name="l00140"></a>00140       xmlOutputBufferPtr _buf;
<a name="l00141"></a>00141       <span class="comment">//    xmlBufferPtr _buf;</span>
<a name="l00142"></a>00142       <span class="keywordtype">bool</span> _LookingForNamespace;
<a name="l00143"></a>00143     <span class="keyword">public</span>:
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">00144</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">_SkipNextRead</a>;
<a name="l00145"></a>00145     };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">//*************************************************</span>
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">00150</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152     <span class="keyword">protected</span>:
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">00153</a>       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155       <span class="comment">//formating for output</span>
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">00156</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a>;
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">00157</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a>, <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">ind</a>;
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">00158</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">nsdecl</a>;
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">00159</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keyword">public</span>:
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">00162</a>       <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">~XMLBaseFormat</a>(){}
<a name="l00163"></a>00163       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab3d80dde715e0505ef1818a621ecd888">NamespaceURI</a>()<span class="keyword">const</span>=0;
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">00164</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">DoElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">00165</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">00167</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &quot;/molecule&gt;&quot;.">EndTag</a>(){<span class="keywordflow">return</span> <span class="stringliteral">&quot;&gt;&quot;</span>;};
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keyword">protected</span>:
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9d9e2a08b0659f0bc93d3eb7eaf8f05d">00170</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9d9e2a08b0659f0bc93d3eb7eaf8f05d">reader</a>()<span class="keyword"> const</span>
<a name="l00171"></a>00171 <span class="keyword">        </span>{
<a name="l00172"></a>00172           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6aae68e56f624f6e485930b8c9532c21">GetReader</a>();
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9569f81d2916200422a7927572913336">00175</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a9569f81d2916200422a7927572913336">writer</a>()<span class="keyword"> const</span>
<a name="l00176"></a>00176 <span class="keyword">        </span>{
<a name="l00177"></a>00177           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a8caa6e4b2d72f14392c800bdb6fa28cb">GetWriter</a>();
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179 
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">00180</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>()
<a name="l00181"></a>00181         {
<a name="l00182"></a>00182           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>();
<a name="l00183"></a>00183         }
<a name="l00184"></a>00184 
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">00187</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a>(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00188"></a>00188         {
<a name="l00189"></a>00189           <span class="comment">//don&#39;t implement on base class</span>
<a name="l00190"></a>00190           <span class="keywordflow">if</span>(*<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &quot;/molecule&gt;&quot;.">EndTag</a>()==<span class="charliteral">&#39;&gt;&#39;</span>)
<a name="l00191"></a>00191             <span class="keywordflow">return</span> 0;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193           <span class="comment">//Set up XMLConversion class with reader</span>
<a name="l00194"></a>00194           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00195"></a>00195           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>)
<a name="l00196"></a>00196             <span class="keywordflow">return</span> -1;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198           <span class="comment">//always find the end of at least 1 object</span>
<a name="l00199"></a>00199           <span class="keywordflow">if</span>(n==0)++n;
<a name="l00200"></a>00200 
<a name="l00201"></a>00201           <span class="comment">//Skip n objects, returning -1 if not successful</span>
<a name="l00202"></a>00202           <span class="keywordtype">int</span> i;
<a name="l00203"></a>00203           <span class="keywordflow">for</span>(i=0; i&lt;n; ++i)
<a name="l00204"></a>00204             <span class="keywordflow">if</span>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">SkipXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &quot;/molecule&gt;&quot;.">EndTag</a>())!=1)
<a name="l00205"></a>00205               <span class="keywordflow">return</span> -1;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207           <span class="keywordflow">return</span> 1;
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210     };
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   <span class="comment">//*************************************************</span>
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">00215</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml" title="Abstract class for XML formats which represent molecules.">XMLMoleculeFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217     <span class="keyword">protected</span>:
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">00218</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>* <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">_pmol</a>;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     <span class="keyword">public</span>:
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">00221</a>       <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">~XMLMoleculeFormat</a>(){}
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">00222</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723" title="The &quot;Convert&quot; interface Read function.">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00223"></a>00223         {
<a name="l00224"></a>00224           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::ReadChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00225"></a>00225         };
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">00227</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003" title="The &quot;Convert&quot; interface Write function.">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00228"></a>00228         {
<a name="l00229"></a>00229           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::WriteChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00230"></a>00230         };
<a name="l00231"></a>00231 
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">00232</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146" title="The &quot;API&quot; interface Read function.">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234           <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">_pmol</a> = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*<span class="keyword">&gt;</span>(pOb);
<a name="l00235"></a>00235           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">_pmol</a>)
<a name="l00236"></a>00236             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00237"></a>00237           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00238"></a>00238           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>)
<a name="l00239"></a>00239             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00240"></a>00240           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a> = -1;
<a name="l00241"></a>00241           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ad107b052021a4cd6976288dc3d9d797b" title="Parses the input xml stream and sends each element to the format&#39;s callback routines.">ReadXML</a>(<span class="keyword">this</span>,pOb);
<a name="l00242"></a>00242         };
<a name="l00243"></a>00243 
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">00244</a>       <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">GetType</a>()
<a name="l00245"></a>00245         {
<a name="l00246"></a>00246           <span class="keywordflow">return</span> <span class="keyword">typeid</span>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*);
<a name="l00247"></a>00247         };
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     };
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 }<span class="comment">//namespace</span>
<a name="l00253"></a>00253 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Oct 13 2011 16:08:08 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.5.1.
</div>

</body>
</html>
